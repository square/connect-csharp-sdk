/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents an applied portion of a discount to a line item in an order.  Order scoped discounts will automatically have applied discounts present for each line item. Line item scoped discounts must have applied discounts added manually for any applicable line items. The corresponding applied money will automatically be computed based on participating line items.
    /// Note: This endpoint is in beta.
    /// </summary>
    [DataContract]
    public partial class OrderLineItemAppliedDiscount :  IEquatable<OrderLineItemAppliedDiscount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItemAppliedDiscount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderLineItemAppliedDiscount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItemAppliedDiscount" /> class.
        /// </summary>
        /// <param name="Uid">Unique ID that identifies the applied discount only within this order..</param>
        /// <param name="DiscountUid">The &#x60;uid&#x60; of the discount the applied discount represents. Must reference a discount present in the &#x60;order.discounts&#x60; field.  This field is immutable. To change which discounts apply to a line item, you must delete the discount and re-add it as a new &#x60;OrderLineItemAppliedDiscount&#x60;. (required).</param>
        /// <param name="AppliedMoney">The amount of money applied by the discount to the line item..</param>
        public OrderLineItemAppliedDiscount(string Uid = default(string), string DiscountUid = default(string), Money AppliedMoney = default(Money))
        {
            // to ensure "DiscountUid" is required (not null)
            if (DiscountUid == null)
            {
                throw new InvalidDataException("DiscountUid is a required property for OrderLineItemAppliedDiscount and cannot be null");
            }
            else
            {
                this.DiscountUid = DiscountUid;
            }
            this.Uid = Uid;
            this.AppliedMoney = AppliedMoney;
        }
        
        /// <summary>
        /// Unique ID that identifies the applied discount only within this order.
        /// </summary>
        /// <value>Unique ID that identifies the applied discount only within this order.</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }
        /// <summary>
        /// The &#x60;uid&#x60; of the discount the applied discount represents. Must reference a discount present in the &#x60;order.discounts&#x60; field.  This field is immutable. To change which discounts apply to a line item, you must delete the discount and re-add it as a new &#x60;OrderLineItemAppliedDiscount&#x60;.
        /// </summary>
        /// <value>The &#x60;uid&#x60; of the discount the applied discount represents. Must reference a discount present in the &#x60;order.discounts&#x60; field.  This field is immutable. To change which discounts apply to a line item, you must delete the discount and re-add it as a new &#x60;OrderLineItemAppliedDiscount&#x60;.</value>
        [DataMember(Name="discount_uid", EmitDefaultValue=false)]
        public string DiscountUid { get; set; }
        /// <summary>
        /// The amount of money applied by the discount to the line item.
        /// </summary>
        /// <value>The amount of money applied by the discount to the line item.</value>
        [DataMember(Name="applied_money", EmitDefaultValue=false)]
        public Money AppliedMoney { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLineItemAppliedDiscount {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  DiscountUid: ").Append(DiscountUid).Append("\n");
            sb.Append("  AppliedMoney: ").Append(AppliedMoney).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderLineItemAppliedDiscount);
        }

        /// <summary>
        /// Returns true if OrderLineItemAppliedDiscount instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderLineItemAppliedDiscount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineItemAppliedDiscount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uid == other.Uid ||
                    this.Uid != null &&
                    this.Uid.Equals(other.Uid)
                ) && 
                (
                    this.DiscountUid == other.DiscountUid ||
                    this.DiscountUid != null &&
                    this.DiscountUid.Equals(other.DiscountUid)
                ) && 
                (
                    this.AppliedMoney == other.AppliedMoney ||
                    this.AppliedMoney != null &&
                    this.AppliedMoney.Equals(other.AppliedMoney)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uid != null)
                    hash = hash * 59 + this.Uid.GetHashCode();
                if (this.DiscountUid != null)
                    hash = hash * 59 + this.DiscountUid.GetHashCode();
                if (this.AppliedMoney != null)
                    hash = hash * 59 + this.AppliedMoney.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Uid (string) maxLength
            if(this.Uid != null && this.Uid.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Uid, length must be less than 60.", new [] { "Uid" });
            }

            // DiscountUid (string) maxLength
            if(this.DiscountUid != null && this.DiscountUid.Length > 60)
            {
                yield return new ValidationResult("Invalid value for DiscountUid, length must be less than 60.", new [] { "DiscountUid" });
            }

            // DiscountUid (string) minLength
            if(this.DiscountUid != null && this.DiscountUid.Length < 1)
            {
                yield return new ValidationResult("Invalid value for DiscountUid, length must be greater than 1.", new [] { "DiscountUid" });
            }

            yield break;
        }
    }

}
