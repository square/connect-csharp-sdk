/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1ModifierOption
    /// </summary>
    [DataContract]
    [Obsolete]
    public partial class V1ModifierOption :  IEquatable<V1ModifierOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ModifierOption" /> class.
        /// </summary>
        /// <param name="Id">The modifier option&#39;s unique ID..</param>
        /// <param name="Name">The modifier option&#39;s name..</param>
        /// <param name="PriceMoney">The modifier option&#39;s price..</param>
        /// <param name="OnByDefault">If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE..</param>
        /// <param name="Ordinal">Indicates the modifier option&#39;s list position when displayed in Square Point of Sale and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order..</param>
        /// <param name="ModifierListId">The ID of the modifier list the option belongs to..</param>
        /// <param name="V2Id">The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID..</param>
        public V1ModifierOption(string Id = default(string), string Name = default(string), V1Money PriceMoney = default(V1Money), bool? OnByDefault = default(bool?), int? Ordinal = default(int?), string ModifierListId = default(string), string V2Id = default(string))
        {
            this.Id = Id;
            this.Name = Name;
            this.PriceMoney = PriceMoney;
            this.OnByDefault = OnByDefault;
            this.Ordinal = Ordinal;
            this.ModifierListId = ModifierListId;
            this.V2Id = V2Id;
        }
        
        /// <summary>
        /// The modifier option&#39;s unique ID.
        /// </summary>
        /// <value>The modifier option&#39;s unique ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The modifier option&#39;s name.
        /// </summary>
        /// <value>The modifier option&#39;s name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The modifier option&#39;s price.
        /// </summary>
        /// <value>The modifier option&#39;s price.</value>
        [DataMember(Name="price_money", EmitDefaultValue=false)]
        public V1Money PriceMoney { get; set; }
        /// <summary>
        /// If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE.
        /// </summary>
        /// <value>If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE.</value>
        [DataMember(Name="on_by_default", EmitDefaultValue=false)]
        public bool? OnByDefault { get; set; }
        /// <summary>
        /// Indicates the modifier option&#39;s list position when displayed in Square Point of Sale and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order.
        /// </summary>
        /// <value>Indicates the modifier option&#39;s list position when displayed in Square Point of Sale and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order.</value>
        [DataMember(Name="ordinal", EmitDefaultValue=false)]
        public int? Ordinal { get; set; }
        /// <summary>
        /// The ID of the modifier list the option belongs to.
        /// </summary>
        /// <value>The ID of the modifier list the option belongs to.</value>
        [DataMember(Name="modifier_list_id", EmitDefaultValue=false)]
        public string ModifierListId { get; set; }
        /// <summary>
        /// The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
        /// </summary>
        /// <value>The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.</value>
        [DataMember(Name="v2_id", EmitDefaultValue=false)]
        public string V2Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1ModifierOption {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PriceMoney: ").Append(PriceMoney).Append("\n");
            sb.Append("  OnByDefault: ").Append(OnByDefault).Append("\n");
            sb.Append("  Ordinal: ").Append(Ordinal).Append("\n");
            sb.Append("  ModifierListId: ").Append(ModifierListId).Append("\n");
            sb.Append("  V2Id: ").Append(V2Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1ModifierOption);
        }

        /// <summary>
        /// Returns true if V1ModifierOption instances are equal
        /// </summary>
        /// <param name="other">Instance of V1ModifierOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1ModifierOption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PriceMoney == other.PriceMoney ||
                    this.PriceMoney != null &&
                    this.PriceMoney.Equals(other.PriceMoney)
                ) && 
                (
                    this.OnByDefault == other.OnByDefault ||
                    this.OnByDefault != null &&
                    this.OnByDefault.Equals(other.OnByDefault)
                ) && 
                (
                    this.Ordinal == other.Ordinal ||
                    this.Ordinal != null &&
                    this.Ordinal.Equals(other.Ordinal)
                ) && 
                (
                    this.ModifierListId == other.ModifierListId ||
                    this.ModifierListId != null &&
                    this.ModifierListId.Equals(other.ModifierListId)
                ) && 
                (
                    this.V2Id == other.V2Id ||
                    this.V2Id != null &&
                    this.V2Id.Equals(other.V2Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PriceMoney != null)
                    hash = hash * 59 + this.PriceMoney.GetHashCode();
                if (this.OnByDefault != null)
                    hash = hash * 59 + this.OnByDefault.GetHashCode();
                if (this.Ordinal != null)
                    hash = hash * 59 + this.Ordinal.GetHashCode();
                if (this.ModifierListId != null)
                    hash = hash * 59 + this.ModifierListId.GetHashCode();
                if (this.V2Id != null)
                    hash = hash * 59 + this.V2Id.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
