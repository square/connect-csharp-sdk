/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Reflects the current status of a card payment.
    /// </summary>
    [DataContract]
    public partial class CardPaymentDetails :  IEquatable<CardPaymentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardPaymentDetails" /> class.
        /// </summary>
        /// <param name="Status">The card payment&#39;s current state. It can be one of: &#x60;AUTHORIZED&#x60;, &#x60;CAPTURED&#x60;, &#x60;VOIDED&#x60;, &#x60;FAILED&#x60;..</param>
        /// <param name="Card">The credit card&#39;s non-confidential details..</param>
        /// <param name="EntryMethod">The method used to enter the card&#39;s details for the payment.  Can be &#x60;KEYED&#x60;, &#x60;SWIPED&#x60;, &#x60;EMV&#x60;, &#x60;ON_FILE&#x60;, or &#x60;CONTACTLESS&#x60;..</param>
        /// <param name="CvvStatus">Status code returned from the Card Verification Value (CVV) check. Can be &#x60;CVV_ACCEPTED&#x60;, &#x60;CVV_REJECTED&#x60;, &#x60;CVV_NOT_CHECKED&#x60;..</param>
        /// <param name="AvsStatus">Status code returned from the Address Verification System (AVS) check. Can be &#x60;AVS_ACCEPTED&#x60;, &#x60;AVS_REJECTED&#x60;, &#x60;AVS_NOT_CHECKED&#x60;..</param>
        /// <param name="AuthResultCode">Status code returned by the card issuer that describes the payment&#39;s authorization status..</param>
        /// <param name="ApplicationIdentifier">For EMV payments, identifies the EMV application used for the payment..</param>
        /// <param name="ApplicationName">For EMV payments, the human-readable name of the EMV application used for the payment..</param>
        /// <param name="ApplicationCryptogram">For EMV payments, the cryptogram generated for the payment..</param>
        /// <param name="VerificationMethod">For EMV payments, method used to verify the cardholder&#39;s identity.  Can be one of &#x60;PIN&#x60;, &#x60;SIGNATURE&#x60;, &#x60;PIN_AND_SIGNATURE&#x60;, &#x60;ON_DEVICE&#x60;, or &#x60;NONE&#x60;..</param>
        /// <param name="VerificationResults">For EMV payments, the results of the cardholder verification.  Can be one of &#x60;SUCCESS&#x60;, &#x60;FAILURE&#x60;, or &#x60;UNKNOWN&#x60;..</param>
        /// <param name="StatementDescription">The statement description sent to the card networks.  Note: The actual statement description will vary and is likely to be truncated and appended with additional information on a per issuer basis..</param>
        /// <param name="Errors">Information on errors encountered during the request..</param>
        public CardPaymentDetails(string Status = default(string), Card Card = default(Card), string EntryMethod = default(string), string CvvStatus = default(string), string AvsStatus = default(string), string AuthResultCode = default(string), string ApplicationIdentifier = default(string), string ApplicationName = default(string), string ApplicationCryptogram = default(string), string VerificationMethod = default(string), string VerificationResults = default(string), string StatementDescription = default(string), List<Error> Errors = default(List<Error>))
        {
            this.Status = Status;
            this.Card = Card;
            this.EntryMethod = EntryMethod;
            this.CvvStatus = CvvStatus;
            this.AvsStatus = AvsStatus;
            this.AuthResultCode = AuthResultCode;
            this.ApplicationIdentifier = ApplicationIdentifier;
            this.ApplicationName = ApplicationName;
            this.ApplicationCryptogram = ApplicationCryptogram;
            this.VerificationMethod = VerificationMethod;
            this.VerificationResults = VerificationResults;
            this.StatementDescription = StatementDescription;
            this.Errors = Errors;
        }
        
        /// <summary>
        /// The card payment&#39;s current state. It can be one of: &#x60;AUTHORIZED&#x60;, &#x60;CAPTURED&#x60;, &#x60;VOIDED&#x60;, &#x60;FAILED&#x60;.
        /// </summary>
        /// <value>The card payment&#39;s current state. It can be one of: &#x60;AUTHORIZED&#x60;, &#x60;CAPTURED&#x60;, &#x60;VOIDED&#x60;, &#x60;FAILED&#x60;.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// The credit card&#39;s non-confidential details.
        /// </summary>
        /// <value>The credit card&#39;s non-confidential details.</value>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public Card Card { get; set; }
        /// <summary>
        /// The method used to enter the card&#39;s details for the payment.  Can be &#x60;KEYED&#x60;, &#x60;SWIPED&#x60;, &#x60;EMV&#x60;, &#x60;ON_FILE&#x60;, or &#x60;CONTACTLESS&#x60;.
        /// </summary>
        /// <value>The method used to enter the card&#39;s details for the payment.  Can be &#x60;KEYED&#x60;, &#x60;SWIPED&#x60;, &#x60;EMV&#x60;, &#x60;ON_FILE&#x60;, or &#x60;CONTACTLESS&#x60;.</value>
        [DataMember(Name="entry_method", EmitDefaultValue=false)]
        public string EntryMethod { get; set; }
        /// <summary>
        /// Status code returned from the Card Verification Value (CVV) check. Can be &#x60;CVV_ACCEPTED&#x60;, &#x60;CVV_REJECTED&#x60;, &#x60;CVV_NOT_CHECKED&#x60;.
        /// </summary>
        /// <value>Status code returned from the Card Verification Value (CVV) check. Can be &#x60;CVV_ACCEPTED&#x60;, &#x60;CVV_REJECTED&#x60;, &#x60;CVV_NOT_CHECKED&#x60;.</value>
        [DataMember(Name="cvv_status", EmitDefaultValue=false)]
        public string CvvStatus { get; set; }
        /// <summary>
        /// Status code returned from the Address Verification System (AVS) check. Can be &#x60;AVS_ACCEPTED&#x60;, &#x60;AVS_REJECTED&#x60;, &#x60;AVS_NOT_CHECKED&#x60;.
        /// </summary>
        /// <value>Status code returned from the Address Verification System (AVS) check. Can be &#x60;AVS_ACCEPTED&#x60;, &#x60;AVS_REJECTED&#x60;, &#x60;AVS_NOT_CHECKED&#x60;.</value>
        [DataMember(Name="avs_status", EmitDefaultValue=false)]
        public string AvsStatus { get; set; }
        /// <summary>
        /// Status code returned by the card issuer that describes the payment&#39;s authorization status.
        /// </summary>
        /// <value>Status code returned by the card issuer that describes the payment&#39;s authorization status.</value>
        [DataMember(Name="auth_result_code", EmitDefaultValue=false)]
        public string AuthResultCode { get; set; }
        /// <summary>
        /// For EMV payments, identifies the EMV application used for the payment.
        /// </summary>
        /// <value>For EMV payments, identifies the EMV application used for the payment.</value>
        [DataMember(Name="application_identifier", EmitDefaultValue=false)]
        public string ApplicationIdentifier { get; set; }
        /// <summary>
        /// For EMV payments, the human-readable name of the EMV application used for the payment.
        /// </summary>
        /// <value>For EMV payments, the human-readable name of the EMV application used for the payment.</value>
        [DataMember(Name="application_name", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }
        /// <summary>
        /// For EMV payments, the cryptogram generated for the payment.
        /// </summary>
        /// <value>For EMV payments, the cryptogram generated for the payment.</value>
        [DataMember(Name="application_cryptogram", EmitDefaultValue=false)]
        public string ApplicationCryptogram { get; set; }
        /// <summary>
        /// For EMV payments, method used to verify the cardholder&#39;s identity.  Can be one of &#x60;PIN&#x60;, &#x60;SIGNATURE&#x60;, &#x60;PIN_AND_SIGNATURE&#x60;, &#x60;ON_DEVICE&#x60;, or &#x60;NONE&#x60;.
        /// </summary>
        /// <value>For EMV payments, method used to verify the cardholder&#39;s identity.  Can be one of &#x60;PIN&#x60;, &#x60;SIGNATURE&#x60;, &#x60;PIN_AND_SIGNATURE&#x60;, &#x60;ON_DEVICE&#x60;, or &#x60;NONE&#x60;.</value>
        [DataMember(Name="verification_method", EmitDefaultValue=false)]
        public string VerificationMethod { get; set; }
        /// <summary>
        /// For EMV payments, the results of the cardholder verification.  Can be one of &#x60;SUCCESS&#x60;, &#x60;FAILURE&#x60;, or &#x60;UNKNOWN&#x60;.
        /// </summary>
        /// <value>For EMV payments, the results of the cardholder verification.  Can be one of &#x60;SUCCESS&#x60;, &#x60;FAILURE&#x60;, or &#x60;UNKNOWN&#x60;.</value>
        [DataMember(Name="verification_results", EmitDefaultValue=false)]
        public string VerificationResults { get; set; }
        /// <summary>
        /// The statement description sent to the card networks.  Note: The actual statement description will vary and is likely to be truncated and appended with additional information on a per issuer basis.
        /// </summary>
        /// <value>The statement description sent to the card networks.  Note: The actual statement description will vary and is likely to be truncated and appended with additional information on a per issuer basis.</value>
        [DataMember(Name="statement_description", EmitDefaultValue=false)]
        public string StatementDescription { get; set; }
        /// <summary>
        /// Information on errors encountered during the request.
        /// </summary>
        /// <value>Information on errors encountered during the request.</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<Error> Errors { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardPaymentDetails {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  EntryMethod: ").Append(EntryMethod).Append("\n");
            sb.Append("  CvvStatus: ").Append(CvvStatus).Append("\n");
            sb.Append("  AvsStatus: ").Append(AvsStatus).Append("\n");
            sb.Append("  AuthResultCode: ").Append(AuthResultCode).Append("\n");
            sb.Append("  ApplicationIdentifier: ").Append(ApplicationIdentifier).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ApplicationCryptogram: ").Append(ApplicationCryptogram).Append("\n");
            sb.Append("  VerificationMethod: ").Append(VerificationMethod).Append("\n");
            sb.Append("  VerificationResults: ").Append(VerificationResults).Append("\n");
            sb.Append("  StatementDescription: ").Append(StatementDescription).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CardPaymentDetails);
        }

        /// <summary>
        /// Returns true if CardPaymentDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of CardPaymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardPaymentDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Card == other.Card ||
                    this.Card != null &&
                    this.Card.Equals(other.Card)
                ) && 
                (
                    this.EntryMethod == other.EntryMethod ||
                    this.EntryMethod != null &&
                    this.EntryMethod.Equals(other.EntryMethod)
                ) && 
                (
                    this.CvvStatus == other.CvvStatus ||
                    this.CvvStatus != null &&
                    this.CvvStatus.Equals(other.CvvStatus)
                ) && 
                (
                    this.AvsStatus == other.AvsStatus ||
                    this.AvsStatus != null &&
                    this.AvsStatus.Equals(other.AvsStatus)
                ) && 
                (
                    this.AuthResultCode == other.AuthResultCode ||
                    this.AuthResultCode != null &&
                    this.AuthResultCode.Equals(other.AuthResultCode)
                ) && 
                (
                    this.ApplicationIdentifier == other.ApplicationIdentifier ||
                    this.ApplicationIdentifier != null &&
                    this.ApplicationIdentifier.Equals(other.ApplicationIdentifier)
                ) && 
                (
                    this.ApplicationName == other.ApplicationName ||
                    this.ApplicationName != null &&
                    this.ApplicationName.Equals(other.ApplicationName)
                ) && 
                (
                    this.ApplicationCryptogram == other.ApplicationCryptogram ||
                    this.ApplicationCryptogram != null &&
                    this.ApplicationCryptogram.Equals(other.ApplicationCryptogram)
                ) && 
                (
                    this.VerificationMethod == other.VerificationMethod ||
                    this.VerificationMethod != null &&
                    this.VerificationMethod.Equals(other.VerificationMethod)
                ) && 
                (
                    this.VerificationResults == other.VerificationResults ||
                    this.VerificationResults != null &&
                    this.VerificationResults.Equals(other.VerificationResults)
                ) && 
                (
                    this.StatementDescription == other.StatementDescription ||
                    this.StatementDescription != null &&
                    this.StatementDescription.Equals(other.StatementDescription)
                ) && 
                (
                    this.Errors == other.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(other.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Card != null)
                    hash = hash * 59 + this.Card.GetHashCode();
                if (this.EntryMethod != null)
                    hash = hash * 59 + this.EntryMethod.GetHashCode();
                if (this.CvvStatus != null)
                    hash = hash * 59 + this.CvvStatus.GetHashCode();
                if (this.AvsStatus != null)
                    hash = hash * 59 + this.AvsStatus.GetHashCode();
                if (this.AuthResultCode != null)
                    hash = hash * 59 + this.AuthResultCode.GetHashCode();
                if (this.ApplicationIdentifier != null)
                    hash = hash * 59 + this.ApplicationIdentifier.GetHashCode();
                if (this.ApplicationName != null)
                    hash = hash * 59 + this.ApplicationName.GetHashCode();
                if (this.ApplicationCryptogram != null)
                    hash = hash * 59 + this.ApplicationCryptogram.GetHashCode();
                if (this.VerificationMethod != null)
                    hash = hash * 59 + this.VerificationMethod.GetHashCode();
                if (this.VerificationResults != null)
                    hash = hash * 59 + this.VerificationResults.GetHashCode();
                if (this.StatementDescription != null)
                    hash = hash * 59 + this.StatementDescription.GetHashCode();
                if (this.Errors != null)
                    hash = hash * 59 + this.Errors.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
