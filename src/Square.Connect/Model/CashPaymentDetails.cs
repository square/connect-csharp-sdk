/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Additional details about CASH type payments.
    /// </summary>
    [DataContract]
    public partial class CashPaymentDetails :  IEquatable<CashPaymentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashPaymentDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CashPaymentDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashPaymentDetails" /> class.
        /// </summary>
        /// <param name="BuyerSuppliedMoney">The amount and currency of the money supplied by the buyer. (required).</param>
        /// <param name="ChangeBackMoney">The amount of change due back to the buyer. Read Only field calculated from the amount_money and buyer_supplied_money fields..</param>
        public CashPaymentDetails(Money BuyerSuppliedMoney = default(Money), Money ChangeBackMoney = default(Money))
        {
            // to ensure "BuyerSuppliedMoney" is required (not null)
            if (BuyerSuppliedMoney == null)
            {
                throw new InvalidDataException("BuyerSuppliedMoney is a required property for CashPaymentDetails and cannot be null");
            }
            else
            {
                this.BuyerSuppliedMoney = BuyerSuppliedMoney;
            }
            this.ChangeBackMoney = ChangeBackMoney;
        }
        
        /// <summary>
        /// The amount and currency of the money supplied by the buyer.
        /// </summary>
        /// <value>The amount and currency of the money supplied by the buyer.</value>
        [DataMember(Name="buyer_supplied_money", EmitDefaultValue=false)]
        public Money BuyerSuppliedMoney { get; set; }
        /// <summary>
        /// The amount of change due back to the buyer. Read Only field calculated from the amount_money and buyer_supplied_money fields.
        /// </summary>
        /// <value>The amount of change due back to the buyer. Read Only field calculated from the amount_money and buyer_supplied_money fields.</value>
        [DataMember(Name="change_back_money", EmitDefaultValue=false)]
        public Money ChangeBackMoney { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashPaymentDetails {\n");
            sb.Append("  BuyerSuppliedMoney: ").Append(BuyerSuppliedMoney).Append("\n");
            sb.Append("  ChangeBackMoney: ").Append(ChangeBackMoney).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CashPaymentDetails);
        }

        /// <summary>
        /// Returns true if CashPaymentDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of CashPaymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashPaymentDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BuyerSuppliedMoney == other.BuyerSuppliedMoney ||
                    this.BuyerSuppliedMoney != null &&
                    this.BuyerSuppliedMoney.Equals(other.BuyerSuppliedMoney)
                ) && 
                (
                    this.ChangeBackMoney == other.ChangeBackMoney ||
                    this.ChangeBackMoney != null &&
                    this.ChangeBackMoney.Equals(other.ChangeBackMoney)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BuyerSuppliedMoney != null)
                    hash = hash * 59 + this.BuyerSuppliedMoney.GetHashCode();
                if (this.ChangeBackMoney != null)
                    hash = hash * 59 + this.ChangeBackMoney.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
