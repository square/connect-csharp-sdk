/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents one of a business&#39;s locations.
    /// </summary>
    [DataContract]
    public partial class Location :  IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="Id">The Square-issued ID of the location..</param>
        /// <param name="Name">The location&#39;s name. Location names are set by the account owner and displayed in the dashboard as the location&#39;s nickname.</param>
        /// <param name="Address">The location&#39;s physical address..</param>
        /// <param name="Timezone">The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location&#39;s timezone..</param>
        /// <param name="Capabilities">The Square features that are enabled for the location. See &#x60;LocationCapability&#x60; for possible values. See [LocationCapability](#type-locationcapability) for possible values.</param>
        /// <param name="Status">The location&#39;s status See [LocationStatus](#type-locationstatus) for possible values.</param>
        /// <param name="CreatedAt">The time when the location was created, in RFC 3339 format..</param>
        /// <param name="MerchantId">The ID of the merchant that owns the location..</param>
        /// <param name="Country">The country of the location, in ISO 3166-1-alpha-2 format.  See &#x60;Country&#x60; for possible values. See [Country](#type-country) for possible values.</param>
        /// <param name="LanguageCode">The language associated with the location in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A)..</param>
        /// <param name="Currency">The currency used for all transactions at this location, in ISO 4217 format.  See &#x60;Currency&#x60; for possible values. See [Currency](#type-currency) for possible values.</param>
        /// <param name="PhoneNumber">The location&#39;s phone_number..</param>
        /// <param name="BusinessName">The location&#39;s business_name which is shown to its customers. For example, this is the name printed on its customer&#39;s receipts..</param>
        /// <param name="Type">The location&#39;s type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space. See [LocationType](#type-locationtype) for possible values.</param>
        /// <param name="WebsiteUrl">The location&#39;s website, as set by the account owner in the Square dashboard.  Default: none; only exists if explicitly set..</param>
        /// <param name="BusinessHours">  The hours of operation for a business location.  Default: none; only exists if explicitly set..</param>
        /// <param name="BusinessEmail">The email of the location..</param>
        /// <param name="Description">The business description of the location..</param>
        /// <param name="TwitterUsername">The Twitter username of the location without the &#39;&amp;#64;&#39; symbol..</param>
        /// <param name="InstagramUsername">The Instagram username of the location without the &#39;&amp;#64;&#39; symbol..</param>
        /// <param name="FacebookUrl">The Facebook profile URL of the location. The URL should begin with &#39;facebook.com/&#39;..</param>
        /// <param name="Coordinates">The physical coordinates (latitude and longitude) of the location..</param>
        /// <param name="LogoUrl">The logo image URL of the location..</param>
        /// <param name="PosBackgroundUrl">The Point of Sale background image URL of the location..</param>
        /// <param name="Mcc">[beta] The merchant category code (MCC) of the location, as standardized by ISO 18245. The MCC describes the kind of goods or services sold at the location..</param>
        public Location(string Id = default(string), string Name = default(string), Address Address = default(Address), string Timezone = default(string), List<string> Capabilities = default(List<string>), string Status = default(string), string CreatedAt = default(string), string MerchantId = default(string), string Country = default(string), string LanguageCode = default(string), string Currency = default(string), string PhoneNumber = default(string), string BusinessName = default(string), string Type = default(string), string WebsiteUrl = default(string), BusinessHours BusinessHours = default(BusinessHours), string BusinessEmail = default(string), string Description = default(string), string TwitterUsername = default(string), string InstagramUsername = default(string), string FacebookUrl = default(string), Coordinates Coordinates = default(Coordinates), string LogoUrl = default(string), string PosBackgroundUrl = default(string), string Mcc = default(string))
        {
            this.Id = Id;
            this.Name = Name;
            this.Address = Address;
            this.Timezone = Timezone;
            this.Capabilities = Capabilities;
            this.Status = Status;
            this.CreatedAt = CreatedAt;
            this.MerchantId = MerchantId;
            this.Country = Country;
            this.LanguageCode = LanguageCode;
            this.Currency = Currency;
            this.PhoneNumber = PhoneNumber;
            this.BusinessName = BusinessName;
            this.Type = Type;
            this.WebsiteUrl = WebsiteUrl;
            this.BusinessHours = BusinessHours;
            this.BusinessEmail = BusinessEmail;
            this.Description = Description;
            this.TwitterUsername = TwitterUsername;
            this.InstagramUsername = InstagramUsername;
            this.FacebookUrl = FacebookUrl;
            this.Coordinates = Coordinates;
            this.LogoUrl = LogoUrl;
            this.PosBackgroundUrl = PosBackgroundUrl;
            this.Mcc = Mcc;
        }
        
        /// <summary>
        /// The Square-issued ID of the location.
        /// </summary>
        /// <value>The Square-issued ID of the location.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The location&#39;s name. Location names are set by the account owner and displayed in the dashboard as the location&#39;s nickname
        /// </summary>
        /// <value>The location&#39;s name. Location names are set by the account owner and displayed in the dashboard as the location&#39;s nickname</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The location&#39;s physical address.
        /// </summary>
        /// <value>The location&#39;s physical address.</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }
        /// <summary>
        /// The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location&#39;s timezone.
        /// </summary>
        /// <value>The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location&#39;s timezone.</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }
        /// <summary>
        /// The Square features that are enabled for the location. See &#x60;LocationCapability&#x60; for possible values. See [LocationCapability](#type-locationcapability) for possible values
        /// </summary>
        /// <value>The Square features that are enabled for the location. See &#x60;LocationCapability&#x60; for possible values. See [LocationCapability](#type-locationcapability) for possible values</value>
        [DataMember(Name="capabilities", EmitDefaultValue=false)]
        public List<string> Capabilities { get; set; }
        /// <summary>
        /// The location&#39;s status See [LocationStatus](#type-locationstatus) for possible values
        /// </summary>
        /// <value>The location&#39;s status See [LocationStatus](#type-locationstatus) for possible values</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// The time when the location was created, in RFC 3339 format.
        /// </summary>
        /// <value>The time when the location was created, in RFC 3339 format.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// The ID of the merchant that owns the location.
        /// </summary>
        /// <value>The ID of the merchant that owns the location.</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }
        /// <summary>
        /// The country of the location, in ISO 3166-1-alpha-2 format.  See &#x60;Country&#x60; for possible values. See [Country](#type-country) for possible values
        /// </summary>
        /// <value>The country of the location, in ISO 3166-1-alpha-2 format.  See &#x60;Country&#x60; for possible values. See [Country](#type-country) for possible values</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// The language associated with the location in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).
        /// </summary>
        /// <value>The language associated with the location in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).</value>
        [DataMember(Name="language_code", EmitDefaultValue=false)]
        public string LanguageCode { get; set; }
        /// <summary>
        /// The currency used for all transactions at this location, in ISO 4217 format.  See &#x60;Currency&#x60; for possible values. See [Currency](#type-currency) for possible values
        /// </summary>
        /// <value>The currency used for all transactions at this location, in ISO 4217 format.  See &#x60;Currency&#x60; for possible values. See [Currency](#type-currency) for possible values</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }
        /// <summary>
        /// The location&#39;s phone_number.
        /// </summary>
        /// <value>The location&#39;s phone_number.</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// The location&#39;s business_name which is shown to its customers. For example, this is the name printed on its customer&#39;s receipts.
        /// </summary>
        /// <value>The location&#39;s business_name which is shown to its customers. For example, this is the name printed on its customer&#39;s receipts.</value>
        [DataMember(Name="business_name", EmitDefaultValue=false)]
        public string BusinessName { get; set; }
        /// <summary>
        /// The location&#39;s type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space. See [LocationType](#type-locationtype) for possible values
        /// </summary>
        /// <value>The location&#39;s type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space. See [LocationType](#type-locationtype) for possible values</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// The location&#39;s website, as set by the account owner in the Square dashboard.  Default: none; only exists if explicitly set.
        /// </summary>
        /// <value>The location&#39;s website, as set by the account owner in the Square dashboard.  Default: none; only exists if explicitly set.</value>
        [DataMember(Name="website_url", EmitDefaultValue=false)]
        public string WebsiteUrl { get; set; }
        /// <summary>
        ///   The hours of operation for a business location.  Default: none; only exists if explicitly set.
        /// </summary>
        /// <value>  The hours of operation for a business location.  Default: none; only exists if explicitly set.</value>
        [DataMember(Name="business_hours", EmitDefaultValue=false)]
        public BusinessHours BusinessHours { get; set; }
        /// <summary>
        /// The email of the location.
        /// </summary>
        /// <value>The email of the location.</value>
        [DataMember(Name="business_email", EmitDefaultValue=false)]
        public string BusinessEmail { get; set; }
        /// <summary>
        /// The business description of the location.
        /// </summary>
        /// <value>The business description of the location.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The Twitter username of the location without the &#39;&amp;#64;&#39; symbol.
        /// </summary>
        /// <value>The Twitter username of the location without the &#39;&amp;#64;&#39; symbol.</value>
        [DataMember(Name="twitter_username", EmitDefaultValue=false)]
        public string TwitterUsername { get; set; }
        /// <summary>
        /// The Instagram username of the location without the &#39;&amp;#64;&#39; symbol.
        /// </summary>
        /// <value>The Instagram username of the location without the &#39;&amp;#64;&#39; symbol.</value>
        [DataMember(Name="instagram_username", EmitDefaultValue=false)]
        public string InstagramUsername { get; set; }
        /// <summary>
        /// The Facebook profile URL of the location. The URL should begin with &#39;facebook.com/&#39;.
        /// </summary>
        /// <value>The Facebook profile URL of the location. The URL should begin with &#39;facebook.com/&#39;.</value>
        [DataMember(Name="facebook_url", EmitDefaultValue=false)]
        public string FacebookUrl { get; set; }
        /// <summary>
        /// The physical coordinates (latitude and longitude) of the location.
        /// </summary>
        /// <value>The physical coordinates (latitude and longitude) of the location.</value>
        [DataMember(Name="coordinates", EmitDefaultValue=false)]
        public Coordinates Coordinates { get; set; }
        /// <summary>
        /// The logo image URL of the location.
        /// </summary>
        /// <value>The logo image URL of the location.</value>
        [DataMember(Name="logo_url", EmitDefaultValue=false)]
        public string LogoUrl { get; set; }
        /// <summary>
        /// The Point of Sale background image URL of the location.
        /// </summary>
        /// <value>The Point of Sale background image URL of the location.</value>
        [DataMember(Name="pos_background_url", EmitDefaultValue=false)]
        public string PosBackgroundUrl { get; set; }
        /// <summary>
        /// The merchant category code (MCC) of the location, as standardized by ISO 18245. The MCC describes the kind of goods or services sold at the location.
        /// </summary>
        /// <value>The merchant category code (MCC) of the location, as standardized by ISO 18245. The MCC describes the kind of goods or services sold at the location.</value>
        [DataMember(Name="mcc", EmitDefaultValue=false)]
        public string Mcc { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("  BusinessHours: ").Append(BusinessHours).Append("\n");
            sb.Append("  BusinessEmail: ").Append(BusinessEmail).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TwitterUsername: ").Append(TwitterUsername).Append("\n");
            sb.Append("  InstagramUsername: ").Append(InstagramUsername).Append("\n");
            sb.Append("  FacebookUrl: ").Append(FacebookUrl).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  PosBackgroundUrl: ").Append(PosBackgroundUrl).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="other">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.Timezone == other.Timezone ||
                    this.Timezone != null &&
                    this.Timezone.Equals(other.Timezone)
                ) && 
                (
                    this.Capabilities == other.Capabilities ||
                    this.Capabilities != null &&
                    this.Capabilities.SequenceEqual(other.Capabilities)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.LanguageCode == other.LanguageCode ||
                    this.LanguageCode != null &&
                    this.LanguageCode.Equals(other.LanguageCode)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.BusinessName == other.BusinessName ||
                    this.BusinessName != null &&
                    this.BusinessName.Equals(other.BusinessName)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.WebsiteUrl == other.WebsiteUrl ||
                    this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(other.WebsiteUrl)
                ) && 
                (
                    this.BusinessHours == other.BusinessHours ||
                    this.BusinessHours != null &&
                    this.BusinessHours.Equals(other.BusinessHours)
                ) && 
                (
                    this.BusinessEmail == other.BusinessEmail ||
                    this.BusinessEmail != null &&
                    this.BusinessEmail.Equals(other.BusinessEmail)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.TwitterUsername == other.TwitterUsername ||
                    this.TwitterUsername != null &&
                    this.TwitterUsername.Equals(other.TwitterUsername)
                ) && 
                (
                    this.InstagramUsername == other.InstagramUsername ||
                    this.InstagramUsername != null &&
                    this.InstagramUsername.Equals(other.InstagramUsername)
                ) && 
                (
                    this.FacebookUrl == other.FacebookUrl ||
                    this.FacebookUrl != null &&
                    this.FacebookUrl.Equals(other.FacebookUrl)
                ) && 
                (
                    this.Coordinates == other.Coordinates ||
                    this.Coordinates != null &&
                    this.Coordinates.Equals(other.Coordinates)
                ) && 
                (
                    this.LogoUrl == other.LogoUrl ||
                    this.LogoUrl != null &&
                    this.LogoUrl.Equals(other.LogoUrl)
                ) && 
                (
                    this.PosBackgroundUrl == other.PosBackgroundUrl ||
                    this.PosBackgroundUrl != null &&
                    this.PosBackgroundUrl.Equals(other.PosBackgroundUrl)
                ) && 
                (
                    this.Mcc == other.Mcc ||
                    this.Mcc != null &&
                    this.Mcc.Equals(other.Mcc)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.Timezone != null)
                    hash = hash * 59 + this.Timezone.GetHashCode();
                if (this.Capabilities != null)
                    hash = hash * 59 + this.Capabilities.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.LanguageCode != null)
                    hash = hash * 59 + this.LanguageCode.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.BusinessName != null)
                    hash = hash * 59 + this.BusinessName.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.WebsiteUrl != null)
                    hash = hash * 59 + this.WebsiteUrl.GetHashCode();
                if (this.BusinessHours != null)
                    hash = hash * 59 + this.BusinessHours.GetHashCode();
                if (this.BusinessEmail != null)
                    hash = hash * 59 + this.BusinessEmail.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.TwitterUsername != null)
                    hash = hash * 59 + this.TwitterUsername.GetHashCode();
                if (this.InstagramUsername != null)
                    hash = hash * 59 + this.InstagramUsername.GetHashCode();
                if (this.FacebookUrl != null)
                    hash = hash * 59 + this.FacebookUrl.GetHashCode();
                if (this.Coordinates != null)
                    hash = hash * 59 + this.Coordinates.GetHashCode();
                if (this.LogoUrl != null)
                    hash = hash * 59 + this.LogoUrl.GetHashCode();
                if (this.PosBackgroundUrl != null)
                    hash = hash * 59 + this.PosBackgroundUrl.GetHashCode();
                if (this.Mcc != null)
                    hash = hash * 59 + this.Mcc.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
