/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a collection of catalog objects for the purpose of applying a [PricingRule](#type-pricingrule). Including a catalog object will include all of its subtypes. For example, including a category in a product set will include all of its items and associated item variations in the product set. Including an item in a product set will also include its item variations.
    /// </summary>
    [DataContract]
    public partial class CatalogProductSet :  IEquatable<CatalogProductSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogProductSet" /> class.
        /// </summary>
        /// <param name="Name"> User-defined name for the product set. For example, \&quot;Clearance Items\&quot; or \&quot;Winter Sale Items\&quot;..</param>
        /// <param name="ProductIdsAny">Unique IDs for any &#x60;CatalogObjects&#x60;s to include in this product set. Any number of these catalog objects can be in an order for a pricing rule to apply.  This can be used with &#x60;product_ids_all&#x60; in a parent &#x60;CatalogProductSet&#x60; to match groups of products for a bulk discount, such as a discount for an entree and side combo.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs..</param>
        /// <param name="ProductIdsAll">Unique IDs for &#x60;CatalogObjects&#x60; to include in this product set. All objects in this set must be included in an order for a pricing rule to apply.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs..</param>
        /// <param name="QuantityExact">If set, there must be exactly this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in the cart for the discount to apply.  Cannot be combined with either &#x60;quantity_min&#x60; or &#x60;quantity_max&#x60;..</param>
        /// <param name="QuantityMin">If set, there must be at least this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in a cart for the discount to apply. See &#x60;quantity_exact&#x60;. Defaults to 0 if &#x60;quantity_exact&#x60;, &#x60;quantity_min&#x60; and &#x60;quantity_max&#x60; are all unspecified..</param>
        /// <param name="QuantityMax">If set, the pricing rule will apply to a maximum of this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60;..</param>
        /// <param name="AllProducts">If set to &#x60;true&#x60;, the product set will include every item in the catalog.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set..</param>
        public CatalogProductSet(string Name = default(string), List<string> ProductIdsAny = default(List<string>), List<string> ProductIdsAll = default(List<string>), long? QuantityExact = default(long?), long? QuantityMin = default(long?), long? QuantityMax = default(long?), bool? AllProducts = default(bool?))
        {
            this.Name = Name;
            this.ProductIdsAny = ProductIdsAny;
            this.ProductIdsAll = ProductIdsAll;
            this.QuantityExact = QuantityExact;
            this.QuantityMin = QuantityMin;
            this.QuantityMax = QuantityMax;
            this.AllProducts = AllProducts;
        }
        
        /// <summary>
        ///  User-defined name for the product set. For example, \&quot;Clearance Items\&quot; or \&quot;Winter Sale Items\&quot;.
        /// </summary>
        /// <value> User-defined name for the product set. For example, \&quot;Clearance Items\&quot; or \&quot;Winter Sale Items\&quot;.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Unique IDs for any &#x60;CatalogObjects&#x60;s to include in this product set. Any number of these catalog objects can be in an order for a pricing rule to apply.  This can be used with &#x60;product_ids_all&#x60; in a parent &#x60;CatalogProductSet&#x60; to match groups of products for a bulk discount, such as a discount for an entree and side combo.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs.
        /// </summary>
        /// <value>Unique IDs for any &#x60;CatalogObjects&#x60;s to include in this product set. Any number of these catalog objects can be in an order for a pricing rule to apply.  This can be used with &#x60;product_ids_all&#x60; in a parent &#x60;CatalogProductSet&#x60; to match groups of products for a bulk discount, such as a discount for an entree and side combo.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs.</value>
        [DataMember(Name="product_ids_any", EmitDefaultValue=false)]
        public List<string> ProductIdsAny { get; set; }
        /// <summary>
        /// Unique IDs for &#x60;CatalogObjects&#x60; to include in this product set. All objects in this set must be included in an order for a pricing rule to apply.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs.
        /// </summary>
        /// <value>Unique IDs for &#x60;CatalogObjects&#x60; to include in this product set. All objects in this set must be included in an order for a pricing rule to apply.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.  Max: 500 catalog object IDs.</value>
        [DataMember(Name="product_ids_all", EmitDefaultValue=false)]
        public List<string> ProductIdsAll { get; set; }
        /// <summary>
        /// If set, there must be exactly this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in the cart for the discount to apply.  Cannot be combined with either &#x60;quantity_min&#x60; or &#x60;quantity_max&#x60;.
        /// </summary>
        /// <value>If set, there must be exactly this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in the cart for the discount to apply.  Cannot be combined with either &#x60;quantity_min&#x60; or &#x60;quantity_max&#x60;.</value>
        [DataMember(Name="quantity_exact", EmitDefaultValue=false)]
        public long? QuantityExact { get; set; }
        /// <summary>
        /// If set, there must be at least this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in a cart for the discount to apply. See &#x60;quantity_exact&#x60;. Defaults to 0 if &#x60;quantity_exact&#x60;, &#x60;quantity_min&#x60; and &#x60;quantity_max&#x60; are all unspecified.
        /// </summary>
        /// <value>If set, there must be at least this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60; in a cart for the discount to apply. See &#x60;quantity_exact&#x60;. Defaults to 0 if &#x60;quantity_exact&#x60;, &#x60;quantity_min&#x60; and &#x60;quantity_max&#x60; are all unspecified.</value>
        [DataMember(Name="quantity_min", EmitDefaultValue=false)]
        public long? QuantityMin { get; set; }
        /// <summary>
        /// If set, the pricing rule will apply to a maximum of this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60;.
        /// </summary>
        /// <value>If set, the pricing rule will apply to a maximum of this many items from &#x60;products_any&#x60; or &#x60;products_all&#x60;.</value>
        [DataMember(Name="quantity_max", EmitDefaultValue=false)]
        public long? QuantityMax { get; set; }
        /// <summary>
        /// If set to &#x60;true&#x60;, the product set will include every item in the catalog.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.
        /// </summary>
        /// <value>If set to &#x60;true&#x60;, the product set will include every item in the catalog.  Only one of &#x60;product_ids_all&#x60;, &#x60;product_ids_any&#x60;, or &#x60;all_products&#x60; can be set.</value>
        [DataMember(Name="all_products", EmitDefaultValue=false)]
        public bool? AllProducts { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogProductSet {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProductIdsAny: ").Append(ProductIdsAny).Append("\n");
            sb.Append("  ProductIdsAll: ").Append(ProductIdsAll).Append("\n");
            sb.Append("  QuantityExact: ").Append(QuantityExact).Append("\n");
            sb.Append("  QuantityMin: ").Append(QuantityMin).Append("\n");
            sb.Append("  QuantityMax: ").Append(QuantityMax).Append("\n");
            sb.Append("  AllProducts: ").Append(AllProducts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogProductSet);
        }

        /// <summary>
        /// Returns true if CatalogProductSet instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogProductSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogProductSet other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ProductIdsAny == other.ProductIdsAny ||
                    this.ProductIdsAny != null &&
                    this.ProductIdsAny.SequenceEqual(other.ProductIdsAny)
                ) && 
                (
                    this.ProductIdsAll == other.ProductIdsAll ||
                    this.ProductIdsAll != null &&
                    this.ProductIdsAll.SequenceEqual(other.ProductIdsAll)
                ) && 
                (
                    this.QuantityExact == other.QuantityExact ||
                    this.QuantityExact != null &&
                    this.QuantityExact.Equals(other.QuantityExact)
                ) && 
                (
                    this.QuantityMin == other.QuantityMin ||
                    this.QuantityMin != null &&
                    this.QuantityMin.Equals(other.QuantityMin)
                ) && 
                (
                    this.QuantityMax == other.QuantityMax ||
                    this.QuantityMax != null &&
                    this.QuantityMax.Equals(other.QuantityMax)
                ) && 
                (
                    this.AllProducts == other.AllProducts ||
                    this.AllProducts != null &&
                    this.AllProducts.Equals(other.AllProducts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ProductIdsAny != null)
                    hash = hash * 59 + this.ProductIdsAny.GetHashCode();
                if (this.ProductIdsAll != null)
                    hash = hash * 59 + this.ProductIdsAll.GetHashCode();
                if (this.QuantityExact != null)
                    hash = hash * 59 + this.QuantityExact.GetHashCode();
                if (this.QuantityMin != null)
                    hash = hash * 59 + this.QuantityMin.GetHashCode();
                if (this.QuantityMax != null)
                    hash = hash * 59 + this.QuantityMax.GetHashCode();
                if (this.AllProducts != null)
                    hash = hash * 59 + this.AllProducts.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
