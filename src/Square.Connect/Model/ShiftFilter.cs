/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Defines a filter used in a search for &#x60;Shift&#x60; records. &#x60;AND&#x60; logic is used by Square&#39;s servers to apply each filter property specified.
    /// </summary>
    [DataContract]
    public partial class ShiftFilter :  IEquatable<ShiftFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShiftFilter" /> class.
        /// </summary>
        /// <param name="LocationIds">Fetch shifts for the specified location..</param>
        /// <param name="EmployeeIds">Fetch shifts for the specified employee..</param>
        /// <param name="Status">Fetch a &#x60;Shift&#x60; instance by &#x60;Shift.status&#x60;. See [ShiftFilterStatus](#type-shiftfilterstatus) for possible values.</param>
        /// <param name="Start">Fetch &#x60;Shift&#x60;s that start in the time range - Inclusive..</param>
        /// <param name="End">Fetch the &#x60;Shift&#x60;s that end in the time range - Inclusive..</param>
        /// <param name="Workday">Fetch the &#x60;Shift&#x60;s based on workday date range..</param>
        public ShiftFilter(List<string> LocationIds = default(List<string>), List<string> EmployeeIds = default(List<string>), string Status = default(string), TimeRange Start = default(TimeRange), TimeRange End = default(TimeRange), ShiftWorkday Workday = default(ShiftWorkday))
        {
            this.LocationIds = LocationIds;
            this.EmployeeIds = EmployeeIds;
            this.Status = Status;
            this.Start = Start;
            this.End = End;
            this.Workday = Workday;
        }
        
        /// <summary>
        /// Fetch shifts for the specified location.
        /// </summary>
        /// <value>Fetch shifts for the specified location.</value>
        [DataMember(Name="location_ids", EmitDefaultValue=false)]
        public List<string> LocationIds { get; set; }
        /// <summary>
        /// Fetch shifts for the specified employee.
        /// </summary>
        /// <value>Fetch shifts for the specified employee.</value>
        [DataMember(Name="employee_ids", EmitDefaultValue=false)]
        public List<string> EmployeeIds { get; set; }
        /// <summary>
        /// Fetch a &#x60;Shift&#x60; instance by &#x60;Shift.status&#x60;. See [ShiftFilterStatus](#type-shiftfilterstatus) for possible values
        /// </summary>
        /// <value>Fetch a &#x60;Shift&#x60; instance by &#x60;Shift.status&#x60;. See [ShiftFilterStatus](#type-shiftfilterstatus) for possible values</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Fetch &#x60;Shift&#x60;s that start in the time range - Inclusive.
        /// </summary>
        /// <value>Fetch &#x60;Shift&#x60;s that start in the time range - Inclusive.</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public TimeRange Start { get; set; }
        /// <summary>
        /// Fetch the &#x60;Shift&#x60;s that end in the time range - Inclusive.
        /// </summary>
        /// <value>Fetch the &#x60;Shift&#x60;s that end in the time range - Inclusive.</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public TimeRange End { get; set; }
        /// <summary>
        /// Fetch the &#x60;Shift&#x60;s based on workday date range.
        /// </summary>
        /// <value>Fetch the &#x60;Shift&#x60;s based on workday date range.</value>
        [DataMember(Name="workday", EmitDefaultValue=false)]
        public ShiftWorkday Workday { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShiftFilter {\n");
            sb.Append("  LocationIds: ").Append(LocationIds).Append("\n");
            sb.Append("  EmployeeIds: ").Append(EmployeeIds).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Workday: ").Append(Workday).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ShiftFilter);
        }

        /// <summary>
        /// Returns true if ShiftFilter instances are equal
        /// </summary>
        /// <param name="other">Instance of ShiftFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShiftFilter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LocationIds == other.LocationIds ||
                    this.LocationIds != null &&
                    this.LocationIds.SequenceEqual(other.LocationIds)
                ) && 
                (
                    this.EmployeeIds == other.EmployeeIds ||
                    this.EmployeeIds != null &&
                    this.EmployeeIds.SequenceEqual(other.EmployeeIds)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.End == other.End ||
                    this.End != null &&
                    this.End.Equals(other.End)
                ) && 
                (
                    this.Workday == other.Workday ||
                    this.Workday != null &&
                    this.Workday.Equals(other.Workday)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LocationIds != null)
                    hash = hash * 59 + this.LocationIds.GetHashCode();
                if (this.EmployeeIds != null)
                    hash = hash * 59 + this.EmployeeIds.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hash = hash * 59 + this.End.GetHashCode();
                if (this.Workday != null)
                    hash = hash * 59 + this.Workday.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
