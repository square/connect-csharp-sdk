/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Contains the name and abbreviation for standard measurement unit.
    /// </summary>
    [DataContract]
    public partial class StandardUnitDescription :  IEquatable<StandardUnitDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardUnitDescription" /> class.
        /// </summary>
        /// <param name="Unit">Identifies the measurement unit being described..</param>
        /// <param name="Name">UI display name of the measurement unit. For example, &#39;Pound&#39;..</param>
        /// <param name="Abbreviation">UI display abbreviation for the measurement unit. For example, &#39;lb&#39;..</param>
        public StandardUnitDescription(MeasurementUnit Unit = default(MeasurementUnit), string Name = default(string), string Abbreviation = default(string))
        {
            this.Unit = Unit;
            this.Name = Name;
            this.Abbreviation = Abbreviation;
        }
        
        /// <summary>
        /// Identifies the measurement unit being described.
        /// </summary>
        /// <value>Identifies the measurement unit being described.</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public MeasurementUnit Unit { get; set; }
        /// <summary>
        /// UI display name of the measurement unit. For example, &#39;Pound&#39;.
        /// </summary>
        /// <value>UI display name of the measurement unit. For example, &#39;Pound&#39;.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// UI display abbreviation for the measurement unit. For example, &#39;lb&#39;.
        /// </summary>
        /// <value>UI display abbreviation for the measurement unit. For example, &#39;lb&#39;.</value>
        [DataMember(Name="abbreviation", EmitDefaultValue=false)]
        public string Abbreviation { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandardUnitDescription {\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Abbreviation: ").Append(Abbreviation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StandardUnitDescription);
        }

        /// <summary>
        /// Returns true if StandardUnitDescription instances are equal
        /// </summary>
        /// <param name="other">Instance of StandardUnitDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardUnitDescription other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Unit == other.Unit ||
                    this.Unit != null &&
                    this.Unit.Equals(other.Unit)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Abbreviation == other.Abbreviation ||
                    this.Abbreviation != null &&
                    this.Abbreviation.Equals(other.Abbreviation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Unit != null)
                    hash = hash * 59 + this.Unit.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Abbreviation != null)
                    hash = hash * 59 + this.Abbreviation.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
