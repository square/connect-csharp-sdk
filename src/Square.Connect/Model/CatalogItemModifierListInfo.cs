/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Controls the properties of a &#x60;CatalogModifierList&#x60; as it applies to this &#x60;CatalogItem&#x60;.
    /// </summary>
    [DataContract]
    public partial class CatalogItemModifierListInfo :  IEquatable<CatalogItemModifierListInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogItemModifierListInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogItemModifierListInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogItemModifierListInfo" /> class.
        /// </summary>
        /// <param name="ModifierListId">The ID of the &#x60;CatalogModifierList&#x60; controlled by this &#x60;CatalogModifierListInfo&#x60;. (required).</param>
        /// <param name="ModifierOverrides">A set of &#x60;CatalogModifierOverride&#x60; objects that override whether a given &#x60;CatalogModifier&#x60; is enabled by default..</param>
        /// <param name="MinSelectedModifiers">If 0 or larger, the smallest number of &#x60;CatalogModifier&#x60;s that must be selected from this &#x60;CatalogModifierList&#x60;..</param>
        /// <param name="MaxSelectedModifiers">If 0 or larger, the largest number of &#x60;CatalogModifier&#x60;s that can be selected from this &#x60;CatalogModifierList&#x60;..</param>
        /// <param name="Enabled">If &#x60;true&#x60;, enable this &#x60;CatalogModifierList&#x60;..</param>
        public CatalogItemModifierListInfo(string ModifierListId = default(string), List<CatalogModifierOverride> ModifierOverrides = default(List<CatalogModifierOverride>), int? MinSelectedModifiers = default(int?), int? MaxSelectedModifiers = default(int?), bool? Enabled = default(bool?))
        {
            // to ensure "ModifierListId" is required (not null)
            if (ModifierListId == null)
            {
                throw new InvalidDataException("ModifierListId is a required property for CatalogItemModifierListInfo and cannot be null");
            }
            else
            {
                this.ModifierListId = ModifierListId;
            }
            this.ModifierOverrides = ModifierOverrides;
            this.MinSelectedModifiers = MinSelectedModifiers;
            this.MaxSelectedModifiers = MaxSelectedModifiers;
            this.Enabled = Enabled;
        }
        
        /// <summary>
        /// The ID of the &#x60;CatalogModifierList&#x60; controlled by this &#x60;CatalogModifierListInfo&#x60;.
        /// </summary>
        /// <value>The ID of the &#x60;CatalogModifierList&#x60; controlled by this &#x60;CatalogModifierListInfo&#x60;.</value>
        [DataMember(Name="modifier_list_id", EmitDefaultValue=false)]
        public string ModifierListId { get; set; }
        /// <summary>
        /// A set of &#x60;CatalogModifierOverride&#x60; objects that override whether a given &#x60;CatalogModifier&#x60; is enabled by default.
        /// </summary>
        /// <value>A set of &#x60;CatalogModifierOverride&#x60; objects that override whether a given &#x60;CatalogModifier&#x60; is enabled by default.</value>
        [DataMember(Name="modifier_overrides", EmitDefaultValue=false)]
        public List<CatalogModifierOverride> ModifierOverrides { get; set; }
        /// <summary>
        /// If 0 or larger, the smallest number of &#x60;CatalogModifier&#x60;s that must be selected from this &#x60;CatalogModifierList&#x60;.
        /// </summary>
        /// <value>If 0 or larger, the smallest number of &#x60;CatalogModifier&#x60;s that must be selected from this &#x60;CatalogModifierList&#x60;.</value>
        [DataMember(Name="min_selected_modifiers", EmitDefaultValue=false)]
        public int? MinSelectedModifiers { get; set; }
        /// <summary>
        /// If 0 or larger, the largest number of &#x60;CatalogModifier&#x60;s that can be selected from this &#x60;CatalogModifierList&#x60;.
        /// </summary>
        /// <value>If 0 or larger, the largest number of &#x60;CatalogModifier&#x60;s that can be selected from this &#x60;CatalogModifierList&#x60;.</value>
        [DataMember(Name="max_selected_modifiers", EmitDefaultValue=false)]
        public int? MaxSelectedModifiers { get; set; }
        /// <summary>
        /// If &#x60;true&#x60;, enable this &#x60;CatalogModifierList&#x60;.
        /// </summary>
        /// <value>If &#x60;true&#x60;, enable this &#x60;CatalogModifierList&#x60;.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogItemModifierListInfo {\n");
            sb.Append("  ModifierListId: ").Append(ModifierListId).Append("\n");
            sb.Append("  ModifierOverrides: ").Append(ModifierOverrides).Append("\n");
            sb.Append("  MinSelectedModifiers: ").Append(MinSelectedModifiers).Append("\n");
            sb.Append("  MaxSelectedModifiers: ").Append(MaxSelectedModifiers).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogItemModifierListInfo);
        }

        /// <summary>
        /// Returns true if CatalogItemModifierListInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogItemModifierListInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogItemModifierListInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ModifierListId == other.ModifierListId ||
                    this.ModifierListId != null &&
                    this.ModifierListId.Equals(other.ModifierListId)
                ) && 
                (
                    this.ModifierOverrides == other.ModifierOverrides ||
                    this.ModifierOverrides != null &&
                    this.ModifierOverrides.SequenceEqual(other.ModifierOverrides)
                ) && 
                (
                    this.MinSelectedModifiers == other.MinSelectedModifiers ||
                    this.MinSelectedModifiers != null &&
                    this.MinSelectedModifiers.Equals(other.MinSelectedModifiers)
                ) && 
                (
                    this.MaxSelectedModifiers == other.MaxSelectedModifiers ||
                    this.MaxSelectedModifiers != null &&
                    this.MaxSelectedModifiers.Equals(other.MaxSelectedModifiers)
                ) && 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ModifierListId != null)
                    hash = hash * 59 + this.ModifierListId.GetHashCode();
                if (this.ModifierOverrides != null)
                    hash = hash * 59 + this.ModifierOverrides.GetHashCode();
                if (this.MinSelectedModifiers != null)
                    hash = hash * 59 + this.MinSelectedModifiers.GetHashCode();
                if (this.MaxSelectedModifiers != null)
                    hash = hash * 59 + this.MaxSelectedModifiers.GetHashCode();
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // ModifierListId (string) minLength
            if(this.ModifierListId != null && this.ModifierListId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ModifierListId, length must be greater than 1.", new [] { "ModifierListId" });
            }

            yield break;
        }
    }

}
