/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents the hours of operation for a business location.
    /// </summary>
    [DataContract]
    public partial class BusinessHours :  IEquatable<BusinessHours>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessHours" /> class.
        /// </summary>
        /// <param name="Periods">The list of time periods during which the business is open. There may be at most 10 periods per day..</param>
        public BusinessHours(List<BusinessHoursPeriod> Periods = default(List<BusinessHoursPeriod>))
        {
            this.Periods = Periods;
        }
        
        /// <summary>
        /// The list of time periods during which the business is open. There may be at most 10 periods per day.
        /// </summary>
        /// <value>The list of time periods during which the business is open. There may be at most 10 periods per day.</value>
        [DataMember(Name="periods", EmitDefaultValue=false)]
        public List<BusinessHoursPeriod> Periods { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessHours {\n");
            sb.Append("  Periods: ").Append(Periods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BusinessHours);
        }

        /// <summary>
        /// Returns true if BusinessHours instances are equal
        /// </summary>
        /// <param name="other">Instance of BusinessHours to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessHours other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Periods == other.Periods ||
                    this.Periods != null &&
                    this.Periods.SequenceEqual(other.Periods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Periods != null)
                    hash = hash * 59 + this.Periods.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
