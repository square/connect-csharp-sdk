/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a period of time during which a business location is open.
    /// </summary>
    [DataContract]
    public partial class BusinessHoursPeriod :  IEquatable<BusinessHoursPeriod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessHoursPeriod" /> class.
        /// </summary>
        /// <param name="DayOfWeek">The day of week for this time period. See [DayOfWeek](#type-dayofweek) for possible values.</param>
        /// <param name="StartLocalTime">The start time of a business hours period, specified in local time using partial-time RFC3339 format..</param>
        /// <param name="EndLocalTime">The end time of a business hours period, specified in local time using partial-time RFC3339 format..</param>
        public BusinessHoursPeriod(string DayOfWeek = default(string), string StartLocalTime = default(string), string EndLocalTime = default(string))
        {
            this.DayOfWeek = DayOfWeek;
            this.StartLocalTime = StartLocalTime;
            this.EndLocalTime = EndLocalTime;
        }
        
        /// <summary>
        /// The day of week for this time period. See [DayOfWeek](#type-dayofweek) for possible values
        /// </summary>
        /// <value>The day of week for this time period. See [DayOfWeek](#type-dayofweek) for possible values</value>
        [DataMember(Name="day_of_week", EmitDefaultValue=false)]
        public string DayOfWeek { get; set; }
        /// <summary>
        /// The start time of a business hours period, specified in local time using partial-time RFC3339 format.
        /// </summary>
        /// <value>The start time of a business hours period, specified in local time using partial-time RFC3339 format.</value>
        [DataMember(Name="start_local_time", EmitDefaultValue=false)]
        public string StartLocalTime { get; set; }
        /// <summary>
        /// The end time of a business hours period, specified in local time using partial-time RFC3339 format.
        /// </summary>
        /// <value>The end time of a business hours period, specified in local time using partial-time RFC3339 format.</value>
        [DataMember(Name="end_local_time", EmitDefaultValue=false)]
        public string EndLocalTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessHoursPeriod {\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  StartLocalTime: ").Append(StartLocalTime).Append("\n");
            sb.Append("  EndLocalTime: ").Append(EndLocalTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BusinessHoursPeriod);
        }

        /// <summary>
        /// Returns true if BusinessHoursPeriod instances are equal
        /// </summary>
        /// <param name="other">Instance of BusinessHoursPeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessHoursPeriod other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DayOfWeek == other.DayOfWeek ||
                    this.DayOfWeek != null &&
                    this.DayOfWeek.Equals(other.DayOfWeek)
                ) && 
                (
                    this.StartLocalTime == other.StartLocalTime ||
                    this.StartLocalTime != null &&
                    this.StartLocalTime.Equals(other.StartLocalTime)
                ) && 
                (
                    this.EndLocalTime == other.EndLocalTime ||
                    this.EndLocalTime != null &&
                    this.EndLocalTime.Equals(other.EndLocalTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DayOfWeek != null)
                    hash = hash * 59 + this.DayOfWeek.GetHashCode();
                if (this.StartLocalTime != null)
                    hash = hash * 59 + this.StartLocalTime.GetHashCode();
                if (this.EndLocalTime != null)
                    hash = hash * 59 + this.EndLocalTime.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
