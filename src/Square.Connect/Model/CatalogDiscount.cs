/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// A discount in the Catalog object model.
    /// </summary>
    [DataContract]
    public partial class CatalogDiscount :  IEquatable<CatalogDiscount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogDiscount" /> class.
        /// </summary>
        /// <param name="Name">The discount name. Searchable. This field has max length of 255 Unicode code points..</param>
        /// <param name="DiscountType">Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for possible values.</param>
        /// <param name="Percentage">The percentage of the discount as a string representation of a decimal number, using a &#x60;.&#x60; as the decimal separator and without a &#x60;%&#x60; sign. A value of &#x60;7.5&#x60; corresponds to &#x60;7.5%&#x60;. Specify a percentage of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_PERCENTAGE&#x60;.  Do not include this field for amount-based or variable discounts..</param>
        /// <param name="AmountMoney">The amount of the discount. Specify an amount of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_AMOUNT&#x60;.  Do not include this field for percentage-based or variable discounts..</param>
        /// <param name="PinRequired">Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app..</param>
        /// <param name="LabelColor">The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code..</param>
        /// <param name="ModifyTaxBasis">Indicates whether this discount should reduce the price used to calculate tax.  Most discounts should use &#x60;MODIFY_TAX_BASIS&#x60;. However, in some circumstances taxes must be calculated based on an item&#39;s price, ignoring a particular discount. For example, in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a customer pays but does not reduce the sale price used to calculate how much sales tax is due. In this case, the discount representing that manufacturer coupon should have &#x60;DO_NOT_MODIFY_TAX_BASIS&#x60; for this field.  If you are unsure whether you need to use this field, consult your tax professional. See [CatalogDiscountModifyTaxBasis](#type-catalogdiscountmodifytaxbasis) for possible values.</param>
        public CatalogDiscount(string Name = default(string), string DiscountType = default(string), string Percentage = default(string), Money AmountMoney = default(Money), bool? PinRequired = default(bool?), string LabelColor = default(string), string ModifyTaxBasis = default(string))
        {
            this.Name = Name;
            this.DiscountType = DiscountType;
            this.Percentage = Percentage;
            this.AmountMoney = AmountMoney;
            this.PinRequired = PinRequired;
            this.LabelColor = LabelColor;
            this.ModifyTaxBasis = ModifyTaxBasis;
        }
        
        /// <summary>
        /// The discount name. Searchable. This field has max length of 255 Unicode code points.
        /// </summary>
        /// <value>The discount name. Searchable. This field has max length of 255 Unicode code points.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for possible values
        /// </summary>
        /// <value>Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for possible values</value>
        [DataMember(Name="discount_type", EmitDefaultValue=false)]
        public string DiscountType { get; set; }
        /// <summary>
        /// The percentage of the discount as a string representation of a decimal number, using a &#x60;.&#x60; as the decimal separator and without a &#x60;%&#x60; sign. A value of &#x60;7.5&#x60; corresponds to &#x60;7.5%&#x60;. Specify a percentage of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_PERCENTAGE&#x60;.  Do not include this field for amount-based or variable discounts.
        /// </summary>
        /// <value>The percentage of the discount as a string representation of a decimal number, using a &#x60;.&#x60; as the decimal separator and without a &#x60;%&#x60; sign. A value of &#x60;7.5&#x60; corresponds to &#x60;7.5%&#x60;. Specify a percentage of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_PERCENTAGE&#x60;.  Do not include this field for amount-based or variable discounts.</value>
        [DataMember(Name="percentage", EmitDefaultValue=false)]
        public string Percentage { get; set; }
        /// <summary>
        /// The amount of the discount. Specify an amount of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_AMOUNT&#x60;.  Do not include this field for percentage-based or variable discounts.
        /// </summary>
        /// <value>The amount of the discount. Specify an amount of &#x60;0&#x60; if &#x60;discount_type&#x60; is &#x60;VARIABLE_AMOUNT&#x60;.  Do not include this field for percentage-based or variable discounts.</value>
        [DataMember(Name="amount_money", EmitDefaultValue=false)]
        public Money AmountMoney { get; set; }
        /// <summary>
        /// Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.
        /// </summary>
        /// <value>Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.</value>
        [DataMember(Name="pin_required", EmitDefaultValue=false)]
        public bool? PinRequired { get; set; }
        /// <summary>
        /// The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.
        /// </summary>
        /// <value>The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.</value>
        [DataMember(Name="label_color", EmitDefaultValue=false)]
        public string LabelColor { get; set; }
        /// <summary>
        /// Indicates whether this discount should reduce the price used to calculate tax.  Most discounts should use &#x60;MODIFY_TAX_BASIS&#x60;. However, in some circumstances taxes must be calculated based on an item&#39;s price, ignoring a particular discount. For example, in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a customer pays but does not reduce the sale price used to calculate how much sales tax is due. In this case, the discount representing that manufacturer coupon should have &#x60;DO_NOT_MODIFY_TAX_BASIS&#x60; for this field.  If you are unsure whether you need to use this field, consult your tax professional. See [CatalogDiscountModifyTaxBasis](#type-catalogdiscountmodifytaxbasis) for possible values
        /// </summary>
        /// <value>Indicates whether this discount should reduce the price used to calculate tax.  Most discounts should use &#x60;MODIFY_TAX_BASIS&#x60;. However, in some circumstances taxes must be calculated based on an item&#39;s price, ignoring a particular discount. For example, in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a customer pays but does not reduce the sale price used to calculate how much sales tax is due. In this case, the discount representing that manufacturer coupon should have &#x60;DO_NOT_MODIFY_TAX_BASIS&#x60; for this field.  If you are unsure whether you need to use this field, consult your tax professional. See [CatalogDiscountModifyTaxBasis](#type-catalogdiscountmodifytaxbasis) for possible values</value>
        [DataMember(Name="modify_tax_basis", EmitDefaultValue=false)]
        public string ModifyTaxBasis { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogDiscount {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  AmountMoney: ").Append(AmountMoney).Append("\n");
            sb.Append("  PinRequired: ").Append(PinRequired).Append("\n");
            sb.Append("  LabelColor: ").Append(LabelColor).Append("\n");
            sb.Append("  ModifyTaxBasis: ").Append(ModifyTaxBasis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogDiscount);
        }

        /// <summary>
        /// Returns true if CatalogDiscount instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogDiscount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogDiscount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.DiscountType == other.DiscountType ||
                    this.DiscountType != null &&
                    this.DiscountType.Equals(other.DiscountType)
                ) && 
                (
                    this.Percentage == other.Percentage ||
                    this.Percentage != null &&
                    this.Percentage.Equals(other.Percentage)
                ) && 
                (
                    this.AmountMoney == other.AmountMoney ||
                    this.AmountMoney != null &&
                    this.AmountMoney.Equals(other.AmountMoney)
                ) && 
                (
                    this.PinRequired == other.PinRequired ||
                    this.PinRequired != null &&
                    this.PinRequired.Equals(other.PinRequired)
                ) && 
                (
                    this.LabelColor == other.LabelColor ||
                    this.LabelColor != null &&
                    this.LabelColor.Equals(other.LabelColor)
                ) && 
                (
                    this.ModifyTaxBasis == other.ModifyTaxBasis ||
                    this.ModifyTaxBasis != null &&
                    this.ModifyTaxBasis.Equals(other.ModifyTaxBasis)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.DiscountType != null)
                    hash = hash * 59 + this.DiscountType.GetHashCode();
                if (this.Percentage != null)
                    hash = hash * 59 + this.Percentage.GetHashCode();
                if (this.AmountMoney != null)
                    hash = hash * 59 + this.AmountMoney.GetHashCode();
                if (this.PinRequired != null)
                    hash = hash * 59 + this.PinRequired.GetHashCode();
                if (this.LabelColor != null)
                    hash = hash * 59 + this.LabelColor.GetHashCode();
                if (this.ModifyTaxBasis != null)
                    hash = hash * 59 + this.ModifyTaxBasis.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
