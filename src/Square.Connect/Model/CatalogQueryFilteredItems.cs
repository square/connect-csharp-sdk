/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogQueryFilteredItems :  IEquatable<CatalogQueryFilteredItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogQueryFilteredItems" /> class.
        /// </summary>
        /// <param name="TextFilter">.</param>
        /// <param name="SearchVendorCode">.</param>
        /// <param name="CategoryIds">.</param>
        /// <param name="StockLevels"> See [CatalogQueryFilteredItemsStockLevel](#type-catalogqueryfiltereditemsstocklevel) for possible values.</param>
        /// <param name="EnabledLocationIds">.</param>
        /// <param name="VendorIds">.</param>
        /// <param name="ProductTypes"> See [CatalogItemProductType](#type-catalogitemproducttype) for possible values.</param>
        /// <param name="CustomAttributeFilters">.</param>
        /// <param name="DoesNotExist"> See [CatalogQueryFilteredItemsNullableAttribute](#type-catalogqueryfiltereditemsnullableattribute) for possible values.</param>
        /// <param name="SortOrder"> See [SortOrder](#type-sortorder) for possible values.</param>
        public CatalogQueryFilteredItems(string TextFilter = default(string), bool? SearchVendorCode = default(bool?), List<string> CategoryIds = default(List<string>), List<string> StockLevels = default(List<string>), List<string> EnabledLocationIds = default(List<string>), List<string> VendorIds = default(List<string>), List<string> ProductTypes = default(List<string>), List<CatalogQueryFilteredItemsCustomAttributeFilter> CustomAttributeFilters = default(List<CatalogQueryFilteredItemsCustomAttributeFilter>), List<string> DoesNotExist = default(List<string>), string SortOrder = default(string))
        {
            this.TextFilter = TextFilter;
            this.SearchVendorCode = SearchVendorCode;
            this.CategoryIds = CategoryIds;
            this.StockLevels = StockLevels;
            this.EnabledLocationIds = EnabledLocationIds;
            this.VendorIds = VendorIds;
            this.ProductTypes = ProductTypes;
            this.CustomAttributeFilters = CustomAttributeFilters;
            this.DoesNotExist = DoesNotExist;
            this.SortOrder = SortOrder;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="text_filter", EmitDefaultValue=false)]
        public string TextFilter { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="search_vendor_code", EmitDefaultValue=false)]
        public bool? SearchVendorCode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="category_ids", EmitDefaultValue=false)]
        public List<string> CategoryIds { get; set; }
        /// <summary>
        ///  See [CatalogQueryFilteredItemsStockLevel](#type-catalogqueryfiltereditemsstocklevel) for possible values
        /// </summary>
        /// <value> See [CatalogQueryFilteredItemsStockLevel](#type-catalogqueryfiltereditemsstocklevel) for possible values</value>
        [DataMember(Name="stock_levels", EmitDefaultValue=false)]
        public List<string> StockLevels { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="enabled_location_ids", EmitDefaultValue=false)]
        public List<string> EnabledLocationIds { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="vendor_ids", EmitDefaultValue=false)]
        public List<string> VendorIds { get; set; }
        /// <summary>
        ///  See [CatalogItemProductType](#type-catalogitemproducttype) for possible values
        /// </summary>
        /// <value> See [CatalogItemProductType](#type-catalogitemproducttype) for possible values</value>
        [DataMember(Name="product_types", EmitDefaultValue=false)]
        public List<string> ProductTypes { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="custom_attribute_filters", EmitDefaultValue=false)]
        public List<CatalogQueryFilteredItemsCustomAttributeFilter> CustomAttributeFilters { get; set; }
        /// <summary>
        ///  See [CatalogQueryFilteredItemsNullableAttribute](#type-catalogqueryfiltereditemsnullableattribute) for possible values
        /// </summary>
        /// <value> See [CatalogQueryFilteredItemsNullableAttribute](#type-catalogqueryfiltereditemsnullableattribute) for possible values</value>
        [DataMember(Name="does_not_exist", EmitDefaultValue=false)]
        public List<string> DoesNotExist { get; set; }
        /// <summary>
        ///  See [SortOrder](#type-sortorder) for possible values
        /// </summary>
        /// <value> See [SortOrder](#type-sortorder) for possible values</value>
        [DataMember(Name="sort_order", EmitDefaultValue=false)]
        public string SortOrder { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogQueryFilteredItems {\n");
            sb.Append("  TextFilter: ").Append(TextFilter).Append("\n");
            sb.Append("  SearchVendorCode: ").Append(SearchVendorCode).Append("\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  StockLevels: ").Append(StockLevels).Append("\n");
            sb.Append("  EnabledLocationIds: ").Append(EnabledLocationIds).Append("\n");
            sb.Append("  VendorIds: ").Append(VendorIds).Append("\n");
            sb.Append("  ProductTypes: ").Append(ProductTypes).Append("\n");
            sb.Append("  CustomAttributeFilters: ").Append(CustomAttributeFilters).Append("\n");
            sb.Append("  DoesNotExist: ").Append(DoesNotExist).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogQueryFilteredItems);
        }

        /// <summary>
        /// Returns true if CatalogQueryFilteredItems instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogQueryFilteredItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogQueryFilteredItems other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TextFilter == other.TextFilter ||
                    this.TextFilter != null &&
                    this.TextFilter.Equals(other.TextFilter)
                ) && 
                (
                    this.SearchVendorCode == other.SearchVendorCode ||
                    this.SearchVendorCode != null &&
                    this.SearchVendorCode.Equals(other.SearchVendorCode)
                ) && 
                (
                    this.CategoryIds == other.CategoryIds ||
                    this.CategoryIds != null &&
                    this.CategoryIds.SequenceEqual(other.CategoryIds)
                ) && 
                (
                    this.StockLevels == other.StockLevels ||
                    this.StockLevels != null &&
                    this.StockLevels.SequenceEqual(other.StockLevels)
                ) && 
                (
                    this.EnabledLocationIds == other.EnabledLocationIds ||
                    this.EnabledLocationIds != null &&
                    this.EnabledLocationIds.SequenceEqual(other.EnabledLocationIds)
                ) && 
                (
                    this.VendorIds == other.VendorIds ||
                    this.VendorIds != null &&
                    this.VendorIds.SequenceEqual(other.VendorIds)
                ) && 
                (
                    this.ProductTypes == other.ProductTypes ||
                    this.ProductTypes != null &&
                    this.ProductTypes.SequenceEqual(other.ProductTypes)
                ) && 
                (
                    this.CustomAttributeFilters == other.CustomAttributeFilters ||
                    this.CustomAttributeFilters != null &&
                    this.CustomAttributeFilters.SequenceEqual(other.CustomAttributeFilters)
                ) && 
                (
                    this.DoesNotExist == other.DoesNotExist ||
                    this.DoesNotExist != null &&
                    this.DoesNotExist.SequenceEqual(other.DoesNotExist)
                ) && 
                (
                    this.SortOrder == other.SortOrder ||
                    this.SortOrder != null &&
                    this.SortOrder.Equals(other.SortOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TextFilter != null)
                    hash = hash * 59 + this.TextFilter.GetHashCode();
                if (this.SearchVendorCode != null)
                    hash = hash * 59 + this.SearchVendorCode.GetHashCode();
                if (this.CategoryIds != null)
                    hash = hash * 59 + this.CategoryIds.GetHashCode();
                if (this.StockLevels != null)
                    hash = hash * 59 + this.StockLevels.GetHashCode();
                if (this.EnabledLocationIds != null)
                    hash = hash * 59 + this.EnabledLocationIds.GetHashCode();
                if (this.VendorIds != null)
                    hash = hash * 59 + this.VendorIds.GetHashCode();
                if (this.ProductTypes != null)
                    hash = hash * 59 + this.ProductTypes.GetHashCode();
                if (this.CustomAttributeFilters != null)
                    hash = hash * 59 + this.CustomAttributeFilters.GetHashCode();
                if (this.DoesNotExist != null)
                    hash = hash * 59 + this.DoesNotExist.GetHashCode();
                if (this.SortOrder != null)
                    hash = hash * 59 + this.SortOrder.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
