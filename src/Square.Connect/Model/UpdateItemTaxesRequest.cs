/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UpdateItemTaxesRequest :  IEquatable<UpdateItemTaxesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateItemTaxesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateItemTaxesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateItemTaxesRequest" /> class.
        /// </summary>
        /// <param name="ItemIds">The &#x60;CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax&#x60;es are being updated. (required).</param>
        /// <param name="TaxesToEnable">The set of &#x60;CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem&#x60;..</param>
        /// <param name="TaxesToDisable">The set of &#x60;CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem&#x60;..</param>
        public UpdateItemTaxesRequest(List<string> ItemIds = default(List<string>), List<string> TaxesToEnable = default(List<string>), List<string> TaxesToDisable = default(List<string>))
        {
            // to ensure "ItemIds" is required (not null)
            if (ItemIds == null)
            {
                throw new InvalidDataException("ItemIds is a required property for UpdateItemTaxesRequest and cannot be null");
            }
            else
            {
                this.ItemIds = ItemIds;
            }
            this.TaxesToEnable = TaxesToEnable;
            this.TaxesToDisable = TaxesToDisable;
        }
        
        /// <summary>
        /// The &#x60;CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax&#x60;es are being updated.
        /// </summary>
        /// <value>The &#x60;CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax&#x60;es are being updated.</value>
        [DataMember(Name="item_ids", EmitDefaultValue=false)]
        public List<string> ItemIds { get; set; }
        /// <summary>
        /// The set of &#x60;CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem&#x60;.
        /// </summary>
        /// <value>The set of &#x60;CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem&#x60;.</value>
        [DataMember(Name="taxes_to_enable", EmitDefaultValue=false)]
        public List<string> TaxesToEnable { get; set; }
        /// <summary>
        /// The set of &#x60;CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem&#x60;.
        /// </summary>
        /// <value>The set of &#x60;CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem&#x60;.</value>
        [DataMember(Name="taxes_to_disable", EmitDefaultValue=false)]
        public List<string> TaxesToDisable { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateItemTaxesRequest {\n");
            sb.Append("  ItemIds: ").Append(ItemIds).Append("\n");
            sb.Append("  TaxesToEnable: ").Append(TaxesToEnable).Append("\n");
            sb.Append("  TaxesToDisable: ").Append(TaxesToDisable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UpdateItemTaxesRequest);
        }

        /// <summary>
        /// Returns true if UpdateItemTaxesRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateItemTaxesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateItemTaxesRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ItemIds == other.ItemIds ||
                    this.ItemIds != null &&
                    this.ItemIds.SequenceEqual(other.ItemIds)
                ) && 
                (
                    this.TaxesToEnable == other.TaxesToEnable ||
                    this.TaxesToEnable != null &&
                    this.TaxesToEnable.SequenceEqual(other.TaxesToEnable)
                ) && 
                (
                    this.TaxesToDisable == other.TaxesToDisable ||
                    this.TaxesToDisable != null &&
                    this.TaxesToDisable.SequenceEqual(other.TaxesToDisable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ItemIds != null)
                    hash = hash * 59 + this.ItemIds.GetHashCode();
                if (this.TaxesToEnable != null)
                    hash = hash * 59 + this.TaxesToEnable.GetHashCode();
                if (this.TaxesToDisable != null)
                    hash = hash * 59 + this.TaxesToDisable.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
