/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// A group of variations for a [CatalogItem](#type-catalogitem)&#39;s.
    /// Note: This endpoint is in beta.
    /// </summary>
    [DataContract]
    public partial class CatalogItemOption :  IEquatable<CatalogItemOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogItemOption" /> class.
        /// </summary>
        /// <param name="Name">The item option&#39;s display name for the seller. Must be unique across all item options. Searchable..</param>
        /// <param name="DisplayName">The item option&#39;s display name for the customer. Searchable..</param>
        /// <param name="Description">The item option&#39;s human-readable description. Displays for in the Square Point of Sale app for the seller and in the Online Store or on receipts for the buyer..</param>
        /// <param name="ShowColors">If true, display colors for entries in &#x60;values&#x60; when present..</param>
        /// <param name="Values">A list of &#x60;CatalogObject&#x60;s containing the &#x60;CatalogItemOptionValue&#x60;s for this item..</param>
        /// <param name="ItemCount">The number of &#x60;CatalogItem&#x60;s currently associated with this item option. Present only if the &#x60;include_counts&#x60; was specified in the request. Any count over 100 will be returned as &#x60;100&#x60;..</param>
        public CatalogItemOption(string Name = default(string), string DisplayName = default(string), string Description = default(string), bool? ShowColors = default(bool?), List<CatalogObject> Values = default(List<CatalogObject>), long? ItemCount = default(long?))
        {
            this.Name = Name;
            this.DisplayName = DisplayName;
            this.Description = Description;
            this.ShowColors = ShowColors;
            this.Values = Values;
            this.ItemCount = ItemCount;
        }
        
        /// <summary>
        /// The item option&#39;s display name for the seller. Must be unique across all item options. Searchable.
        /// </summary>
        /// <value>The item option&#39;s display name for the seller. Must be unique across all item options. Searchable.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The item option&#39;s display name for the customer. Searchable.
        /// </summary>
        /// <value>The item option&#39;s display name for the customer. Searchable.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// The item option&#39;s human-readable description. Displays for in the Square Point of Sale app for the seller and in the Online Store or on receipts for the buyer.
        /// </summary>
        /// <value>The item option&#39;s human-readable description. Displays for in the Square Point of Sale app for the seller and in the Online Store or on receipts for the buyer.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// If true, display colors for entries in &#x60;values&#x60; when present.
        /// </summary>
        /// <value>If true, display colors for entries in &#x60;values&#x60; when present.</value>
        [DataMember(Name="show_colors", EmitDefaultValue=false)]
        public bool? ShowColors { get; set; }
        /// <summary>
        /// A list of &#x60;CatalogObject&#x60;s containing the &#x60;CatalogItemOptionValue&#x60;s for this item.
        /// </summary>
        /// <value>A list of &#x60;CatalogObject&#x60;s containing the &#x60;CatalogItemOptionValue&#x60;s for this item.</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<CatalogObject> Values { get; set; }
        /// <summary>
        /// The number of &#x60;CatalogItem&#x60;s currently associated with this item option. Present only if the &#x60;include_counts&#x60; was specified in the request. Any count over 100 will be returned as &#x60;100&#x60;.
        /// </summary>
        /// <value>The number of &#x60;CatalogItem&#x60;s currently associated with this item option. Present only if the &#x60;include_counts&#x60; was specified in the request. Any count over 100 will be returned as &#x60;100&#x60;.</value>
        [DataMember(Name="item_count", EmitDefaultValue=false)]
        public long? ItemCount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogItemOption {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ShowColors: ").Append(ShowColors).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  ItemCount: ").Append(ItemCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogItemOption);
        }

        /// <summary>
        /// Returns true if CatalogItemOption instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogItemOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogItemOption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ShowColors == other.ShowColors ||
                    this.ShowColors != null &&
                    this.ShowColors.Equals(other.ShowColors)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                ) && 
                (
                    this.ItemCount == other.ItemCount ||
                    this.ItemCount != null &&
                    this.ItemCount.Equals(other.ItemCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ShowColors != null)
                    hash = hash * 59 + this.ShowColors.GetHashCode();
                if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                if (this.ItemCount != null)
                    hash = hash * 59 + this.ItemCount.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
