/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// The response object returned by the [ListMerchant](#endpoint-listmerchant) endpoint.
    /// </summary>
    [DataContract]
    public partial class ListMerchantsResponse :  IEquatable<ListMerchantsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListMerchantsResponse" /> class.
        /// </summary>
        /// <param name="Errors">Information on errors encountered during the request..</param>
        /// <param name="Merchant">The requested &#x60;Merchant&#x60; entities..</param>
        /// <param name="Cursor">If the  response is truncated, the cursor to use in next  request to fetch next set of objects..</param>
        public ListMerchantsResponse(List<Error> Errors = default(List<Error>), List<Merchant> Merchant = default(List<Merchant>), int? Cursor = default(int?))
        {
            this.Errors = Errors;
            this.Merchant = Merchant;
            this.Cursor = Cursor;
        }
        
        /// <summary>
        /// Information on errors encountered during the request.
        /// </summary>
        /// <value>Information on errors encountered during the request.</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<Error> Errors { get; set; }
        /// <summary>
        /// The requested &#x60;Merchant&#x60; entities.
        /// </summary>
        /// <value>The requested &#x60;Merchant&#x60; entities.</value>
        [DataMember(Name="merchant", EmitDefaultValue=false)]
        public List<Merchant> Merchant { get; set; }
        /// <summary>
        /// If the  response is truncated, the cursor to use in next  request to fetch next set of objects.
        /// </summary>
        /// <value>If the  response is truncated, the cursor to use in next  request to fetch next set of objects.</value>
        [DataMember(Name="cursor", EmitDefaultValue=false)]
        public int? Cursor { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListMerchantsResponse {\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ListMerchantsResponse);
        }

        /// <summary>
        /// Returns true if ListMerchantsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ListMerchantsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListMerchantsResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Errors == other.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(other.Errors)
                ) && 
                (
                    this.Merchant == other.Merchant ||
                    this.Merchant != null &&
                    this.Merchant.SequenceEqual(other.Merchant)
                ) && 
                (
                    this.Cursor == other.Cursor ||
                    this.Cursor != null &&
                    this.Cursor.Equals(other.Cursor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Errors != null)
                    hash = hash * 59 + this.Errors.GetHashCode();
                if (this.Merchant != null)
                    hash = hash * 59 + this.Merchant.GetHashCode();
                if (this.Cursor != null)
                    hash = hash * 59 + this.Cursor.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
