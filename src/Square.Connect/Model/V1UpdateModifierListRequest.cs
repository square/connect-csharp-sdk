/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1UpdateModifierListRequest
    /// </summary>
    [DataContract]
    [Obsolete]
    public partial class V1UpdateModifierListRequest :  IEquatable<V1UpdateModifierListRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1UpdateModifierListRequest" /> class.
        /// </summary>
        /// <param name="Name">The modifier list&#39;s name..</param>
        /// <param name="SelectionType">Indicates whether multiple options from the modifier list can be applied to a single item. See [V1UpdateModifierListRequestSelectionType](#type-v1updatemodifierlistrequestselectiontype) for possible values.</param>
        public V1UpdateModifierListRequest(string Name = default(string), string SelectionType = default(string))
        {
            this.Name = Name;
            this.SelectionType = SelectionType;
        }
        
        /// <summary>
        /// The modifier list&#39;s name.
        /// </summary>
        /// <value>The modifier list&#39;s name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Indicates whether multiple options from the modifier list can be applied to a single item. See [V1UpdateModifierListRequestSelectionType](#type-v1updatemodifierlistrequestselectiontype) for possible values
        /// </summary>
        /// <value>Indicates whether multiple options from the modifier list can be applied to a single item. See [V1UpdateModifierListRequestSelectionType](#type-v1updatemodifierlistrequestselectiontype) for possible values</value>
        [DataMember(Name="selection_type", EmitDefaultValue=false)]
        public string SelectionType { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1UpdateModifierListRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SelectionType: ").Append(SelectionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1UpdateModifierListRequest);
        }

        /// <summary>
        /// Returns true if V1UpdateModifierListRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of V1UpdateModifierListRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1UpdateModifierListRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.SelectionType == other.SelectionType ||
                    this.SelectionType != null &&
                    this.SelectionType.Equals(other.SelectionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.SelectionType != null)
                    hash = hash * 59 + this.SelectionType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
