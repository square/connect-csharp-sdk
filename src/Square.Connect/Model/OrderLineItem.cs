/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a line item in an order. Each line item describes a different product to purchase, with its own quantity and price details.
    /// </summary>
    [DataContract]
    public partial class OrderLineItem :  IEquatable<OrderLineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderLineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItem" /> class.
        /// </summary>
        /// <param name="Uid">[beta] Unique ID that identifies the line item only within this order..</param>
        /// <param name="Name">The name of the line item..</param>
        /// <param name="Quantity">The quantity purchased, formatted as a decimal number. For example: &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example: &#x60;\&quot;1.70000\&quot;&#x60;. (required).</param>
        /// <param name="QuantityUnit">The unit and precision that this line item&#39;s quantity is measured in..</param>
        /// <param name="Note">The note of the line item..</param>
        /// <param name="CatalogObjectId">The &#x60;CatalogItemVariation&#x60; id applied to this line item..</param>
        /// <param name="VariationName">The name of the variation applied to this line item..</param>
        /// <param name="Metadata">[beta] Application-defined data attached to this line item. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (personally identifiable information, card details, etc.).  Keys written by applications must be 60 characters or less and must be in the character set &#x60;[a-zA-Z0-9_-]&#x60;. Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a &#39;:&#39; character.  Values have a max length of 255 characters.  An application may have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information..</param>
        /// <param name="Modifiers">The &#x60;CatalogModifier&#x60;s applied to this line item..</param>
        /// <param name="Taxes">[deprecated] A list of taxes applied to this line item. On read or retrieve, this list includes both item-level taxes and any order-level taxes apportioned to this item. When creating an Order, set your item-level taxes in this list.  This field has been deprecated in favour of &#x60;applied_taxes&#x60;. Usage of both this field and &#x60;applied_taxes&#x60; when creating an order will result in an error. Usage of this field when sending requests to the UpdateOrder endpoint will result in an error..</param>
        /// <param name="Discounts">[deprecated] A list of discounts applied to this line item. On read or retrieve, this list includes both item-level discounts and any order-level discounts apportioned to this item. When creating an Order, set your item-level discounts in this list.  This field has been deprecated in favour of &#x60;applied_discounts&#x60;. Usage of both this field and &#x60;applied_discounts&#x60; when creating an order will result in an error. Usage of this field when sending requests to the UpdateOrder endpoint will result in an error..</param>
        /// <param name="AppliedTaxes">[beta] The list of references to taxes applied to this line item. Each &#x60;OrderLineItemAppliedTax&#x60; has a &#x60;tax_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemTax&#x60; applied to the line item. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedTax&#x60; will be automatically created on every line item for all &#x60;ORDER&#x60; scoped taxes added to the order. &#x60;OrderLineItemAppliedTax&#x60; records for &#x60;LINE_ITEM&#x60; scoped taxes must be added in requests for the tax to apply to any line items.  To change the amount of a tax, modify the referenced top-level tax..</param>
        /// <param name="AppliedDiscounts">[beta] The list of references to discounts applied to this line item. Each &#x60;OrderLineItemAppliedDiscount&#x60; has a &#x60;discount_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemDiscounts&#x60; applied to the line item. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedDiscount&#x60; will be automatically created on every line item for all &#x60;ORDER&#x60; scoped discounts that are added to the order. &#x60;OrderLineItemAppliedDiscount&#x60; records for &#x60;LINE_ITEM&#x60; scoped discounts must be added in requests for the discount to apply to any line items.  To change the amount of a discount, modify the referenced top-level discount..</param>
        /// <param name="BasePriceMoney">The base price for a single unit of the line item..</param>
        /// <param name="VariationTotalPriceMoney">The total price of all item variations sold in this line item. Calculated as &#x60;base_price_money&#x60; multiplied by &#x60;quantity&#x60;. Does not include modifiers..</param>
        /// <param name="GrossSalesMoney">The amount of money made in gross sales for this line item. Calculated as the sum of the variation&#39;s total price and each modifier&#39;s total price..</param>
        /// <param name="TotalTaxMoney">The total tax amount of money to collect for the line item..</param>
        /// <param name="TotalDiscountMoney">The total discount amount of money to collect for the line item..</param>
        /// <param name="TotalMoney">The total amount of money to collect for this line item..</param>
        public OrderLineItem(string Uid = default(string), string Name = default(string), string Quantity = default(string), OrderQuantityUnit QuantityUnit = default(OrderQuantityUnit), string Note = default(string), string CatalogObjectId = default(string), string VariationName = default(string), Dictionary<string, string> Metadata = default(Dictionary<string, string>), List<OrderLineItemModifier> Modifiers = default(List<OrderLineItemModifier>), List<OrderLineItemTax> Taxes = default(List<OrderLineItemTax>), List<OrderLineItemDiscount> Discounts = default(List<OrderLineItemDiscount>), List<OrderLineItemAppliedTax> AppliedTaxes = default(List<OrderLineItemAppliedTax>), List<OrderLineItemAppliedDiscount> AppliedDiscounts = default(List<OrderLineItemAppliedDiscount>), Money BasePriceMoney = default(Money), Money VariationTotalPriceMoney = default(Money), Money GrossSalesMoney = default(Money), Money TotalTaxMoney = default(Money), Money TotalDiscountMoney = default(Money), Money TotalMoney = default(Money))
        {
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for OrderLineItem and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            this.Uid = Uid;
            this.Name = Name;
            this.QuantityUnit = QuantityUnit;
            this.Note = Note;
            this.CatalogObjectId = CatalogObjectId;
            this.VariationName = VariationName;
            this.Metadata = Metadata;
            this.Modifiers = Modifiers;
            this.Taxes = Taxes;
            this.Discounts = Discounts;
            this.AppliedTaxes = AppliedTaxes;
            this.AppliedDiscounts = AppliedDiscounts;
            this.BasePriceMoney = BasePriceMoney;
            this.VariationTotalPriceMoney = VariationTotalPriceMoney;
            this.GrossSalesMoney = GrossSalesMoney;
            this.TotalTaxMoney = TotalTaxMoney;
            this.TotalDiscountMoney = TotalDiscountMoney;
            this.TotalMoney = TotalMoney;
        }
        
        /// <summary>
        /// Unique ID that identifies the line item only within this order.
        /// </summary>
        /// <value>Unique ID that identifies the line item only within this order.</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }
        /// <summary>
        /// The name of the line item.
        /// </summary>
        /// <value>The name of the line item.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The quantity purchased, formatted as a decimal number. For example: &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example: &#x60;\&quot;1.70000\&quot;&#x60;.
        /// </summary>
        /// <value>The quantity purchased, formatted as a decimal number. For example: &#x60;\&quot;3\&quot;&#x60;.  Line items with a &#x60;quantity_unit&#x60; can have non-integer quantities. For example: &#x60;\&quot;1.70000\&quot;&#x60;.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public string Quantity { get; set; }
        /// <summary>
        /// The unit and precision that this line item&#39;s quantity is measured in.
        /// </summary>
        /// <value>The unit and precision that this line item&#39;s quantity is measured in.</value>
        [DataMember(Name="quantity_unit", EmitDefaultValue=false)]
        public OrderQuantityUnit QuantityUnit { get; set; }
        /// <summary>
        /// The note of the line item.
        /// </summary>
        /// <value>The note of the line item.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// The &#x60;CatalogItemVariation&#x60; id applied to this line item.
        /// </summary>
        /// <value>The &#x60;CatalogItemVariation&#x60; id applied to this line item.</value>
        [DataMember(Name="catalog_object_id", EmitDefaultValue=false)]
        public string CatalogObjectId { get; set; }
        /// <summary>
        /// The name of the variation applied to this line item.
        /// </summary>
        /// <value>The name of the variation applied to this line item.</value>
        [DataMember(Name="variation_name", EmitDefaultValue=false)]
        public string VariationName { get; set; }
        /// <summary>
        /// Application-defined data attached to this line item. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (personally identifiable information, card details, etc.).  Keys written by applications must be 60 characters or less and must be in the character set &#x60;[a-zA-Z0-9_-]&#x60;. Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a &#39;:&#39; character.  Values have a max length of 255 characters.  An application may have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
        /// </summary>
        /// <value>Application-defined data attached to this line item. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (personally identifiable information, card details, etc.).  Keys written by applications must be 60 characters or less and must be in the character set &#x60;[a-zA-Z0-9_-]&#x60;. Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a &#39;:&#39; character.  Values have a max length of 255 characters.  An application may have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }
        /// <summary>
        /// The &#x60;CatalogModifier&#x60;s applied to this line item.
        /// </summary>
        /// <value>The &#x60;CatalogModifier&#x60;s applied to this line item.</value>
        [DataMember(Name="modifiers", EmitDefaultValue=false)]
        public List<OrderLineItemModifier> Modifiers { get; set; }
        /// <summary>
        /// A list of taxes applied to this line item. On read or retrieve, this list includes both item-level taxes and any order-level taxes apportioned to this item. When creating an Order, set your item-level taxes in this list.  This field has been deprecated in favour of &#x60;applied_taxes&#x60;. Usage of both this field and &#x60;applied_taxes&#x60; when creating an order will result in an error. Usage of this field when sending requests to the UpdateOrder endpoint will result in an error.
        /// </summary>
        /// <value>A list of taxes applied to this line item. On read or retrieve, this list includes both item-level taxes and any order-level taxes apportioned to this item. When creating an Order, set your item-level taxes in this list.  This field has been deprecated in favour of &#x60;applied_taxes&#x60;. Usage of both this field and &#x60;applied_taxes&#x60; when creating an order will result in an error. Usage of this field when sending requests to the UpdateOrder endpoint will result in an error.</value>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public List<OrderLineItemTax> Taxes { get; set; }
        /// <summary>
        /// A list of discounts applied to this line item. On read or retrieve, this list includes both item-level discounts and any order-level discounts apportioned to this item. When creating an Order, set your item-level discounts in this list.  This field has been deprecated in favour of &#x60;applied_discounts&#x60;. Usage of both this field and &#x60;applied_discounts&#x60; when creating an order will result in an error. Usage of this field when sending requests to the UpdateOrder endpoint will result in an error.
        /// </summary>
        /// <value>A list of discounts applied to this line item. On read or retrieve, this list includes both item-level discounts and any order-level discounts apportioned to this item. When creating an Order, set your item-level discounts in this list.  This field has been deprecated in favour of &#x60;applied_discounts&#x60;. Usage of both this field and &#x60;applied_discounts&#x60; when creating an order will result in an error. Usage of this field when sending requests to the UpdateOrder endpoint will result in an error.</value>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public List<OrderLineItemDiscount> Discounts { get; set; }
        /// <summary>
        /// The list of references to taxes applied to this line item. Each &#x60;OrderLineItemAppliedTax&#x60; has a &#x60;tax_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemTax&#x60; applied to the line item. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedTax&#x60; will be automatically created on every line item for all &#x60;ORDER&#x60; scoped taxes added to the order. &#x60;OrderLineItemAppliedTax&#x60; records for &#x60;LINE_ITEM&#x60; scoped taxes must be added in requests for the tax to apply to any line items.  To change the amount of a tax, modify the referenced top-level tax.
        /// </summary>
        /// <value>The list of references to taxes applied to this line item. Each &#x60;OrderLineItemAppliedTax&#x60; has a &#x60;tax_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemTax&#x60; applied to the line item. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedTax&#x60; will be automatically created on every line item for all &#x60;ORDER&#x60; scoped taxes added to the order. &#x60;OrderLineItemAppliedTax&#x60; records for &#x60;LINE_ITEM&#x60; scoped taxes must be added in requests for the tax to apply to any line items.  To change the amount of a tax, modify the referenced top-level tax.</value>
        [DataMember(Name="applied_taxes", EmitDefaultValue=false)]
        public List<OrderLineItemAppliedTax> AppliedTaxes { get; set; }
        /// <summary>
        /// The list of references to discounts applied to this line item. Each &#x60;OrderLineItemAppliedDiscount&#x60; has a &#x60;discount_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemDiscounts&#x60; applied to the line item. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedDiscount&#x60; will be automatically created on every line item for all &#x60;ORDER&#x60; scoped discounts that are added to the order. &#x60;OrderLineItemAppliedDiscount&#x60; records for &#x60;LINE_ITEM&#x60; scoped discounts must be added in requests for the discount to apply to any line items.  To change the amount of a discount, modify the referenced top-level discount.
        /// </summary>
        /// <value>The list of references to discounts applied to this line item. Each &#x60;OrderLineItemAppliedDiscount&#x60; has a &#x60;discount_uid&#x60; that references the &#x60;uid&#x60; of a top-level &#x60;OrderLineItemDiscounts&#x60; applied to the line item. On reads, the amount applied is populated.  An &#x60;OrderLineItemAppliedDiscount&#x60; will be automatically created on every line item for all &#x60;ORDER&#x60; scoped discounts that are added to the order. &#x60;OrderLineItemAppliedDiscount&#x60; records for &#x60;LINE_ITEM&#x60; scoped discounts must be added in requests for the discount to apply to any line items.  To change the amount of a discount, modify the referenced top-level discount.</value>
        [DataMember(Name="applied_discounts", EmitDefaultValue=false)]
        public List<OrderLineItemAppliedDiscount> AppliedDiscounts { get; set; }
        /// <summary>
        /// The base price for a single unit of the line item.
        /// </summary>
        /// <value>The base price for a single unit of the line item.</value>
        [DataMember(Name="base_price_money", EmitDefaultValue=false)]
        public Money BasePriceMoney { get; set; }
        /// <summary>
        /// The total price of all item variations sold in this line item. Calculated as &#x60;base_price_money&#x60; multiplied by &#x60;quantity&#x60;. Does not include modifiers.
        /// </summary>
        /// <value>The total price of all item variations sold in this line item. Calculated as &#x60;base_price_money&#x60; multiplied by &#x60;quantity&#x60;. Does not include modifiers.</value>
        [DataMember(Name="variation_total_price_money", EmitDefaultValue=false)]
        public Money VariationTotalPriceMoney { get; set; }
        /// <summary>
        /// The amount of money made in gross sales for this line item. Calculated as the sum of the variation&#39;s total price and each modifier&#39;s total price.
        /// </summary>
        /// <value>The amount of money made in gross sales for this line item. Calculated as the sum of the variation&#39;s total price and each modifier&#39;s total price.</value>
        [DataMember(Name="gross_sales_money", EmitDefaultValue=false)]
        public Money GrossSalesMoney { get; set; }
        /// <summary>
        /// The total tax amount of money to collect for the line item.
        /// </summary>
        /// <value>The total tax amount of money to collect for the line item.</value>
        [DataMember(Name="total_tax_money", EmitDefaultValue=false)]
        public Money TotalTaxMoney { get; set; }
        /// <summary>
        /// The total discount amount of money to collect for the line item.
        /// </summary>
        /// <value>The total discount amount of money to collect for the line item.</value>
        [DataMember(Name="total_discount_money", EmitDefaultValue=false)]
        public Money TotalDiscountMoney { get; set; }
        /// <summary>
        /// The total amount of money to collect for this line item.
        /// </summary>
        /// <value>The total amount of money to collect for this line item.</value>
        [DataMember(Name="total_money", EmitDefaultValue=false)]
        public Money TotalMoney { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLineItem {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityUnit: ").Append(QuantityUnit).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  CatalogObjectId: ").Append(CatalogObjectId).Append("\n");
            sb.Append("  VariationName: ").Append(VariationName).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  AppliedTaxes: ").Append(AppliedTaxes).Append("\n");
            sb.Append("  AppliedDiscounts: ").Append(AppliedDiscounts).Append("\n");
            sb.Append("  BasePriceMoney: ").Append(BasePriceMoney).Append("\n");
            sb.Append("  VariationTotalPriceMoney: ").Append(VariationTotalPriceMoney).Append("\n");
            sb.Append("  GrossSalesMoney: ").Append(GrossSalesMoney).Append("\n");
            sb.Append("  TotalTaxMoney: ").Append(TotalTaxMoney).Append("\n");
            sb.Append("  TotalDiscountMoney: ").Append(TotalDiscountMoney).Append("\n");
            sb.Append("  TotalMoney: ").Append(TotalMoney).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderLineItem);
        }

        /// <summary>
        /// Returns true if OrderLineItem instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uid == other.Uid ||
                    this.Uid != null &&
                    this.Uid.Equals(other.Uid)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.QuantityUnit == other.QuantityUnit ||
                    this.QuantityUnit != null &&
                    this.QuantityUnit.Equals(other.QuantityUnit)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.CatalogObjectId == other.CatalogObjectId ||
                    this.CatalogObjectId != null &&
                    this.CatalogObjectId.Equals(other.CatalogObjectId)
                ) && 
                (
                    this.VariationName == other.VariationName ||
                    this.VariationName != null &&
                    this.VariationName.Equals(other.VariationName)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(other.Metadata)
                ) && 
                (
                    this.Modifiers == other.Modifiers ||
                    this.Modifiers != null &&
                    this.Modifiers.SequenceEqual(other.Modifiers)
                ) && 
                (
                    this.Taxes == other.Taxes ||
                    this.Taxes != null &&
                    this.Taxes.SequenceEqual(other.Taxes)
                ) && 
                (
                    this.Discounts == other.Discounts ||
                    this.Discounts != null &&
                    this.Discounts.SequenceEqual(other.Discounts)
                ) && 
                (
                    this.AppliedTaxes == other.AppliedTaxes ||
                    this.AppliedTaxes != null &&
                    this.AppliedTaxes.SequenceEqual(other.AppliedTaxes)
                ) && 
                (
                    this.AppliedDiscounts == other.AppliedDiscounts ||
                    this.AppliedDiscounts != null &&
                    this.AppliedDiscounts.SequenceEqual(other.AppliedDiscounts)
                ) && 
                (
                    this.BasePriceMoney == other.BasePriceMoney ||
                    this.BasePriceMoney != null &&
                    this.BasePriceMoney.Equals(other.BasePriceMoney)
                ) && 
                (
                    this.VariationTotalPriceMoney == other.VariationTotalPriceMoney ||
                    this.VariationTotalPriceMoney != null &&
                    this.VariationTotalPriceMoney.Equals(other.VariationTotalPriceMoney)
                ) && 
                (
                    this.GrossSalesMoney == other.GrossSalesMoney ||
                    this.GrossSalesMoney != null &&
                    this.GrossSalesMoney.Equals(other.GrossSalesMoney)
                ) && 
                (
                    this.TotalTaxMoney == other.TotalTaxMoney ||
                    this.TotalTaxMoney != null &&
                    this.TotalTaxMoney.Equals(other.TotalTaxMoney)
                ) && 
                (
                    this.TotalDiscountMoney == other.TotalDiscountMoney ||
                    this.TotalDiscountMoney != null &&
                    this.TotalDiscountMoney.Equals(other.TotalDiscountMoney)
                ) && 
                (
                    this.TotalMoney == other.TotalMoney ||
                    this.TotalMoney != null &&
                    this.TotalMoney.Equals(other.TotalMoney)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uid != null)
                    hash = hash * 59 + this.Uid.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.QuantityUnit != null)
                    hash = hash * 59 + this.QuantityUnit.GetHashCode();
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.CatalogObjectId != null)
                    hash = hash * 59 + this.CatalogObjectId.GetHashCode();
                if (this.VariationName != null)
                    hash = hash * 59 + this.VariationName.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.Modifiers != null)
                    hash = hash * 59 + this.Modifiers.GetHashCode();
                if (this.Taxes != null)
                    hash = hash * 59 + this.Taxes.GetHashCode();
                if (this.Discounts != null)
                    hash = hash * 59 + this.Discounts.GetHashCode();
                if (this.AppliedTaxes != null)
                    hash = hash * 59 + this.AppliedTaxes.GetHashCode();
                if (this.AppliedDiscounts != null)
                    hash = hash * 59 + this.AppliedDiscounts.GetHashCode();
                if (this.BasePriceMoney != null)
                    hash = hash * 59 + this.BasePriceMoney.GetHashCode();
                if (this.VariationTotalPriceMoney != null)
                    hash = hash * 59 + this.VariationTotalPriceMoney.GetHashCode();
                if (this.GrossSalesMoney != null)
                    hash = hash * 59 + this.GrossSalesMoney.GetHashCode();
                if (this.TotalTaxMoney != null)
                    hash = hash * 59 + this.TotalTaxMoney.GetHashCode();
                if (this.TotalDiscountMoney != null)
                    hash = hash * 59 + this.TotalDiscountMoney.GetHashCode();
                if (this.TotalMoney != null)
                    hash = hash * 59 + this.TotalMoney.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Uid (string) maxLength
            if(this.Uid != null && this.Uid.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Uid, length must be less than 60.", new [] { "Uid" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 500.", new [] { "Name" });
            }

            // Quantity (string) maxLength
            if(this.Quantity != null && this.Quantity.Length > 12)
            {
                yield return new ValidationResult("Invalid value for Quantity, length must be less than 12.", new [] { "Quantity" });
            }

            // Quantity (string) minLength
            if(this.Quantity != null && this.Quantity.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Quantity, length must be greater than 1.", new [] { "Quantity" });
            }

            // Note (string) maxLength
            if(this.Note != null && this.Note.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Note, length must be less than 500.", new [] { "Note" });
            }

            // CatalogObjectId (string) maxLength
            if(this.CatalogObjectId != null && this.CatalogObjectId.Length > 192)
            {
                yield return new ValidationResult("Invalid value for CatalogObjectId, length must be less than 192.", new [] { "CatalogObjectId" });
            }

            // VariationName (string) maxLength
            if(this.VariationName != null && this.VariationName.Length > 255)
            {
                yield return new ValidationResult("Invalid value for VariationName, length must be less than 255.", new [] { "VariationName" });
            }

            yield break;
        }
    }

}
