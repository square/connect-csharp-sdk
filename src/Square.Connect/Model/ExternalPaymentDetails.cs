/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Additional details about EXTERNAL type payments.
    /// </summary>
    [DataContract]
    public partial class ExternalPaymentDetails :  IEquatable<ExternalPaymentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalPaymentDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalPaymentDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalPaymentDetails" /> class.
        /// </summary>
        /// <param name="Type">The type of External payment which can be one of: CHECK - Paid by a physical check BANK_TRANSFER - Paid by ACH or other bank transfer OTHER_GIFT_CARD - Paid by a non-square gift card CRYPTO - Paid via a crypto currency SQUARE_CASH - Paid via Square Cash app SOCIAL - Venmo, WeChatPay, AliPay, etc. EXTERNAL - A 3rd party application gathered this payment outside of Square EMONEY - A Japanese e-money brand Square doesn’t support CREDIT/DEBIT - A credit/debit card Square doesn’t support OTHER - A type not listed here (required).</param>
        /// <param name="Source">A description of the source of the external payment, e.g. “Uber Eats”, “Stripe”, “Shopify”.  Limit 255 characters (required).</param>
        /// <param name="SourceId">An ID to associate this payment to its originating source  Limit 255 characters..</param>
        /// <param name="SourceFeeMoney">The total of fees paid to the source. (amount_money - source_fee_money) &#x3D; net money to the merchant.</param>
        public ExternalPaymentDetails(string Type = default(string), string Source = default(string), string SourceId = default(string), Money SourceFeeMoney = default(Money))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for ExternalPaymentDetails and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Source" is required (not null)
            if (Source == null)
            {
                throw new InvalidDataException("Source is a required property for ExternalPaymentDetails and cannot be null");
            }
            else
            {
                this.Source = Source;
            }
            this.SourceId = SourceId;
            this.SourceFeeMoney = SourceFeeMoney;
        }
        
        /// <summary>
        /// The type of External payment which can be one of: CHECK - Paid by a physical check BANK_TRANSFER - Paid by ACH or other bank transfer OTHER_GIFT_CARD - Paid by a non-square gift card CRYPTO - Paid via a crypto currency SQUARE_CASH - Paid via Square Cash app SOCIAL - Venmo, WeChatPay, AliPay, etc. EXTERNAL - A 3rd party application gathered this payment outside of Square EMONEY - A Japanese e-money brand Square doesn’t support CREDIT/DEBIT - A credit/debit card Square doesn’t support OTHER - A type not listed here
        /// </summary>
        /// <value>The type of External payment which can be one of: CHECK - Paid by a physical check BANK_TRANSFER - Paid by ACH or other bank transfer OTHER_GIFT_CARD - Paid by a non-square gift card CRYPTO - Paid via a crypto currency SQUARE_CASH - Paid via Square Cash app SOCIAL - Venmo, WeChatPay, AliPay, etc. EXTERNAL - A 3rd party application gathered this payment outside of Square EMONEY - A Japanese e-money brand Square doesn’t support CREDIT/DEBIT - A credit/debit card Square doesn’t support OTHER - A type not listed here</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// A description of the source of the external payment, e.g. “Uber Eats”, “Stripe”, “Shopify”.  Limit 255 characters
        /// </summary>
        /// <value>A description of the source of the external payment, e.g. “Uber Eats”, “Stripe”, “Shopify”.  Limit 255 characters</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }
        /// <summary>
        /// An ID to associate this payment to its originating source  Limit 255 characters.
        /// </summary>
        /// <value>An ID to associate this payment to its originating source  Limit 255 characters.</value>
        [DataMember(Name="source_id", EmitDefaultValue=false)]
        public string SourceId { get; set; }
        /// <summary>
        /// The total of fees paid to the source. (amount_money - source_fee_money) &#x3D; net money to the merchant
        /// </summary>
        /// <value>The total of fees paid to the source. (amount_money - source_fee_money) &#x3D; net money to the merchant</value>
        [DataMember(Name="source_fee_money", EmitDefaultValue=false)]
        public Money SourceFeeMoney { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalPaymentDetails {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceFeeMoney: ").Append(SourceFeeMoney).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExternalPaymentDetails);
        }

        /// <summary>
        /// Returns true if ExternalPaymentDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ExternalPaymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalPaymentDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.SourceId == other.SourceId ||
                    this.SourceId != null &&
                    this.SourceId.Equals(other.SourceId)
                ) && 
                (
                    this.SourceFeeMoney == other.SourceFeeMoney ||
                    this.SourceFeeMoney != null &&
                    this.SourceFeeMoney.Equals(other.SourceFeeMoney)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.SourceId != null)
                    hash = hash * 59 + this.SourceId.GetHashCode();
                if (this.SourceFeeMoney != null)
                    hash = hash * 59 + this.SourceFeeMoney.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
