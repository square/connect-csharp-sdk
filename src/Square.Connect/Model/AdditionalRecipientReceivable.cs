/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a monetary distribution of part of a [Transaction](#type-transaction)&#39;s amount for Transactions which included additional recipients. The location of this receivable is that same as the one specified in the [AdditionalRecipient](#type-additionalrecipient).
    /// </summary>
    [DataContract]
    [Obsolete]
    public partial class AdditionalRecipientReceivable :  IEquatable<AdditionalRecipientReceivable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalRecipientReceivable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdditionalRecipientReceivable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalRecipientReceivable" /> class.
        /// </summary>
        /// <param name="Id">The additional recipient receivable&#39;s unique ID, issued by Square payments servers. (required).</param>
        /// <param name="TransactionId">The ID of the transaction that the additional recipient receivable was applied to. (required).</param>
        /// <param name="TransactionLocationId">The ID of the location that created the receivable. This is the location ID on the associated transaction. (required).</param>
        /// <param name="AmountMoney">The amount of the receivable. This will always be non-negative. (required).</param>
        /// <param name="CreatedAt">The time when the additional recipient receivable was created, in RFC 3339 format..</param>
        /// <param name="Refunds">Any refunds of the receivable that have been applied..</param>
        public AdditionalRecipientReceivable(string Id = default(string), string TransactionId = default(string), string TransactionLocationId = default(string), Money AmountMoney = default(Money), string CreatedAt = default(string), List<AdditionalRecipientReceivableRefund> Refunds = default(List<AdditionalRecipientReceivableRefund>))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for AdditionalRecipientReceivable and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "TransactionId" is required (not null)
            if (TransactionId == null)
            {
                throw new InvalidDataException("TransactionId is a required property for AdditionalRecipientReceivable and cannot be null");
            }
            else
            {
                this.TransactionId = TransactionId;
            }
            // to ensure "TransactionLocationId" is required (not null)
            if (TransactionLocationId == null)
            {
                throw new InvalidDataException("TransactionLocationId is a required property for AdditionalRecipientReceivable and cannot be null");
            }
            else
            {
                this.TransactionLocationId = TransactionLocationId;
            }
            // to ensure "AmountMoney" is required (not null)
            if (AmountMoney == null)
            {
                throw new InvalidDataException("AmountMoney is a required property for AdditionalRecipientReceivable and cannot be null");
            }
            else
            {
                this.AmountMoney = AmountMoney;
            }
            this.CreatedAt = CreatedAt;
            this.Refunds = Refunds;
        }
        
        /// <summary>
        /// The additional recipient receivable&#39;s unique ID, issued by Square payments servers.
        /// </summary>
        /// <value>The additional recipient receivable&#39;s unique ID, issued by Square payments servers.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The ID of the transaction that the additional recipient receivable was applied to.
        /// </summary>
        /// <value>The ID of the transaction that the additional recipient receivable was applied to.</value>
        [DataMember(Name="transaction_id", EmitDefaultValue=false)]
        public string TransactionId { get; set; }
        /// <summary>
        /// The ID of the location that created the receivable. This is the location ID on the associated transaction.
        /// </summary>
        /// <value>The ID of the location that created the receivable. This is the location ID on the associated transaction.</value>
        [DataMember(Name="transaction_location_id", EmitDefaultValue=false)]
        public string TransactionLocationId { get; set; }
        /// <summary>
        /// The amount of the receivable. This will always be non-negative.
        /// </summary>
        /// <value>The amount of the receivable. This will always be non-negative.</value>
        [DataMember(Name="amount_money", EmitDefaultValue=false)]
        public Money AmountMoney { get; set; }
        /// <summary>
        /// The time when the additional recipient receivable was created, in RFC 3339 format.
        /// </summary>
        /// <value>The time when the additional recipient receivable was created, in RFC 3339 format.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Any refunds of the receivable that have been applied.
        /// </summary>
        /// <value>Any refunds of the receivable that have been applied.</value>
        [DataMember(Name="refunds", EmitDefaultValue=false)]
        public List<AdditionalRecipientReceivableRefund> Refunds { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalRecipientReceivable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TransactionLocationId: ").Append(TransactionLocationId).Append("\n");
            sb.Append("  AmountMoney: ").Append(AmountMoney).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdditionalRecipientReceivable);
        }

        /// <summary>
        /// Returns true if AdditionalRecipientReceivable instances are equal
        /// </summary>
        /// <param name="other">Instance of AdditionalRecipientReceivable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalRecipientReceivable other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    this.TransactionLocationId == other.TransactionLocationId ||
                    this.TransactionLocationId != null &&
                    this.TransactionLocationId.Equals(other.TransactionLocationId)
                ) && 
                (
                    this.AmountMoney == other.AmountMoney ||
                    this.AmountMoney != null &&
                    this.AmountMoney.Equals(other.AmountMoney)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Refunds == other.Refunds ||
                    this.Refunds != null &&
                    this.Refunds.SequenceEqual(other.Refunds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                if (this.TransactionLocationId != null)
                    hash = hash * 59 + this.TransactionLocationId.GetHashCode();
                if (this.AmountMoney != null)
                    hash = hash * 59 + this.AmountMoney.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Refunds != null)
                    hash = hash * 59 + this.Refunds.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Id (string) minLength
            if(this.Id != null && this.Id.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // TransactionId (string) minLength
            if(this.TransactionId != null && this.TransactionId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for TransactionId, length must be greater than 1.", new [] { "TransactionId" });
            }

            // TransactionLocationId (string) minLength
            if(this.TransactionLocationId != null && this.TransactionLocationId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for TransactionLocationId, length must be greater than 1.", new [] { "TransactionLocationId" });
            }

            yield break;
        }
    }

}
