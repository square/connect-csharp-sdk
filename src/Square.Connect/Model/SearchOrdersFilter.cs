/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Filtering criteria to use for a SearchOrders request. Multiple filters will be ANDed together.
    /// </summary>
    [DataContract]
    public partial class SearchOrdersFilter :  IEquatable<SearchOrdersFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchOrdersFilter" /> class.
        /// </summary>
        /// <param name="StateFilter">Filter by &#x60;&#x60;OrderState&#x60;&#x60;..</param>
        /// <param name="DateTimeFilter">Filter for results within a time range.  __Important:__ If you filter for orders by time range, you must set SearchOrdersSort to sort by the same field. [Learn more about filtering orders by time range](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range).</param>
        /// <param name="FulfillmentFilter">Filter by fulfillment type or state..</param>
        /// <param name="SourceFilter">Filter by source of order..</param>
        /// <param name="CustomerFilter">Filter by customers associated with the order..</param>
        public SearchOrdersFilter(SearchOrdersStateFilter StateFilter = default(SearchOrdersStateFilter), SearchOrdersDateTimeFilter DateTimeFilter = default(SearchOrdersDateTimeFilter), SearchOrdersFulfillmentFilter FulfillmentFilter = default(SearchOrdersFulfillmentFilter), SearchOrdersSourceFilter SourceFilter = default(SearchOrdersSourceFilter), SearchOrdersCustomerFilter CustomerFilter = default(SearchOrdersCustomerFilter))
        {
            this.StateFilter = StateFilter;
            this.DateTimeFilter = DateTimeFilter;
            this.FulfillmentFilter = FulfillmentFilter;
            this.SourceFilter = SourceFilter;
            this.CustomerFilter = CustomerFilter;
        }
        
        /// <summary>
        /// Filter by &#x60;&#x60;OrderState&#x60;&#x60;.
        /// </summary>
        /// <value>Filter by &#x60;&#x60;OrderState&#x60;&#x60;.</value>
        [DataMember(Name="state_filter", EmitDefaultValue=false)]
        public SearchOrdersStateFilter StateFilter { get; set; }
        /// <summary>
        /// Filter for results within a time range.  __Important:__ If you filter for orders by time range, you must set SearchOrdersSort to sort by the same field. [Learn more about filtering orders by time range](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
        /// </summary>
        /// <value>Filter for results within a time range.  __Important:__ If you filter for orders by time range, you must set SearchOrdersSort to sort by the same field. [Learn more about filtering orders by time range](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)</value>
        [DataMember(Name="date_time_filter", EmitDefaultValue=false)]
        public SearchOrdersDateTimeFilter DateTimeFilter { get; set; }
        /// <summary>
        /// Filter by fulfillment type or state.
        /// </summary>
        /// <value>Filter by fulfillment type or state.</value>
        [DataMember(Name="fulfillment_filter", EmitDefaultValue=false)]
        public SearchOrdersFulfillmentFilter FulfillmentFilter { get; set; }
        /// <summary>
        /// Filter by source of order.
        /// </summary>
        /// <value>Filter by source of order.</value>
        [DataMember(Name="source_filter", EmitDefaultValue=false)]
        public SearchOrdersSourceFilter SourceFilter { get; set; }
        /// <summary>
        /// Filter by customers associated with the order.
        /// </summary>
        /// <value>Filter by customers associated with the order.</value>
        [DataMember(Name="customer_filter", EmitDefaultValue=false)]
        public SearchOrdersCustomerFilter CustomerFilter { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchOrdersFilter {\n");
            sb.Append("  StateFilter: ").Append(StateFilter).Append("\n");
            sb.Append("  DateTimeFilter: ").Append(DateTimeFilter).Append("\n");
            sb.Append("  FulfillmentFilter: ").Append(FulfillmentFilter).Append("\n");
            sb.Append("  SourceFilter: ").Append(SourceFilter).Append("\n");
            sb.Append("  CustomerFilter: ").Append(CustomerFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SearchOrdersFilter);
        }

        /// <summary>
        /// Returns true if SearchOrdersFilter instances are equal
        /// </summary>
        /// <param name="other">Instance of SearchOrdersFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchOrdersFilter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StateFilter == other.StateFilter ||
                    this.StateFilter != null &&
                    this.StateFilter.Equals(other.StateFilter)
                ) && 
                (
                    this.DateTimeFilter == other.DateTimeFilter ||
                    this.DateTimeFilter != null &&
                    this.DateTimeFilter.Equals(other.DateTimeFilter)
                ) && 
                (
                    this.FulfillmentFilter == other.FulfillmentFilter ||
                    this.FulfillmentFilter != null &&
                    this.FulfillmentFilter.Equals(other.FulfillmentFilter)
                ) && 
                (
                    this.SourceFilter == other.SourceFilter ||
                    this.SourceFilter != null &&
                    this.SourceFilter.Equals(other.SourceFilter)
                ) && 
                (
                    this.CustomerFilter == other.CustomerFilter ||
                    this.CustomerFilter != null &&
                    this.CustomerFilter.Equals(other.CustomerFilter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StateFilter != null)
                    hash = hash * 59 + this.StateFilter.GetHashCode();
                if (this.DateTimeFilter != null)
                    hash = hash * 59 + this.DateTimeFilter.GetHashCode();
                if (this.FulfillmentFilter != null)
                    hash = hash * 59 + this.FulfillmentFilter.GetHashCode();
                if (this.SourceFilter != null)
                    hash = hash * 59 + this.SourceFilter.GetHashCode();
                if (this.CustomerFilter != null)
                    hash = hash * 59 + this.CustomerFilter.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
