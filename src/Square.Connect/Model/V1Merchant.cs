/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Defines the fields that are included in the response body of a request to the **RetrieveBusiness** endpoint.
    /// </summary>
    [DataContract]
    [Obsolete]
    public partial class V1Merchant :  IEquatable<V1Merchant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Merchant" /> class.
        /// </summary>
        /// <param name="Id">The merchant account&#39;s unique identifier..</param>
        /// <param name="Name">The name associated with the merchant account..</param>
        /// <param name="Email">The email address associated with the merchant account..</param>
        /// <param name="AccountType">Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION. See [V1MerchantAccountType](#type-v1merchantaccounttype) for possible values.</param>
        /// <param name="AccountCapabilities">Capabilities that are enabled for the merchant&#39;s Square account. Capabilities that are not listed in this array are not enabled for the account..</param>
        /// <param name="CountryCode">The country associated with the merchant account, in ISO 3166-1-alpha-2 format..</param>
        /// <param name="LanguageCode">The language associated with the merchant account, in BCP 47 format..</param>
        /// <param name="CurrencyCode">The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD..</param>
        /// <param name="BusinessName">The name of the merchant&#39;s business..</param>
        /// <param name="BusinessAddress">The address of the merchant&#39;s business..</param>
        /// <param name="BusinessPhone">The phone number of the merchant&#39;s business..</param>
        /// <param name="BusinessType">The type of business operated by the merchant. See [V1MerchantBusinessType](#type-v1merchantbusinesstype) for possible values.</param>
        /// <param name="ShippingAddress">The merchant&#39;s shipping address..</param>
        /// <param name="LocationDetails">Additional information for a single-location account specified by its associated business account, if it has one..</param>
        /// <param name="MarketUrl">The URL of the merchant&#39;s online store..</param>
        public V1Merchant(string Id = default(string), string Name = default(string), string Email = default(string), string AccountType = default(string), List<string> AccountCapabilities = default(List<string>), string CountryCode = default(string), string LanguageCode = default(string), string CurrencyCode = default(string), string BusinessName = default(string), Address BusinessAddress = default(Address), V1PhoneNumber BusinessPhone = default(V1PhoneNumber), string BusinessType = default(string), Address ShippingAddress = default(Address), V1MerchantLocationDetails LocationDetails = default(V1MerchantLocationDetails), string MarketUrl = default(string))
        {
            this.Id = Id;
            this.Name = Name;
            this.Email = Email;
            this.AccountType = AccountType;
            this.AccountCapabilities = AccountCapabilities;
            this.CountryCode = CountryCode;
            this.LanguageCode = LanguageCode;
            this.CurrencyCode = CurrencyCode;
            this.BusinessName = BusinessName;
            this.BusinessAddress = BusinessAddress;
            this.BusinessPhone = BusinessPhone;
            this.BusinessType = BusinessType;
            this.ShippingAddress = ShippingAddress;
            this.LocationDetails = LocationDetails;
            this.MarketUrl = MarketUrl;
        }
        
        /// <summary>
        /// The merchant account&#39;s unique identifier.
        /// </summary>
        /// <value>The merchant account&#39;s unique identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The name associated with the merchant account.
        /// </summary>
        /// <value>The name associated with the merchant account.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The email address associated with the merchant account.
        /// </summary>
        /// <value>The email address associated with the merchant account.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION. See [V1MerchantAccountType](#type-v1merchantaccounttype) for possible values
        /// </summary>
        /// <value>Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION. See [V1MerchantAccountType](#type-v1merchantaccounttype) for possible values</value>
        [DataMember(Name="account_type", EmitDefaultValue=false)]
        public string AccountType { get; set; }
        /// <summary>
        /// Capabilities that are enabled for the merchant&#39;s Square account. Capabilities that are not listed in this array are not enabled for the account.
        /// </summary>
        /// <value>Capabilities that are enabled for the merchant&#39;s Square account. Capabilities that are not listed in this array are not enabled for the account.</value>
        [DataMember(Name="account_capabilities", EmitDefaultValue=false)]
        public List<string> AccountCapabilities { get; set; }
        /// <summary>
        /// The country associated with the merchant account, in ISO 3166-1-alpha-2 format.
        /// </summary>
        /// <value>The country associated with the merchant account, in ISO 3166-1-alpha-2 format.</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// The language associated with the merchant account, in BCP 47 format.
        /// </summary>
        /// <value>The language associated with the merchant account, in BCP 47 format.</value>
        [DataMember(Name="language_code", EmitDefaultValue=false)]
        public string LanguageCode { get; set; }
        /// <summary>
        /// The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.
        /// </summary>
        /// <value>The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// The name of the merchant&#39;s business.
        /// </summary>
        /// <value>The name of the merchant&#39;s business.</value>
        [DataMember(Name="business_name", EmitDefaultValue=false)]
        public string BusinessName { get; set; }
        /// <summary>
        /// The address of the merchant&#39;s business.
        /// </summary>
        /// <value>The address of the merchant&#39;s business.</value>
        [DataMember(Name="business_address", EmitDefaultValue=false)]
        public Address BusinessAddress { get; set; }
        /// <summary>
        /// The phone number of the merchant&#39;s business.
        /// </summary>
        /// <value>The phone number of the merchant&#39;s business.</value>
        [DataMember(Name="business_phone", EmitDefaultValue=false)]
        public V1PhoneNumber BusinessPhone { get; set; }
        /// <summary>
        /// The type of business operated by the merchant. See [V1MerchantBusinessType](#type-v1merchantbusinesstype) for possible values
        /// </summary>
        /// <value>The type of business operated by the merchant. See [V1MerchantBusinessType](#type-v1merchantbusinesstype) for possible values</value>
        [DataMember(Name="business_type", EmitDefaultValue=false)]
        public string BusinessType { get; set; }
        /// <summary>
        /// The merchant&#39;s shipping address.
        /// </summary>
        /// <value>The merchant&#39;s shipping address.</value>
        [DataMember(Name="shipping_address", EmitDefaultValue=false)]
        public Address ShippingAddress { get; set; }
        /// <summary>
        /// Additional information for a single-location account specified by its associated business account, if it has one.
        /// </summary>
        /// <value>Additional information for a single-location account specified by its associated business account, if it has one.</value>
        [DataMember(Name="location_details", EmitDefaultValue=false)]
        public V1MerchantLocationDetails LocationDetails { get; set; }
        /// <summary>
        /// The URL of the merchant&#39;s online store.
        /// </summary>
        /// <value>The URL of the merchant&#39;s online store.</value>
        [DataMember(Name="market_url", EmitDefaultValue=false)]
        public string MarketUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1Merchant {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountCapabilities: ").Append(AccountCapabilities).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  BusinessAddress: ").Append(BusinessAddress).Append("\n");
            sb.Append("  BusinessPhone: ").Append(BusinessPhone).Append("\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  LocationDetails: ").Append(LocationDetails).Append("\n");
            sb.Append("  MarketUrl: ").Append(MarketUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1Merchant);
        }

        /// <summary>
        /// Returns true if V1Merchant instances are equal
        /// </summary>
        /// <param name="other">Instance of V1Merchant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1Merchant other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.AccountType == other.AccountType ||
                    this.AccountType != null &&
                    this.AccountType.Equals(other.AccountType)
                ) && 
                (
                    this.AccountCapabilities == other.AccountCapabilities ||
                    this.AccountCapabilities != null &&
                    this.AccountCapabilities.SequenceEqual(other.AccountCapabilities)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.LanguageCode == other.LanguageCode ||
                    this.LanguageCode != null &&
                    this.LanguageCode.Equals(other.LanguageCode)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.BusinessName == other.BusinessName ||
                    this.BusinessName != null &&
                    this.BusinessName.Equals(other.BusinessName)
                ) && 
                (
                    this.BusinessAddress == other.BusinessAddress ||
                    this.BusinessAddress != null &&
                    this.BusinessAddress.Equals(other.BusinessAddress)
                ) && 
                (
                    this.BusinessPhone == other.BusinessPhone ||
                    this.BusinessPhone != null &&
                    this.BusinessPhone.Equals(other.BusinessPhone)
                ) && 
                (
                    this.BusinessType == other.BusinessType ||
                    this.BusinessType != null &&
                    this.BusinessType.Equals(other.BusinessType)
                ) && 
                (
                    this.ShippingAddress == other.ShippingAddress ||
                    this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(other.ShippingAddress)
                ) && 
                (
                    this.LocationDetails == other.LocationDetails ||
                    this.LocationDetails != null &&
                    this.LocationDetails.Equals(other.LocationDetails)
                ) && 
                (
                    this.MarketUrl == other.MarketUrl ||
                    this.MarketUrl != null &&
                    this.MarketUrl.Equals(other.MarketUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.AccountType != null)
                    hash = hash * 59 + this.AccountType.GetHashCode();
                if (this.AccountCapabilities != null)
                    hash = hash * 59 + this.AccountCapabilities.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.LanguageCode != null)
                    hash = hash * 59 + this.LanguageCode.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.BusinessName != null)
                    hash = hash * 59 + this.BusinessName.GetHashCode();
                if (this.BusinessAddress != null)
                    hash = hash * 59 + this.BusinessAddress.GetHashCode();
                if (this.BusinessPhone != null)
                    hash = hash * 59 + this.BusinessPhone.GetHashCode();
                if (this.BusinessType != null)
                    hash = hash * 59 + this.BusinessType.GetHashCode();
                if (this.ShippingAddress != null)
                    hash = hash * 59 + this.ShippingAddress.GetHashCode();
                if (this.LocationDetails != null)
                    hash = hash * 59 + this.LocationDetails.GetHashCode();
                if (this.MarketUrl != null)
                    hash = hash * 59 + this.MarketUrl.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
