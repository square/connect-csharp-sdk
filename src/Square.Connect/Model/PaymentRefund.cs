/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a refund of a payment made using Square. Contains information on the original payment and the amount of money refunded.
    /// </summary>
    [DataContract]
    public partial class PaymentRefund :  IEquatable<PaymentRefund>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRefund" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentRefund() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRefund" /> class.
        /// </summary>
        /// <param name="Id">Unique ID for this refund, generated by Square. (required).</param>
        /// <param name="Status">The refund&#39;s status: - &#x60;PENDING&#x60; - awaiting approval - &#x60;COMPLETED&#x60; - successfully completed - &#x60;REJECTED&#x60; - the refund was rejected - &#x60;FAILED&#x60; - an error occurred.</param>
        /// <param name="LocationId">Location ID associated with the payment this refund is attached to..</param>
        /// <param name="AmountMoney">The amount of money refunded, specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. (required).</param>
        /// <param name="AppFeeMoney">Amount of money the app developer contributed to help cover the refunded amount. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts) for details..</param>
        /// <param name="ProcessingFee">Processing fees and fee adjustments assessed by Square on this refund..</param>
        /// <param name="PaymentId">The ID of the payment assocated with this refund..</param>
        /// <param name="OrderId">The ID of the order associated with the refund..</param>
        /// <param name="Reason">The reason for the refund..</param>
        /// <param name="CreatedAt">Timestamp of when the refund was created, in RFC 3339 format..</param>
        /// <param name="UpdatedAt">Timestamp of when the refund was last updated, in RFC 3339 format..</param>
        public PaymentRefund(string Id = default(string), string Status = default(string), string LocationId = default(string), Money AmountMoney = default(Money), Money AppFeeMoney = default(Money), List<ProcessingFee> ProcessingFee = default(List<ProcessingFee>), string PaymentId = default(string), string OrderId = default(string), string Reason = default(string), string CreatedAt = default(string), string UpdatedAt = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for PaymentRefund and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "AmountMoney" is required (not null)
            if (AmountMoney == null)
            {
                throw new InvalidDataException("AmountMoney is a required property for PaymentRefund and cannot be null");
            }
            else
            {
                this.AmountMoney = AmountMoney;
            }
            this.Status = Status;
            this.LocationId = LocationId;
            this.AppFeeMoney = AppFeeMoney;
            this.ProcessingFee = ProcessingFee;
            this.PaymentId = PaymentId;
            this.OrderId = OrderId;
            this.Reason = Reason;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Unique ID for this refund, generated by Square.
        /// </summary>
        /// <value>Unique ID for this refund, generated by Square.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The refund&#39;s status: - &#x60;PENDING&#x60; - awaiting approval - &#x60;COMPLETED&#x60; - successfully completed - &#x60;REJECTED&#x60; - the refund was rejected - &#x60;FAILED&#x60; - an error occurred
        /// </summary>
        /// <value>The refund&#39;s status: - &#x60;PENDING&#x60; - awaiting approval - &#x60;COMPLETED&#x60; - successfully completed - &#x60;REJECTED&#x60; - the refund was rejected - &#x60;FAILED&#x60; - an error occurred</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Location ID associated with the payment this refund is attached to.
        /// </summary>
        /// <value>Location ID associated with the payment this refund is attached to.</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public string LocationId { get; set; }
        /// <summary>
        /// The amount of money refunded, specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.
        /// </summary>
        /// <value>The amount of money refunded, specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.</value>
        [DataMember(Name="amount_money", EmitDefaultValue=false)]
        public Money AmountMoney { get; set; }
        /// <summary>
        /// Amount of money the app developer contributed to help cover the refunded amount. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts) for details.
        /// </summary>
        /// <value>Amount of money the app developer contributed to help cover the refunded amount. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts) for details.</value>
        [DataMember(Name="app_fee_money", EmitDefaultValue=false)]
        public Money AppFeeMoney { get; set; }
        /// <summary>
        /// Processing fees and fee adjustments assessed by Square on this refund.
        /// </summary>
        /// <value>Processing fees and fee adjustments assessed by Square on this refund.</value>
        [DataMember(Name="processing_fee", EmitDefaultValue=false)]
        public List<ProcessingFee> ProcessingFee { get; set; }
        /// <summary>
        /// The ID of the payment assocated with this refund.
        /// </summary>
        /// <value>The ID of the payment assocated with this refund.</value>
        [DataMember(Name="payment_id", EmitDefaultValue=false)]
        public string PaymentId { get; set; }
        /// <summary>
        /// The ID of the order associated with the refund.
        /// </summary>
        /// <value>The ID of the order associated with the refund.</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }
        /// <summary>
        /// The reason for the refund.
        /// </summary>
        /// <value>The reason for the refund.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }
        /// <summary>
        /// Timestamp of when the refund was created, in RFC 3339 format.
        /// </summary>
        /// <value>Timestamp of when the refund was created, in RFC 3339 format.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Timestamp of when the refund was last updated, in RFC 3339 format.
        /// </summary>
        /// <value>Timestamp of when the refund was last updated, in RFC 3339 format.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRefund {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  AmountMoney: ").Append(AmountMoney).Append("\n");
            sb.Append("  AppFeeMoney: ").Append(AppFeeMoney).Append("\n");
            sb.Append("  ProcessingFee: ").Append(ProcessingFee).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentRefund);
        }

        /// <summary>
        /// Returns true if PaymentRefund instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentRefund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRefund other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.LocationId == other.LocationId ||
                    this.LocationId != null &&
                    this.LocationId.Equals(other.LocationId)
                ) && 
                (
                    this.AmountMoney == other.AmountMoney ||
                    this.AmountMoney != null &&
                    this.AmountMoney.Equals(other.AmountMoney)
                ) && 
                (
                    this.AppFeeMoney == other.AppFeeMoney ||
                    this.AppFeeMoney != null &&
                    this.AppFeeMoney.Equals(other.AppFeeMoney)
                ) && 
                (
                    this.ProcessingFee == other.ProcessingFee ||
                    this.ProcessingFee != null &&
                    this.ProcessingFee.SequenceEqual(other.ProcessingFee)
                ) && 
                (
                    this.PaymentId == other.PaymentId ||
                    this.PaymentId != null &&
                    this.PaymentId.Equals(other.PaymentId)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.LocationId != null)
                    hash = hash * 59 + this.LocationId.GetHashCode();
                if (this.AmountMoney != null)
                    hash = hash * 59 + this.AmountMoney.GetHashCode();
                if (this.AppFeeMoney != null)
                    hash = hash * 59 + this.AppFeeMoney.GetHashCode();
                if (this.ProcessingFee != null)
                    hash = hash * 59 + this.ProcessingFee.GetHashCode();
                if (this.PaymentId != null)
                    hash = hash * 59 + this.PaymentId.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Id (string) maxLength
            if(this.Id != null && this.Id.Length > 192)
            {
                yield return new ValidationResult("Invalid value for Id, length must be less than 192.", new [] { "Id" });
            }

            // Id (string) minLength
            if(this.Id != null && this.Id.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            yield break;
        }
    }

}
