/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UpdateItemModifierListsRequest :  IEquatable<UpdateItemModifierListsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateItemModifierListsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateItemModifierListsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateItemModifierListsRequest" /> class.
        /// </summary>
        /// <param name="ItemIds">The IDs of the catalog items associated with the CatalogModifierList objects being updated. (required).</param>
        /// <param name="ModifierListsToEnable">The IDs of the CatalogModifierList objects to enable for the CatalogItem..</param>
        /// <param name="ModifierListsToDisable">The IDs of the CatalogModifierList objects to disable for the CatalogItem..</param>
        public UpdateItemModifierListsRequest(List<string> ItemIds = default(List<string>), List<string> ModifierListsToEnable = default(List<string>), List<string> ModifierListsToDisable = default(List<string>))
        {
            // to ensure "ItemIds" is required (not null)
            if (ItemIds == null)
            {
                throw new InvalidDataException("ItemIds is a required property for UpdateItemModifierListsRequest and cannot be null");
            }
            else
            {
                this.ItemIds = ItemIds;
            }
            this.ModifierListsToEnable = ModifierListsToEnable;
            this.ModifierListsToDisable = ModifierListsToDisable;
        }
        
        /// <summary>
        /// The IDs of the catalog items associated with the CatalogModifierList objects being updated.
        /// </summary>
        /// <value>The IDs of the catalog items associated with the CatalogModifierList objects being updated.</value>
        [DataMember(Name="item_ids", EmitDefaultValue=false)]
        public List<string> ItemIds { get; set; }
        /// <summary>
        /// The IDs of the CatalogModifierList objects to enable for the CatalogItem.
        /// </summary>
        /// <value>The IDs of the CatalogModifierList objects to enable for the CatalogItem.</value>
        [DataMember(Name="modifier_lists_to_enable", EmitDefaultValue=false)]
        public List<string> ModifierListsToEnable { get; set; }
        /// <summary>
        /// The IDs of the CatalogModifierList objects to disable for the CatalogItem.
        /// </summary>
        /// <value>The IDs of the CatalogModifierList objects to disable for the CatalogItem.</value>
        [DataMember(Name="modifier_lists_to_disable", EmitDefaultValue=false)]
        public List<string> ModifierListsToDisable { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateItemModifierListsRequest {\n");
            sb.Append("  ItemIds: ").Append(ItemIds).Append("\n");
            sb.Append("  ModifierListsToEnable: ").Append(ModifierListsToEnable).Append("\n");
            sb.Append("  ModifierListsToDisable: ").Append(ModifierListsToDisable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UpdateItemModifierListsRequest);
        }

        /// <summary>
        /// Returns true if UpdateItemModifierListsRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateItemModifierListsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateItemModifierListsRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ItemIds == other.ItemIds ||
                    this.ItemIds != null &&
                    this.ItemIds.SequenceEqual(other.ItemIds)
                ) && 
                (
                    this.ModifierListsToEnable == other.ModifierListsToEnable ||
                    this.ModifierListsToEnable != null &&
                    this.ModifierListsToEnable.SequenceEqual(other.ModifierListsToEnable)
                ) && 
                (
                    this.ModifierListsToDisable == other.ModifierListsToDisable ||
                    this.ModifierListsToDisable != null &&
                    this.ModifierListsToDisable.SequenceEqual(other.ModifierListsToDisable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ItemIds != null)
                    hash = hash * 59 + this.ItemIds.GetHashCode();
                if (this.ModifierListsToEnable != null)
                    hash = hash * 59 + this.ModifierListsToEnable.GetHashCode();
                if (this.ModifierListsToDisable != null)
                    hash = hash * 59 + this.ModifierListsToDisable.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
