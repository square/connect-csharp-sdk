/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// An item (i.e., product family) in the Catalog object model.
    /// </summary>
    [DataContract]
    public partial class CatalogItem :  IEquatable<CatalogItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogItem" /> class.
        /// </summary>
        /// <param name="Name">The item&#39;s name. Searchable. This field must not be empty. This field has max length of 512 Unicode code points..</param>
        /// <param name="Description">The item&#39;s description. Searchable. This field has max length of 4096 Unicode code points..</param>
        /// <param name="Abbreviation">The text of the item&#39;s display label in the Square Point of Sale app. Only up to the first five characters of the string are used. Searchable. This field has max length of 24 Unicode code points..</param>
        /// <param name="LabelColor">The color of the item&#39;s display label in the Square Point of Sale app. This must be a valid hex color code..</param>
        /// <param name="AvailableOnline">If &#x60;true&#x60;, the item can be added to shipping orders from the merchant&#39;s online store..</param>
        /// <param name="AvailableForPickup">If &#x60;true&#x60;, the item can be added to pickup orders from the merchant&#39;s online store..</param>
        /// <param name="AvailableElectronically">If &#x60;true&#x60;, the item can be added to electronically fulfilled orders from the merchant&#39;s online store..</param>
        /// <param name="CategoryId">The ID of the item&#39;s category, if any..</param>
        /// <param name="TaxIds">A set of IDs indicating the &#x60;CatalogTax&#x60;es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. &#x60;CatalogTax&#x60;es may also be added to or deleted from an item using &#x60;UpdateItemTaxes&#x60;..</param>
        /// <param name="ModifierListInfo">A set of &#x60;CatalogItemModifierListInfo&#x60; objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. &#x60;CatalogModifierList&#x60;s may also be added to or deleted from an item using &#x60;UpdateItemModifierLists&#x60;..</param>
        /// <param name="Variations">A list of &#x60;CatalogObject&#x60;s containing the &#x60;CatalogItemVariation&#x60;s for this item.  Maximum: 250 item variations.</param>
        /// <param name="ProductType">The product type of the item. May not be changed once an item has been created.  Only items of product type &#x60;REGULAR&#x60; or &#x60;APPOINTMENTS_SERVICE&#x60; may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values.</param>
        /// <param name="SkipModifierScreen">If &#x60;false&#x60;, the Square Point of Sale app will present the &#x60;CatalogItem&#x60;&#39;s details screen immediately, allowing the merchant to choose &#x60;CatalogModifier&#x60;s before adding the item to the cart.  This is the default behavior.  If &#x60;true&#x60;, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item&#39;s details.  Third-party clients are encouraged to implement similar behaviors..</param>
        /// <param name="ItemOptions">List of item options IDs for this item. Used to manage and group item variations in a specified order.  Maximum: 6 item options..</param>
        public CatalogItem(string Name = default(string), string Description = default(string), string Abbreviation = default(string), string LabelColor = default(string), bool? AvailableOnline = default(bool?), bool? AvailableForPickup = default(bool?), bool? AvailableElectronically = default(bool?), string CategoryId = default(string), List<string> TaxIds = default(List<string>), List<CatalogItemModifierListInfo> ModifierListInfo = default(List<CatalogItemModifierListInfo>), List<CatalogObject> Variations = default(List<CatalogObject>), string ProductType = default(string), bool? SkipModifierScreen = default(bool?), List<CatalogItemOptionForItem> ItemOptions = default(List<CatalogItemOptionForItem>))
        {
            this.Name = Name;
            this.Description = Description;
            this.Abbreviation = Abbreviation;
            this.LabelColor = LabelColor;
            this.AvailableOnline = AvailableOnline;
            this.AvailableForPickup = AvailableForPickup;
            this.AvailableElectronically = AvailableElectronically;
            this.CategoryId = CategoryId;
            this.TaxIds = TaxIds;
            this.ModifierListInfo = ModifierListInfo;
            this.Variations = Variations;
            this.ProductType = ProductType;
            this.SkipModifierScreen = SkipModifierScreen;
            this.ItemOptions = ItemOptions;
        }
        
        /// <summary>
        /// The item&#39;s name. Searchable. This field must not be empty. This field has max length of 512 Unicode code points.
        /// </summary>
        /// <value>The item&#39;s name. Searchable. This field must not be empty. This field has max length of 512 Unicode code points.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The item&#39;s description. Searchable. This field has max length of 4096 Unicode code points.
        /// </summary>
        /// <value>The item&#39;s description. Searchable. This field has max length of 4096 Unicode code points.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The text of the item&#39;s display label in the Square Point of Sale app. Only up to the first five characters of the string are used. Searchable. This field has max length of 24 Unicode code points.
        /// </summary>
        /// <value>The text of the item&#39;s display label in the Square Point of Sale app. Only up to the first five characters of the string are used. Searchable. This field has max length of 24 Unicode code points.</value>
        [DataMember(Name="abbreviation", EmitDefaultValue=false)]
        public string Abbreviation { get; set; }
        /// <summary>
        /// The color of the item&#39;s display label in the Square Point of Sale app. This must be a valid hex color code.
        /// </summary>
        /// <value>The color of the item&#39;s display label in the Square Point of Sale app. This must be a valid hex color code.</value>
        [DataMember(Name="label_color", EmitDefaultValue=false)]
        public string LabelColor { get; set; }
        /// <summary>
        /// If &#x60;true&#x60;, the item can be added to shipping orders from the merchant&#39;s online store.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the item can be added to shipping orders from the merchant&#39;s online store.</value>
        [DataMember(Name="available_online", EmitDefaultValue=false)]
        public bool? AvailableOnline { get; set; }
        /// <summary>
        /// If &#x60;true&#x60;, the item can be added to pickup orders from the merchant&#39;s online store.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the item can be added to pickup orders from the merchant&#39;s online store.</value>
        [DataMember(Name="available_for_pickup", EmitDefaultValue=false)]
        public bool? AvailableForPickup { get; set; }
        /// <summary>
        /// If &#x60;true&#x60;, the item can be added to electronically fulfilled orders from the merchant&#39;s online store.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the item can be added to electronically fulfilled orders from the merchant&#39;s online store.</value>
        [DataMember(Name="available_electronically", EmitDefaultValue=false)]
        public bool? AvailableElectronically { get; set; }
        /// <summary>
        /// The ID of the item&#39;s category, if any.
        /// </summary>
        /// <value>The ID of the item&#39;s category, if any.</value>
        [DataMember(Name="category_id", EmitDefaultValue=false)]
        public string CategoryId { get; set; }
        /// <summary>
        /// A set of IDs indicating the &#x60;CatalogTax&#x60;es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. &#x60;CatalogTax&#x60;es may also be added to or deleted from an item using &#x60;UpdateItemTaxes&#x60;.
        /// </summary>
        /// <value>A set of IDs indicating the &#x60;CatalogTax&#x60;es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. &#x60;CatalogTax&#x60;es may also be added to or deleted from an item using &#x60;UpdateItemTaxes&#x60;.</value>
        [DataMember(Name="tax_ids", EmitDefaultValue=false)]
        public List<string> TaxIds { get; set; }
        /// <summary>
        /// A set of &#x60;CatalogItemModifierListInfo&#x60; objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. &#x60;CatalogModifierList&#x60;s may also be added to or deleted from an item using &#x60;UpdateItemModifierLists&#x60;.
        /// </summary>
        /// <value>A set of &#x60;CatalogItemModifierListInfo&#x60; objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. &#x60;CatalogModifierList&#x60;s may also be added to or deleted from an item using &#x60;UpdateItemModifierLists&#x60;.</value>
        [DataMember(Name="modifier_list_info", EmitDefaultValue=false)]
        public List<CatalogItemModifierListInfo> ModifierListInfo { get; set; }
        /// <summary>
        /// A list of &#x60;CatalogObject&#x60;s containing the &#x60;CatalogItemVariation&#x60;s for this item.  Maximum: 250 item variations
        /// </summary>
        /// <value>A list of &#x60;CatalogObject&#x60;s containing the &#x60;CatalogItemVariation&#x60;s for this item.  Maximum: 250 item variations</value>
        [DataMember(Name="variations", EmitDefaultValue=false)]
        public List<CatalogObject> Variations { get; set; }
        /// <summary>
        /// The product type of the item. May not be changed once an item has been created.  Only items of product type &#x60;REGULAR&#x60; or &#x60;APPOINTMENTS_SERVICE&#x60; may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values
        /// </summary>
        /// <value>The product type of the item. May not be changed once an item has been created.  Only items of product type &#x60;REGULAR&#x60; or &#x60;APPOINTMENTS_SERVICE&#x60; may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for possible values</value>
        [DataMember(Name="product_type", EmitDefaultValue=false)]
        public string ProductType { get; set; }
        /// <summary>
        /// If &#x60;false&#x60;, the Square Point of Sale app will present the &#x60;CatalogItem&#x60;&#39;s details screen immediately, allowing the merchant to choose &#x60;CatalogModifier&#x60;s before adding the item to the cart.  This is the default behavior.  If &#x60;true&#x60;, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item&#39;s details.  Third-party clients are encouraged to implement similar behaviors.
        /// </summary>
        /// <value>If &#x60;false&#x60;, the Square Point of Sale app will present the &#x60;CatalogItem&#x60;&#39;s details screen immediately, allowing the merchant to choose &#x60;CatalogModifier&#x60;s before adding the item to the cart.  This is the default behavior.  If &#x60;true&#x60;, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item&#39;s details.  Third-party clients are encouraged to implement similar behaviors.</value>
        [DataMember(Name="skip_modifier_screen", EmitDefaultValue=false)]
        public bool? SkipModifierScreen { get; set; }
        /// <summary>
        /// List of item options IDs for this item. Used to manage and group item variations in a specified order.  Maximum: 6 item options.
        /// </summary>
        /// <value>List of item options IDs for this item. Used to manage and group item variations in a specified order.  Maximum: 6 item options.</value>
        [DataMember(Name="item_options", EmitDefaultValue=false)]
        public List<CatalogItemOptionForItem> ItemOptions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogItem {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Abbreviation: ").Append(Abbreviation).Append("\n");
            sb.Append("  LabelColor: ").Append(LabelColor).Append("\n");
            sb.Append("  AvailableOnline: ").Append(AvailableOnline).Append("\n");
            sb.Append("  AvailableForPickup: ").Append(AvailableForPickup).Append("\n");
            sb.Append("  AvailableElectronically: ").Append(AvailableElectronically).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  TaxIds: ").Append(TaxIds).Append("\n");
            sb.Append("  ModifierListInfo: ").Append(ModifierListInfo).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  SkipModifierScreen: ").Append(SkipModifierScreen).Append("\n");
            sb.Append("  ItemOptions: ").Append(ItemOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogItem);
        }

        /// <summary>
        /// Returns true if CatalogItem instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Abbreviation == other.Abbreviation ||
                    this.Abbreviation != null &&
                    this.Abbreviation.Equals(other.Abbreviation)
                ) && 
                (
                    this.LabelColor == other.LabelColor ||
                    this.LabelColor != null &&
                    this.LabelColor.Equals(other.LabelColor)
                ) && 
                (
                    this.AvailableOnline == other.AvailableOnline ||
                    this.AvailableOnline != null &&
                    this.AvailableOnline.Equals(other.AvailableOnline)
                ) && 
                (
                    this.AvailableForPickup == other.AvailableForPickup ||
                    this.AvailableForPickup != null &&
                    this.AvailableForPickup.Equals(other.AvailableForPickup)
                ) && 
                (
                    this.AvailableElectronically == other.AvailableElectronically ||
                    this.AvailableElectronically != null &&
                    this.AvailableElectronically.Equals(other.AvailableElectronically)
                ) && 
                (
                    this.CategoryId == other.CategoryId ||
                    this.CategoryId != null &&
                    this.CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    this.TaxIds == other.TaxIds ||
                    this.TaxIds != null &&
                    this.TaxIds.SequenceEqual(other.TaxIds)
                ) && 
                (
                    this.ModifierListInfo == other.ModifierListInfo ||
                    this.ModifierListInfo != null &&
                    this.ModifierListInfo.SequenceEqual(other.ModifierListInfo)
                ) && 
                (
                    this.Variations == other.Variations ||
                    this.Variations != null &&
                    this.Variations.SequenceEqual(other.Variations)
                ) && 
                (
                    this.ProductType == other.ProductType ||
                    this.ProductType != null &&
                    this.ProductType.Equals(other.ProductType)
                ) && 
                (
                    this.SkipModifierScreen == other.SkipModifierScreen ||
                    this.SkipModifierScreen != null &&
                    this.SkipModifierScreen.Equals(other.SkipModifierScreen)
                ) && 
                (
                    this.ItemOptions == other.ItemOptions ||
                    this.ItemOptions != null &&
                    this.ItemOptions.SequenceEqual(other.ItemOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Abbreviation != null)
                    hash = hash * 59 + this.Abbreviation.GetHashCode();
                if (this.LabelColor != null)
                    hash = hash * 59 + this.LabelColor.GetHashCode();
                if (this.AvailableOnline != null)
                    hash = hash * 59 + this.AvailableOnline.GetHashCode();
                if (this.AvailableForPickup != null)
                    hash = hash * 59 + this.AvailableForPickup.GetHashCode();
                if (this.AvailableElectronically != null)
                    hash = hash * 59 + this.AvailableElectronically.GetHashCode();
                if (this.CategoryId != null)
                    hash = hash * 59 + this.CategoryId.GetHashCode();
                if (this.TaxIds != null)
                    hash = hash * 59 + this.TaxIds.GetHashCode();
                if (this.ModifierListInfo != null)
                    hash = hash * 59 + this.ModifierListInfo.GetHashCode();
                if (this.Variations != null)
                    hash = hash * 59 + this.Variations.GetHashCode();
                if (this.ProductType != null)
                    hash = hash * 59 + this.ProductType.GetHashCode();
                if (this.SkipModifierScreen != null)
                    hash = hash * 59 + this.SkipModifierScreen.GetHashCode();
                if (this.ItemOptions != null)
                    hash = hash * 59 + this.ItemOptions.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
