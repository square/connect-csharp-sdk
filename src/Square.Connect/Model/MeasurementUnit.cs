/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a unit of measurement to use with a quantity, such as ounces or inches. Exactly one of the following fields are required: &#x60;custom_unit&#x60;, &#x60;area_unit&#x60;, &#x60;length_unit&#x60;, &#x60;volume_unit&#x60;, and &#x60;weight_unit&#x60;.
    /// </summary>
    [DataContract]
    public partial class MeasurementUnit :  IEquatable<MeasurementUnit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeasurementUnit" /> class.
        /// </summary>
        /// <param name="CustomUnit">A custom unit of measurement defined by the seller using the Point of Sale app or ad-hoc as an order line item..</param>
        /// <param name="AreaUnit">Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values.</param>
        /// <param name="LengthUnit">Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values.</param>
        /// <param name="VolumeUnit">Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values.</param>
        /// <param name="WeightUnit">Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values.</param>
        /// <param name="GenericUnit">Reserved for API integrations that lack the ability to specify a real measurement unit See [MeasurementUnitGeneric](#type-measurementunitgeneric) for possible values.</param>
        /// <param name="TimeUnit">Represents a standard unit of time. See [MeasurementUnitTime](#type-measurementunittime) for possible values.</param>
        /// <param name="Type">Represents the type of the measurement unit. See [MeasurementUnitUnitType](#type-measurementunitunittype) for possible values.</param>
        public MeasurementUnit(MeasurementUnitCustom CustomUnit = default(MeasurementUnitCustom), string AreaUnit = default(string), string LengthUnit = default(string), string VolumeUnit = default(string), string WeightUnit = default(string), string GenericUnit = default(string), string TimeUnit = default(string), string Type = default(string))
        {
            this.CustomUnit = CustomUnit;
            this.AreaUnit = AreaUnit;
            this.LengthUnit = LengthUnit;
            this.VolumeUnit = VolumeUnit;
            this.WeightUnit = WeightUnit;
            this.GenericUnit = GenericUnit;
            this.TimeUnit = TimeUnit;
            this.Type = Type;
        }
        
        /// <summary>
        /// A custom unit of measurement defined by the seller using the Point of Sale app or ad-hoc as an order line item.
        /// </summary>
        /// <value>A custom unit of measurement defined by the seller using the Point of Sale app or ad-hoc as an order line item.</value>
        [DataMember(Name="custom_unit", EmitDefaultValue=false)]
        public MeasurementUnitCustom CustomUnit { get; set; }
        /// <summary>
        /// Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values
        /// </summary>
        /// <value>Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values</value>
        [DataMember(Name="area_unit", EmitDefaultValue=false)]
        public string AreaUnit { get; set; }
        /// <summary>
        /// Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values
        /// </summary>
        /// <value>Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values</value>
        [DataMember(Name="length_unit", EmitDefaultValue=false)]
        public string LengthUnit { get; set; }
        /// <summary>
        /// Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values
        /// </summary>
        /// <value>Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values</value>
        [DataMember(Name="volume_unit", EmitDefaultValue=false)]
        public string VolumeUnit { get; set; }
        /// <summary>
        /// Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values
        /// </summary>
        /// <value>Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values</value>
        [DataMember(Name="weight_unit", EmitDefaultValue=false)]
        public string WeightUnit { get; set; }
        /// <summary>
        /// Reserved for API integrations that lack the ability to specify a real measurement unit See [MeasurementUnitGeneric](#type-measurementunitgeneric) for possible values
        /// </summary>
        /// <value>Reserved for API integrations that lack the ability to specify a real measurement unit See [MeasurementUnitGeneric](#type-measurementunitgeneric) for possible values</value>
        [DataMember(Name="generic_unit", EmitDefaultValue=false)]
        public string GenericUnit { get; set; }
        /// <summary>
        /// Represents a standard unit of time. See [MeasurementUnitTime](#type-measurementunittime) for possible values
        /// </summary>
        /// <value>Represents a standard unit of time. See [MeasurementUnitTime](#type-measurementunittime) for possible values</value>
        [DataMember(Name="time_unit", EmitDefaultValue=false)]
        public string TimeUnit { get; set; }
        /// <summary>
        /// Represents the type of the measurement unit. See [MeasurementUnitUnitType](#type-measurementunitunittype) for possible values
        /// </summary>
        /// <value>Represents the type of the measurement unit. See [MeasurementUnitUnitType](#type-measurementunitunittype) for possible values</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeasurementUnit {\n");
            sb.Append("  CustomUnit: ").Append(CustomUnit).Append("\n");
            sb.Append("  AreaUnit: ").Append(AreaUnit).Append("\n");
            sb.Append("  LengthUnit: ").Append(LengthUnit).Append("\n");
            sb.Append("  VolumeUnit: ").Append(VolumeUnit).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  GenericUnit: ").Append(GenericUnit).Append("\n");
            sb.Append("  TimeUnit: ").Append(TimeUnit).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MeasurementUnit);
        }

        /// <summary>
        /// Returns true if MeasurementUnit instances are equal
        /// </summary>
        /// <param name="other">Instance of MeasurementUnit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeasurementUnit other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CustomUnit == other.CustomUnit ||
                    this.CustomUnit != null &&
                    this.CustomUnit.Equals(other.CustomUnit)
                ) && 
                (
                    this.AreaUnit == other.AreaUnit ||
                    this.AreaUnit != null &&
                    this.AreaUnit.Equals(other.AreaUnit)
                ) && 
                (
                    this.LengthUnit == other.LengthUnit ||
                    this.LengthUnit != null &&
                    this.LengthUnit.Equals(other.LengthUnit)
                ) && 
                (
                    this.VolumeUnit == other.VolumeUnit ||
                    this.VolumeUnit != null &&
                    this.VolumeUnit.Equals(other.VolumeUnit)
                ) && 
                (
                    this.WeightUnit == other.WeightUnit ||
                    this.WeightUnit != null &&
                    this.WeightUnit.Equals(other.WeightUnit)
                ) && 
                (
                    this.GenericUnit == other.GenericUnit ||
                    this.GenericUnit != null &&
                    this.GenericUnit.Equals(other.GenericUnit)
                ) && 
                (
                    this.TimeUnit == other.TimeUnit ||
                    this.TimeUnit != null &&
                    this.TimeUnit.Equals(other.TimeUnit)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CustomUnit != null)
                    hash = hash * 59 + this.CustomUnit.GetHashCode();
                if (this.AreaUnit != null)
                    hash = hash * 59 + this.AreaUnit.GetHashCode();
                if (this.LengthUnit != null)
                    hash = hash * 59 + this.LengthUnit.GetHashCode();
                if (this.VolumeUnit != null)
                    hash = hash * 59 + this.VolumeUnit.GetHashCode();
                if (this.WeightUnit != null)
                    hash = hash * 59 + this.WeightUnit.GetHashCode();
                if (this.GenericUnit != null)
                    hash = hash * 59 + this.GenericUnit.GetHashCode();
                if (this.TimeUnit != null)
                    hash = hash * 59 + this.TimeUnit.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
