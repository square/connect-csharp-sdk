/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a Square seller.
    /// </summary>
    [DataContract]
    public partial class Merchant :  IEquatable<Merchant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Merchant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Merchant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Merchant" /> class.
        /// </summary>
        /// <param name="Id">The Square-issued ID of the merchant..</param>
        /// <param name="BusinessName">The business name of the merchant..</param>
        /// <param name="Country">The country code associated with the merchant account, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values (required).</param>
        /// <param name="LanguageCode">The language code associated with the merchant account, in BCP 47 format..</param>
        /// <param name="Currency">The currency associated with the merchant account, in ISO 4217 format. See [Currency](#type-currency) for possible values.</param>
        /// <param name="Status">The merchant status, active or inactive. See [MerchantStatus](#type-merchantstatus) for possible values.</param>
        public Merchant(string Id = default(string), string BusinessName = default(string), string Country = default(string), string LanguageCode = default(string), string Currency = default(string), string Status = default(string))
        {
            // to ensure "Country" is required (not null)
            if (Country == null)
            {
                throw new InvalidDataException("Country is a required property for Merchant and cannot be null");
            }
            else
            {
                this.Country = Country;
            }
            this.Id = Id;
            this.BusinessName = BusinessName;
            this.LanguageCode = LanguageCode;
            this.Currency = Currency;
            this.Status = Status;
        }
        
        /// <summary>
        /// The Square-issued ID of the merchant.
        /// </summary>
        /// <value>The Square-issued ID of the merchant.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The business name of the merchant.
        /// </summary>
        /// <value>The business name of the merchant.</value>
        [DataMember(Name="business_name", EmitDefaultValue=false)]
        public string BusinessName { get; set; }
        /// <summary>
        /// The country code associated with the merchant account, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values
        /// </summary>
        /// <value>The country code associated with the merchant account, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// The language code associated with the merchant account, in BCP 47 format.
        /// </summary>
        /// <value>The language code associated with the merchant account, in BCP 47 format.</value>
        [DataMember(Name="language_code", EmitDefaultValue=false)]
        public string LanguageCode { get; set; }
        /// <summary>
        /// The currency associated with the merchant account, in ISO 4217 format. See [Currency](#type-currency) for possible values
        /// </summary>
        /// <value>The currency associated with the merchant account, in ISO 4217 format. See [Currency](#type-currency) for possible values</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }
        /// <summary>
        /// The merchant status, active or inactive. See [MerchantStatus](#type-merchantstatus) for possible values
        /// </summary>
        /// <value>The merchant status, active or inactive. See [MerchantStatus](#type-merchantstatus) for possible values</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Merchant {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Merchant);
        }

        /// <summary>
        /// Returns true if Merchant instances are equal
        /// </summary>
        /// <param name="other">Instance of Merchant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Merchant other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.BusinessName == other.BusinessName ||
                    this.BusinessName != null &&
                    this.BusinessName.Equals(other.BusinessName)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.LanguageCode == other.LanguageCode ||
                    this.LanguageCode != null &&
                    this.LanguageCode.Equals(other.LanguageCode)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.BusinessName != null)
                    hash = hash * 59 + this.BusinessName.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.LanguageCode != null)
                    hash = hash * 59 + this.LanguageCode.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
