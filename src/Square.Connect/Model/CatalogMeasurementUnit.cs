/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents the unit used to measure a [CatalogItemVariation](#type-catalogitemvariation) and specifies the precision for decimal quantities.
    /// Note: This endpoint is in beta.
    /// </summary>
    [DataContract]
    public partial class CatalogMeasurementUnit :  IEquatable<CatalogMeasurementUnit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogMeasurementUnit" /> class.
        /// </summary>
        /// <param name="MeasurementUnit">Indicates the unit used to measure the quantity of a catalog item variation..</param>
        /// <param name="Precision"> Represents the maximum number of positions allowed after the decimal in quantities measured with this unit. For example, if the precision is 2, then an itemization’s quantity can be 0.01, 0.12, etc.  Min: 0  Max: 5  Default: 3.</param>
        public CatalogMeasurementUnit(MeasurementUnit MeasurementUnit = default(MeasurementUnit), int? Precision = default(int?))
        {
            this.MeasurementUnit = MeasurementUnit;
            this.Precision = Precision;
        }
        
        /// <summary>
        /// Indicates the unit used to measure the quantity of a catalog item variation.
        /// </summary>
        /// <value>Indicates the unit used to measure the quantity of a catalog item variation.</value>
        [DataMember(Name="measurement_unit", EmitDefaultValue=false)]
        public MeasurementUnit MeasurementUnit { get; set; }
        /// <summary>
        ///  Represents the maximum number of positions allowed after the decimal in quantities measured with this unit. For example, if the precision is 2, then an itemization’s quantity can be 0.01, 0.12, etc.  Min: 0  Max: 5  Default: 3
        /// </summary>
        /// <value> Represents the maximum number of positions allowed after the decimal in quantities measured with this unit. For example, if the precision is 2, then an itemization’s quantity can be 0.01, 0.12, etc.  Min: 0  Max: 5  Default: 3</value>
        [DataMember(Name="precision", EmitDefaultValue=false)]
        public int? Precision { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogMeasurementUnit {\n");
            sb.Append("  MeasurementUnit: ").Append(MeasurementUnit).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogMeasurementUnit);
        }

        /// <summary>
        /// Returns true if CatalogMeasurementUnit instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogMeasurementUnit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogMeasurementUnit other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MeasurementUnit == other.MeasurementUnit ||
                    this.MeasurementUnit != null &&
                    this.MeasurementUnit.Equals(other.MeasurementUnit)
                ) && 
                (
                    this.Precision == other.Precision ||
                    this.Precision != null &&
                    this.Precision.Equals(other.Precision)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MeasurementUnit != null)
                    hash = hash * 59 + this.MeasurementUnit.GetHashCode();
                if (this.Precision != null)
                    hash = hash * 59 + this.Precision.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
