/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Defines the parameters that can be included in the body of a request to the __RegisterDomain__ endpoint.
    /// </summary>
    [DataContract]
    public partial class RegisterDomainRequest :  IEquatable<RegisterDomainRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterDomainRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterDomainRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterDomainRequest" /> class.
        /// </summary>
        /// <param name="DomainName">A domain name as described in RFC-1034 that will be registered with ApplePay (required).</param>
        public RegisterDomainRequest(string DomainName = default(string))
        {
            // to ensure "DomainName" is required (not null)
            if (DomainName == null)
            {
                throw new InvalidDataException("DomainName is a required property for RegisterDomainRequest and cannot be null");
            }
            else
            {
                this.DomainName = DomainName;
            }
        }
        
        /// <summary>
        /// A domain name as described in RFC-1034 that will be registered with ApplePay
        /// </summary>
        /// <value>A domain name as described in RFC-1034 that will be registered with ApplePay</value>
        [DataMember(Name="domain_name", EmitDefaultValue=false)]
        public string DomainName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterDomainRequest {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RegisterDomainRequest);
        }

        /// <summary>
        /// Returns true if RegisterDomainRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of RegisterDomainRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterDomainRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DomainName == other.DomainName ||
                    this.DomainName != null &&
                    this.DomainName.Equals(other.DomainName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DomainName != null)
                    hash = hash * 59 + this.DomainName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // DomainName (string) maxLength
            if(this.DomainName != null && this.DomainName.Length > 255)
            {
                yield return new ValidationResult("Invalid value for DomainName, length must be less than 255.", new [] { "DomainName" });
            }

            // DomainName (string) minLength
            if(this.DomainName != null && this.DomainName.Length < 1)
            {
                yield return new ValidationResult("Invalid value for DomainName, length must be greater than 1.", new [] { "DomainName" });
            }

            yield break;
        }
    }

}
