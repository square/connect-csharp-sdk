/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a payment processed by the Square API.
    /// </summary>
    [DataContract]
    public partial class Payment :  IEquatable<Payment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="Id">Unique ID for the payment..</param>
        /// <param name="CreatedAt">Timestamp of when the payment was created, in RFC 3339 format..</param>
        /// <param name="UpdatedAt">Timestamp of when the payment was last updated, in RFC 3339 format..</param>
        /// <param name="AmountMoney">The amount of money processed for this payment, not including &#x60;tip_money&#x60;. Specified in the smallest denomination of the applicable currency. For example,  US dollar amounts are specified in cents. For more information, see [Working with monetary amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)..</param>
        /// <param name="TipMoney">The amount designated as a tip. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents..</param>
        /// <param name="TotalMoney">The total money for the payment, including &#x60;amount_money&#x60; and &#x60;tip_money&#x60;. Specified in the smallest denomination of the applicable currency.  For example, US dollar amounts are specified in cents..</param>
        /// <param name="AppFeeMoney">The amount of money the developer is taking as a fee for facilitating the payment on behalf of the seller. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.   For more information, see   [Take Payments and Collect Fees](https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).  Cannot be more than 90% of the &#x60;total_money&#x60; value..</param>
        /// <param name="ProcessingFee">Processing fees and fee adjustments assessed by Square on this payment..</param>
        /// <param name="RefundedMoney">Total amount of the payment refunded to-date. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents..</param>
        /// <param name="Status">Indicates whether the payment is &#x60;APPROVED&#x60;, &#x60;COMPLETED&#x60;, &#x60;CANCELED&#x60;, or &#x60;FAILED&#x60;..</param>
        /// <param name="SourceType">The source type for this payment  Current values include: &#x60;CARD&#x60;.</param>
        /// <param name="CardDetails">Non-confidential details about the source. Only populated if the &#x60;source_type&#x60; is &#x60;CARD&#x60;..</param>
        /// <param name="LocationId">ID of the location associated with the payment..</param>
        /// <param name="OrderId">ID of the order associated with this payment..</param>
        /// <param name="ReferenceId">An optional ID that associates this payment with an entity in another system..</param>
        /// <param name="CustomerId">An optional customer_id to be entered by the developer when creating a payment..</param>
        /// <param name="EmployeeId">An optional ID of the employee associated with taking this payment..</param>
        /// <param name="RefundIds">List of &#x60;refund_id&#x60;s identifying refunds for this payment..</param>
        /// <param name="BuyerEmailAddress">The buyer&#39;s e-mail address.</param>
        /// <param name="BillingAddress">The buyer&#39;s billing address.</param>
        /// <param name="ShippingAddress">The buyer&#39;s shipping address.</param>
        /// <param name="Note">An optional note to include when creating a payment.</param>
        /// <param name="StatementDescriptionIdentifier">[beta] Additional payment information that gets added on the customer&#39;s card statement as part of the statement description.  Note that the statement_description_identifier may get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the merchant taking the payment..</param>
        public Payment(string Id = default(string), string CreatedAt = default(string), string UpdatedAt = default(string), Money AmountMoney = default(Money), Money TipMoney = default(Money), Money TotalMoney = default(Money), Money AppFeeMoney = default(Money), List<ProcessingFee> ProcessingFee = default(List<ProcessingFee>), Money RefundedMoney = default(Money), string Status = default(string), string SourceType = default(string), CardPaymentDetails CardDetails = default(CardPaymentDetails), string LocationId = default(string), string OrderId = default(string), string ReferenceId = default(string), string CustomerId = default(string), string EmployeeId = default(string), List<string> RefundIds = default(List<string>), string BuyerEmailAddress = default(string), Address BillingAddress = default(Address), Address ShippingAddress = default(Address), string Note = default(string), string StatementDescriptionIdentifier = default(string))
        {
            this.Id = Id;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
            this.AmountMoney = AmountMoney;
            this.TipMoney = TipMoney;
            this.TotalMoney = TotalMoney;
            this.AppFeeMoney = AppFeeMoney;
            this.ProcessingFee = ProcessingFee;
            this.RefundedMoney = RefundedMoney;
            this.Status = Status;
            this.SourceType = SourceType;
            this.CardDetails = CardDetails;
            this.LocationId = LocationId;
            this.OrderId = OrderId;
            this.ReferenceId = ReferenceId;
            this.CustomerId = CustomerId;
            this.EmployeeId = EmployeeId;
            this.RefundIds = RefundIds;
            this.BuyerEmailAddress = BuyerEmailAddress;
            this.BillingAddress = BillingAddress;
            this.ShippingAddress = ShippingAddress;
            this.Note = Note;
            this.StatementDescriptionIdentifier = StatementDescriptionIdentifier;
        }
        
        /// <summary>
        /// Unique ID for the payment.
        /// </summary>
        /// <value>Unique ID for the payment.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Timestamp of when the payment was created, in RFC 3339 format.
        /// </summary>
        /// <value>Timestamp of when the payment was created, in RFC 3339 format.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Timestamp of when the payment was last updated, in RFC 3339 format.
        /// </summary>
        /// <value>Timestamp of when the payment was last updated, in RFC 3339 format.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// The amount of money processed for this payment, not including &#x60;tip_money&#x60;. Specified in the smallest denomination of the applicable currency. For example,  US dollar amounts are specified in cents. For more information, see [Working with monetary amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
        /// </summary>
        /// <value>The amount of money processed for this payment, not including &#x60;tip_money&#x60;. Specified in the smallest denomination of the applicable currency. For example,  US dollar amounts are specified in cents. For more information, see [Working with monetary amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).</value>
        [DataMember(Name="amount_money", EmitDefaultValue=false)]
        public Money AmountMoney { get; set; }
        /// <summary>
        /// The amount designated as a tip. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.
        /// </summary>
        /// <value>The amount designated as a tip. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.</value>
        [DataMember(Name="tip_money", EmitDefaultValue=false)]
        public Money TipMoney { get; set; }
        /// <summary>
        /// The total money for the payment, including &#x60;amount_money&#x60; and &#x60;tip_money&#x60;. Specified in the smallest denomination of the applicable currency.  For example, US dollar amounts are specified in cents.
        /// </summary>
        /// <value>The total money for the payment, including &#x60;amount_money&#x60; and &#x60;tip_money&#x60;. Specified in the smallest denomination of the applicable currency.  For example, US dollar amounts are specified in cents.</value>
        [DataMember(Name="total_money", EmitDefaultValue=false)]
        public Money TotalMoney { get; set; }
        /// <summary>
        /// The amount of money the developer is taking as a fee for facilitating the payment on behalf of the seller. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.   For more information, see   [Take Payments and Collect Fees](https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).  Cannot be more than 90% of the &#x60;total_money&#x60; value.
        /// </summary>
        /// <value>The amount of money the developer is taking as a fee for facilitating the payment on behalf of the seller. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.   For more information, see   [Take Payments and Collect Fees](https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).  Cannot be more than 90% of the &#x60;total_money&#x60; value.</value>
        [DataMember(Name="app_fee_money", EmitDefaultValue=false)]
        public Money AppFeeMoney { get; set; }
        /// <summary>
        /// Processing fees and fee adjustments assessed by Square on this payment.
        /// </summary>
        /// <value>Processing fees and fee adjustments assessed by Square on this payment.</value>
        [DataMember(Name="processing_fee", EmitDefaultValue=false)]
        public List<ProcessingFee> ProcessingFee { get; set; }
        /// <summary>
        /// Total amount of the payment refunded to-date. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.
        /// </summary>
        /// <value>Total amount of the payment refunded to-date. Specified in the smallest denomination of the applicable currency. For example, US dollar amounts are specified in cents.</value>
        [DataMember(Name="refunded_money", EmitDefaultValue=false)]
        public Money RefundedMoney { get; set; }
        /// <summary>
        /// Indicates whether the payment is &#x60;APPROVED&#x60;, &#x60;COMPLETED&#x60;, &#x60;CANCELED&#x60;, or &#x60;FAILED&#x60;.
        /// </summary>
        /// <value>Indicates whether the payment is &#x60;APPROVED&#x60;, &#x60;COMPLETED&#x60;, &#x60;CANCELED&#x60;, or &#x60;FAILED&#x60;.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// The source type for this payment  Current values include: &#x60;CARD&#x60;
        /// </summary>
        /// <value>The source type for this payment  Current values include: &#x60;CARD&#x60;</value>
        [DataMember(Name="source_type", EmitDefaultValue=false)]
        public string SourceType { get; set; }
        /// <summary>
        /// Non-confidential details about the source. Only populated if the &#x60;source_type&#x60; is &#x60;CARD&#x60;.
        /// </summary>
        /// <value>Non-confidential details about the source. Only populated if the &#x60;source_type&#x60; is &#x60;CARD&#x60;.</value>
        [DataMember(Name="card_details", EmitDefaultValue=false)]
        public CardPaymentDetails CardDetails { get; set; }
        /// <summary>
        /// ID of the location associated with the payment.
        /// </summary>
        /// <value>ID of the location associated with the payment.</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public string LocationId { get; set; }
        /// <summary>
        /// ID of the order associated with this payment.
        /// </summary>
        /// <value>ID of the order associated with this payment.</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }
        /// <summary>
        /// An optional ID that associates this payment with an entity in another system.
        /// </summary>
        /// <value>An optional ID that associates this payment with an entity in another system.</value>
        [DataMember(Name="reference_id", EmitDefaultValue=false)]
        public string ReferenceId { get; set; }
        /// <summary>
        /// An optional customer_id to be entered by the developer when creating a payment.
        /// </summary>
        /// <value>An optional customer_id to be entered by the developer when creating a payment.</value>
        [DataMember(Name="customer_id", EmitDefaultValue=false)]
        public string CustomerId { get; set; }
        /// <summary>
        /// An optional ID of the employee associated with taking this payment.
        /// </summary>
        /// <value>An optional ID of the employee associated with taking this payment.</value>
        [DataMember(Name="employee_id", EmitDefaultValue=false)]
        public string EmployeeId { get; set; }
        /// <summary>
        /// List of &#x60;refund_id&#x60;s identifying refunds for this payment.
        /// </summary>
        /// <value>List of &#x60;refund_id&#x60;s identifying refunds for this payment.</value>
        [DataMember(Name="refund_ids", EmitDefaultValue=false)]
        public List<string> RefundIds { get; set; }
        /// <summary>
        /// The buyer&#39;s e-mail address
        /// </summary>
        /// <value>The buyer&#39;s e-mail address</value>
        [DataMember(Name="buyer_email_address", EmitDefaultValue=false)]
        public string BuyerEmailAddress { get; set; }
        /// <summary>
        /// The buyer&#39;s billing address
        /// </summary>
        /// <value>The buyer&#39;s billing address</value>
        [DataMember(Name="billing_address", EmitDefaultValue=false)]
        public Address BillingAddress { get; set; }
        /// <summary>
        /// The buyer&#39;s shipping address
        /// </summary>
        /// <value>The buyer&#39;s shipping address</value>
        [DataMember(Name="shipping_address", EmitDefaultValue=false)]
        public Address ShippingAddress { get; set; }
        /// <summary>
        /// An optional note to include when creating a payment
        /// </summary>
        /// <value>An optional note to include when creating a payment</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// Additional payment information that gets added on the customer&#39;s card statement as part of the statement description.  Note that the statement_description_identifier may get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the merchant taking the payment.
        /// </summary>
        /// <value>Additional payment information that gets added on the customer&#39;s card statement as part of the statement description.  Note that the statement_description_identifier may get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the merchant taking the payment.</value>
        [DataMember(Name="statement_description_identifier", EmitDefaultValue=false)]
        public string StatementDescriptionIdentifier { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AmountMoney: ").Append(AmountMoney).Append("\n");
            sb.Append("  TipMoney: ").Append(TipMoney).Append("\n");
            sb.Append("  TotalMoney: ").Append(TotalMoney).Append("\n");
            sb.Append("  AppFeeMoney: ").Append(AppFeeMoney).Append("\n");
            sb.Append("  ProcessingFee: ").Append(ProcessingFee).Append("\n");
            sb.Append("  RefundedMoney: ").Append(RefundedMoney).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  CardDetails: ").Append(CardDetails).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  RefundIds: ").Append(RefundIds).Append("\n");
            sb.Append("  BuyerEmailAddress: ").Append(BuyerEmailAddress).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  StatementDescriptionIdentifier: ").Append(StatementDescriptionIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Payment);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    this.AmountMoney == other.AmountMoney ||
                    this.AmountMoney != null &&
                    this.AmountMoney.Equals(other.AmountMoney)
                ) && 
                (
                    this.TipMoney == other.TipMoney ||
                    this.TipMoney != null &&
                    this.TipMoney.Equals(other.TipMoney)
                ) && 
                (
                    this.TotalMoney == other.TotalMoney ||
                    this.TotalMoney != null &&
                    this.TotalMoney.Equals(other.TotalMoney)
                ) && 
                (
                    this.AppFeeMoney == other.AppFeeMoney ||
                    this.AppFeeMoney != null &&
                    this.AppFeeMoney.Equals(other.AppFeeMoney)
                ) && 
                (
                    this.ProcessingFee == other.ProcessingFee ||
                    this.ProcessingFee != null &&
                    this.ProcessingFee.SequenceEqual(other.ProcessingFee)
                ) && 
                (
                    this.RefundedMoney == other.RefundedMoney ||
                    this.RefundedMoney != null &&
                    this.RefundedMoney.Equals(other.RefundedMoney)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.SourceType == other.SourceType ||
                    this.SourceType != null &&
                    this.SourceType.Equals(other.SourceType)
                ) && 
                (
                    this.CardDetails == other.CardDetails ||
                    this.CardDetails != null &&
                    this.CardDetails.Equals(other.CardDetails)
                ) && 
                (
                    this.LocationId == other.LocationId ||
                    this.LocationId != null &&
                    this.LocationId.Equals(other.LocationId)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.ReferenceId == other.ReferenceId ||
                    this.ReferenceId != null &&
                    this.ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    this.CustomerId == other.CustomerId ||
                    this.CustomerId != null &&
                    this.CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    this.EmployeeId == other.EmployeeId ||
                    this.EmployeeId != null &&
                    this.EmployeeId.Equals(other.EmployeeId)
                ) && 
                (
                    this.RefundIds == other.RefundIds ||
                    this.RefundIds != null &&
                    this.RefundIds.SequenceEqual(other.RefundIds)
                ) && 
                (
                    this.BuyerEmailAddress == other.BuyerEmailAddress ||
                    this.BuyerEmailAddress != null &&
                    this.BuyerEmailAddress.Equals(other.BuyerEmailAddress)
                ) && 
                (
                    this.BillingAddress == other.BillingAddress ||
                    this.BillingAddress != null &&
                    this.BillingAddress.Equals(other.BillingAddress)
                ) && 
                (
                    this.ShippingAddress == other.ShippingAddress ||
                    this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(other.ShippingAddress)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.StatementDescriptionIdentifier == other.StatementDescriptionIdentifier ||
                    this.StatementDescriptionIdentifier != null &&
                    this.StatementDescriptionIdentifier.Equals(other.StatementDescriptionIdentifier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                if (this.AmountMoney != null)
                    hash = hash * 59 + this.AmountMoney.GetHashCode();
                if (this.TipMoney != null)
                    hash = hash * 59 + this.TipMoney.GetHashCode();
                if (this.TotalMoney != null)
                    hash = hash * 59 + this.TotalMoney.GetHashCode();
                if (this.AppFeeMoney != null)
                    hash = hash * 59 + this.AppFeeMoney.GetHashCode();
                if (this.ProcessingFee != null)
                    hash = hash * 59 + this.ProcessingFee.GetHashCode();
                if (this.RefundedMoney != null)
                    hash = hash * 59 + this.RefundedMoney.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.SourceType != null)
                    hash = hash * 59 + this.SourceType.GetHashCode();
                if (this.CardDetails != null)
                    hash = hash * 59 + this.CardDetails.GetHashCode();
                if (this.LocationId != null)
                    hash = hash * 59 + this.LocationId.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.ReferenceId != null)
                    hash = hash * 59 + this.ReferenceId.GetHashCode();
                if (this.CustomerId != null)
                    hash = hash * 59 + this.CustomerId.GetHashCode();
                if (this.EmployeeId != null)
                    hash = hash * 59 + this.EmployeeId.GetHashCode();
                if (this.RefundIds != null)
                    hash = hash * 59 + this.RefundIds.GetHashCode();
                if (this.BuyerEmailAddress != null)
                    hash = hash * 59 + this.BuyerEmailAddress.GetHashCode();
                if (this.BillingAddress != null)
                    hash = hash * 59 + this.BillingAddress.GetHashCode();
                if (this.ShippingAddress != null)
                    hash = hash * 59 + this.ShippingAddress.GetHashCode();
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.StatementDescriptionIdentifier != null)
                    hash = hash * 59 + this.StatementDescriptionIdentifier.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Id (string) maxLength
            if(this.Id != null && this.Id.Length > 192)
            {
                yield return new ValidationResult("Invalid value for Id, length must be less than 192.", new [] { "Id" });
            }

            yield break;
        }
    }

}
