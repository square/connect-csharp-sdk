/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Creation source filter.  If one or more creation sources are set, customer profiles are included in, or excluded from, the result if they match at least one of the filter criteria.
    /// </summary>
    [DataContract]
    public partial class CustomerCreationSourceFilter :  IEquatable<CustomerCreationSourceFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerCreationSourceFilter" /> class.
        /// </summary>
        /// <param name="Values">The list of creation sources used as filtering criteria. See [CustomerCreationSource](#type-customercreationsource) for possible values.</param>
        /// <param name="Rule">Indicates whether a customer profile matching the filter criteria should be included in the result or excluded from the result.  Default: &#x60;INCLUDE&#x60;. See [CustomerInclusionExclusion](#type-customerinclusionexclusion) for possible values.</param>
        public CustomerCreationSourceFilter(List<string> Values = default(List<string>), string Rule = default(string))
        {
            this.Values = Values;
            this.Rule = Rule;
        }
        
        /// <summary>
        /// The list of creation sources used as filtering criteria. See [CustomerCreationSource](#type-customercreationsource) for possible values
        /// </summary>
        /// <value>The list of creation sources used as filtering criteria. See [CustomerCreationSource](#type-customercreationsource) for possible values</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }
        /// <summary>
        /// Indicates whether a customer profile matching the filter criteria should be included in the result or excluded from the result.  Default: &#x60;INCLUDE&#x60;. See [CustomerInclusionExclusion](#type-customerinclusionexclusion) for possible values
        /// </summary>
        /// <value>Indicates whether a customer profile matching the filter criteria should be included in the result or excluded from the result.  Default: &#x60;INCLUDE&#x60;. See [CustomerInclusionExclusion](#type-customerinclusionexclusion) for possible values</value>
        [DataMember(Name="rule", EmitDefaultValue=false)]
        public string Rule { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerCreationSourceFilter {\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomerCreationSourceFilter);
        }

        /// <summary>
        /// Returns true if CustomerCreationSourceFilter instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerCreationSourceFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerCreationSourceFilter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                ) && 
                (
                    this.Rule == other.Rule ||
                    this.Rule != null &&
                    this.Rule.Equals(other.Rule)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                if (this.Rule != null)
                    hash = hash * 59 + this.Rule.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
