/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1InventoryEntry
    /// </summary>
    [DataContract]
    [Obsolete]
    public partial class V1InventoryEntry :  IEquatable<V1InventoryEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1InventoryEntry" /> class.
        /// </summary>
        /// <param name="VariationId">The variation that the entry corresponds to..</param>
        /// <param name="QuantityOnHand">The current available quantity of the item variation..</param>
        public V1InventoryEntry(string VariationId = default(string), decimal? QuantityOnHand = default(decimal?))
        {
            this.VariationId = VariationId;
            this.QuantityOnHand = QuantityOnHand;
        }
        
        /// <summary>
        /// The variation that the entry corresponds to.
        /// </summary>
        /// <value>The variation that the entry corresponds to.</value>
        [DataMember(Name="variation_id", EmitDefaultValue=false)]
        public string VariationId { get; set; }
        /// <summary>
        /// The current available quantity of the item variation.
        /// </summary>
        /// <value>The current available quantity of the item variation.</value>
        [DataMember(Name="quantity_on_hand", EmitDefaultValue=false)]
        public decimal? QuantityOnHand { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1InventoryEntry {\n");
            sb.Append("  VariationId: ").Append(VariationId).Append("\n");
            sb.Append("  QuantityOnHand: ").Append(QuantityOnHand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1InventoryEntry);
        }

        /// <summary>
        /// Returns true if V1InventoryEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of V1InventoryEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1InventoryEntry other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VariationId == other.VariationId ||
                    this.VariationId != null &&
                    this.VariationId.Equals(other.VariationId)
                ) && 
                (
                    this.QuantityOnHand == other.QuantityOnHand ||
                    this.QuantityOnHand != null &&
                    this.QuantityOnHand.Equals(other.QuantityOnHand)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VariationId != null)
                    hash = hash * 59 + this.VariationId.GetHashCode();
                if (this.QuantityOnHand != null)
                    hash = hash * 59 + this.QuantityOnHand.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
