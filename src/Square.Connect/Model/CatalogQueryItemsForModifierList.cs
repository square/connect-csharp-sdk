/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogQueryItemsForModifierList :  IEquatable<CatalogQueryItemsForModifierList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogQueryItemsForModifierList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogQueryItemsForModifierList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogQueryItemsForModifierList" /> class.
        /// </summary>
        /// <param name="ModifierListIds">A set of &#x60;CatalogModifierList&#x60; IDs to be used to find associated &#x60;CatalogItem&#x60;s. (required).</param>
        public CatalogQueryItemsForModifierList(List<string> ModifierListIds = default(List<string>))
        {
            // to ensure "ModifierListIds" is required (not null)
            if (ModifierListIds == null)
            {
                throw new InvalidDataException("ModifierListIds is a required property for CatalogQueryItemsForModifierList and cannot be null");
            }
            else
            {
                this.ModifierListIds = ModifierListIds;
            }
        }
        
        /// <summary>
        /// A set of &#x60;CatalogModifierList&#x60; IDs to be used to find associated &#x60;CatalogItem&#x60;s.
        /// </summary>
        /// <value>A set of &#x60;CatalogModifierList&#x60; IDs to be used to find associated &#x60;CatalogItem&#x60;s.</value>
        [DataMember(Name="modifier_list_ids", EmitDefaultValue=false)]
        public List<string> ModifierListIds { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogQueryItemsForModifierList {\n");
            sb.Append("  ModifierListIds: ").Append(ModifierListIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogQueryItemsForModifierList);
        }

        /// <summary>
        /// Returns true if CatalogQueryItemsForModifierList instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogQueryItemsForModifierList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogQueryItemsForModifierList other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ModifierListIds == other.ModifierListIds ||
                    this.ModifierListIds != null &&
                    this.ModifierListIds.SequenceEqual(other.ModifierListIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ModifierListIds != null)
                    hash = hash * 59 + this.ModifierListIds.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
