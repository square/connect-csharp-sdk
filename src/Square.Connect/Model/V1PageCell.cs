/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1PageCell
    /// </summary>
    [DataContract]
    [Obsolete]
    public partial class V1PageCell :  IEquatable<V1PageCell>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1PageCell" /> class.
        /// </summary>
        /// <param name="PageId">The unique identifier of the page the cell is included on..</param>
        /// <param name="Row">The row of the cell. Always an integer between 0 and 4, inclusive..</param>
        /// <param name="Column">The column of the cell. Always an integer between 0 and 4, inclusive..</param>
        /// <param name="ObjectType">The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER). See [V1PageCellObjectType](#type-v1pagecellobjecttype) for possible values.</param>
        /// <param name="ObjectId">The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER..</param>
        /// <param name="PlaceholderType">For a cell with an object_type of PLACEHOLDER, this value indicates the cell&#39;s special behavior. See [V1PageCellPlaceholderType](#type-v1pagecellplaceholdertype) for possible values.</param>
        public V1PageCell(string PageId = default(string), int? Row = default(int?), int? Column = default(int?), string ObjectType = default(string), string ObjectId = default(string), string PlaceholderType = default(string))
        {
            this.PageId = PageId;
            this.Row = Row;
            this.Column = Column;
            this.ObjectType = ObjectType;
            this.ObjectId = ObjectId;
            this.PlaceholderType = PlaceholderType;
        }
        
        /// <summary>
        /// The unique identifier of the page the cell is included on.
        /// </summary>
        /// <value>The unique identifier of the page the cell is included on.</value>
        [DataMember(Name="page_id", EmitDefaultValue=false)]
        public string PageId { get; set; }
        /// <summary>
        /// The row of the cell. Always an integer between 0 and 4, inclusive.
        /// </summary>
        /// <value>The row of the cell. Always an integer between 0 and 4, inclusive.</value>
        [DataMember(Name="row", EmitDefaultValue=false)]
        public int? Row { get; set; }
        /// <summary>
        /// The column of the cell. Always an integer between 0 and 4, inclusive.
        /// </summary>
        /// <value>The column of the cell. Always an integer between 0 and 4, inclusive.</value>
        [DataMember(Name="column", EmitDefaultValue=false)]
        public int? Column { get; set; }
        /// <summary>
        /// The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER). See [V1PageCellObjectType](#type-v1pagecellobjecttype) for possible values
        /// </summary>
        /// <value>The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER). See [V1PageCellObjectType](#type-v1pagecellobjecttype) for possible values</value>
        [DataMember(Name="object_type", EmitDefaultValue=false)]
        public string ObjectType { get; set; }
        /// <summary>
        /// The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER.
        /// </summary>
        /// <value>The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER.</value>
        [DataMember(Name="object_id", EmitDefaultValue=false)]
        public string ObjectId { get; set; }
        /// <summary>
        /// For a cell with an object_type of PLACEHOLDER, this value indicates the cell&#39;s special behavior. See [V1PageCellPlaceholderType](#type-v1pagecellplaceholdertype) for possible values
        /// </summary>
        /// <value>For a cell with an object_type of PLACEHOLDER, this value indicates the cell&#39;s special behavior. See [V1PageCellPlaceholderType](#type-v1pagecellplaceholdertype) for possible values</value>
        [DataMember(Name="placeholder_type", EmitDefaultValue=false)]
        public string PlaceholderType { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1PageCell {\n");
            sb.Append("  PageId: ").Append(PageId).Append("\n");
            sb.Append("  Row: ").Append(Row).Append("\n");
            sb.Append("  Column: ").Append(Column).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  PlaceholderType: ").Append(PlaceholderType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1PageCell);
        }

        /// <summary>
        /// Returns true if V1PageCell instances are equal
        /// </summary>
        /// <param name="other">Instance of V1PageCell to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1PageCell other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PageId == other.PageId ||
                    this.PageId != null &&
                    this.PageId.Equals(other.PageId)
                ) && 
                (
                    this.Row == other.Row ||
                    this.Row != null &&
                    this.Row.Equals(other.Row)
                ) && 
                (
                    this.Column == other.Column ||
                    this.Column != null &&
                    this.Column.Equals(other.Column)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.ObjectId == other.ObjectId ||
                    this.ObjectId != null &&
                    this.ObjectId.Equals(other.ObjectId)
                ) && 
                (
                    this.PlaceholderType == other.PlaceholderType ||
                    this.PlaceholderType != null &&
                    this.PlaceholderType.Equals(other.PlaceholderType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PageId != null)
                    hash = hash * 59 + this.PageId.GetHashCode();
                if (this.Row != null)
                    hash = hash * 59 + this.Row.GetHashCode();
                if (this.Column != null)
                    hash = hash * 59 + this.Column.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.ObjectId != null)
                    hash = hash * 59 + this.ObjectId.GetHashCode();
                if (this.PlaceholderType != null)
                    hash = hash * 59 + this.PlaceholderType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
