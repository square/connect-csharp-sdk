/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Sorting criteria for a SearchOrders request. Results can only be sorted by a timestamp field.
    /// </summary>
    [DataContract]
    public partial class SearchOrdersSort :  IEquatable<SearchOrdersSort>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchOrdersSort" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchOrdersSort() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchOrdersSort" /> class.
        /// </summary>
        /// <param name="SortField">The field to sort by.  __Important:__ When using a &#x60;DateTimeFilter&#x60;, &#x60;sort_field&#x60; must match the timestamp field that the DateTimeFilter uses to filter. For example, If you set your &#x60;sort_field&#x60; to &#x60;CLOSED_AT&#x60; and you use a DateTimeFilter, your DateTimeFilter must filter for orders by their &#x60;CLOSED_AT&#x60; date. If this field does not match the timestamp field in &#x60;DateTimeFilter&#x60;, SearchOrders will return an error.  Default: &#x60;CREATED_AT&#x60;. See [SearchOrdersSortField](#type-searchorderssortfield) for possible values (required).</param>
        /// <param name="SortOrder">The chronological order in which results are returned. Defaults to &#x60;DESC&#x60;. See [SortOrder](#type-sortorder) for possible values.</param>
        public SearchOrdersSort(string SortField = default(string), string SortOrder = default(string))
        {
            // to ensure "SortField" is required (not null)
            if (SortField == null)
            {
                throw new InvalidDataException("SortField is a required property for SearchOrdersSort and cannot be null");
            }
            else
            {
                this.SortField = SortField;
            }
            this.SortOrder = SortOrder;
        }
        
        /// <summary>
        /// The field to sort by.  __Important:__ When using a &#x60;DateTimeFilter&#x60;, &#x60;sort_field&#x60; must match the timestamp field that the DateTimeFilter uses to filter. For example, If you set your &#x60;sort_field&#x60; to &#x60;CLOSED_AT&#x60; and you use a DateTimeFilter, your DateTimeFilter must filter for orders by their &#x60;CLOSED_AT&#x60; date. If this field does not match the timestamp field in &#x60;DateTimeFilter&#x60;, SearchOrders will return an error.  Default: &#x60;CREATED_AT&#x60;. See [SearchOrdersSortField](#type-searchorderssortfield) for possible values
        /// </summary>
        /// <value>The field to sort by.  __Important:__ When using a &#x60;DateTimeFilter&#x60;, &#x60;sort_field&#x60; must match the timestamp field that the DateTimeFilter uses to filter. For example, If you set your &#x60;sort_field&#x60; to &#x60;CLOSED_AT&#x60; and you use a DateTimeFilter, your DateTimeFilter must filter for orders by their &#x60;CLOSED_AT&#x60; date. If this field does not match the timestamp field in &#x60;DateTimeFilter&#x60;, SearchOrders will return an error.  Default: &#x60;CREATED_AT&#x60;. See [SearchOrdersSortField](#type-searchorderssortfield) for possible values</value>
        [DataMember(Name="sort_field", EmitDefaultValue=false)]
        public string SortField { get; set; }
        /// <summary>
        /// The chronological order in which results are returned. Defaults to &#x60;DESC&#x60;. See [SortOrder](#type-sortorder) for possible values
        /// </summary>
        /// <value>The chronological order in which results are returned. Defaults to &#x60;DESC&#x60;. See [SortOrder](#type-sortorder) for possible values</value>
        [DataMember(Name="sort_order", EmitDefaultValue=false)]
        public string SortOrder { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchOrdersSort {\n");
            sb.Append("  SortField: ").Append(SortField).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SearchOrdersSort);
        }

        /// <summary>
        /// Returns true if SearchOrdersSort instances are equal
        /// </summary>
        /// <param name="other">Instance of SearchOrdersSort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchOrdersSort other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SortField == other.SortField ||
                    this.SortField != null &&
                    this.SortField.Equals(other.SortField)
                ) && 
                (
                    this.SortOrder == other.SortOrder ||
                    this.SortOrder != null &&
                    this.SortOrder.Equals(other.SortOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SortField != null)
                    hash = hash * 59 + this.SortField.GetHashCode();
                if (this.SortOrder != null)
                    hash = hash * 59 + this.SortOrder.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
