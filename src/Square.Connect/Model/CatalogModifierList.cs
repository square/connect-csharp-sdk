/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// A modifier list in the Catalog object model. A &#x60;CatalogModifierList&#x60; contains &#x60;CatalogModifier&#x60; objects that can be applied to a &#x60;CatalogItem&#x60; at the time of sale.  For example, a modifier list \&quot;Condiments\&quot; that would apply to a \&quot;Hot Dog\&quot; &#x60;CatalogItem&#x60; might contain &#x60;CatalogModifier&#x60;s \&quot;Ketchup\&quot;, \&quot;Mustard\&quot;, and \&quot;Relish\&quot;. The &#x60;selection_type&#x60; field specifies whether or not multiple selections from the modifier list are allowed.
    /// </summary>
    [DataContract]
    public partial class CatalogModifierList :  IEquatable<CatalogModifierList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogModifierList" /> class.
        /// </summary>
        /// <param name="Name">A searchable name for the &#x60;CatalogModifierList&#x60;. This field has max length of 255 Unicode code points..</param>
        /// <param name="SelectionType">Indicates whether multiple options from the &#x60;CatalogModifierList&#x60; can be applied to a single &#x60;CatalogItem&#x60;. See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values.</param>
        /// <param name="Modifiers">The options included in the &#x60;CatalogModifierList&#x60;. You must include at least one &#x60;CatalogModifier&#x60;. Each CatalogObject must have type &#x60;MODIFIER&#x60; and contain &#x60;CatalogModifier&#x60; data..</param>
        public CatalogModifierList(string Name = default(string), string SelectionType = default(string), List<CatalogObject> Modifiers = default(List<CatalogObject>))
        {
            this.Name = Name;
            this.SelectionType = SelectionType;
            this.Modifiers = Modifiers;
        }
        
        /// <summary>
        /// A searchable name for the &#x60;CatalogModifierList&#x60;. This field has max length of 255 Unicode code points.
        /// </summary>
        /// <value>A searchable name for the &#x60;CatalogModifierList&#x60;. This field has max length of 255 Unicode code points.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Indicates whether multiple options from the &#x60;CatalogModifierList&#x60; can be applied to a single &#x60;CatalogItem&#x60;. See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values
        /// </summary>
        /// <value>Indicates whether multiple options from the &#x60;CatalogModifierList&#x60; can be applied to a single &#x60;CatalogItem&#x60;. See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values</value>
        [DataMember(Name="selection_type", EmitDefaultValue=false)]
        public string SelectionType { get; set; }
        /// <summary>
        /// The options included in the &#x60;CatalogModifierList&#x60;. You must include at least one &#x60;CatalogModifier&#x60;. Each CatalogObject must have type &#x60;MODIFIER&#x60; and contain &#x60;CatalogModifier&#x60; data.
        /// </summary>
        /// <value>The options included in the &#x60;CatalogModifierList&#x60;. You must include at least one &#x60;CatalogModifier&#x60;. Each CatalogObject must have type &#x60;MODIFIER&#x60; and contain &#x60;CatalogModifier&#x60; data.</value>
        [DataMember(Name="modifiers", EmitDefaultValue=false)]
        public List<CatalogObject> Modifiers { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogModifierList {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SelectionType: ").Append(SelectionType).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogModifierList);
        }

        /// <summary>
        /// Returns true if CatalogModifierList instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogModifierList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogModifierList other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.SelectionType == other.SelectionType ||
                    this.SelectionType != null &&
                    this.SelectionType.Equals(other.SelectionType)
                ) && 
                (
                    this.Modifiers == other.Modifiers ||
                    this.Modifiers != null &&
                    this.Modifiers.SequenceEqual(other.Modifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.SelectionType != null)
                    hash = hash * 59 + this.SelectionType.GetHashCode();
                if (this.Modifiers != null)
                    hash = hash * 59 + this.Modifiers.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
