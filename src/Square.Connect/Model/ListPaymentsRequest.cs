/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Retrieves a list of refunds taken by the account making the request.  Max results per page: 100
    /// </summary>
    [DataContract]
    public partial class ListPaymentsRequest :  IEquatable<ListPaymentsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListPaymentsRequest" /> class.
        /// </summary>
        /// <param name="BeginTime">Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year..</param>
        /// <param name="EndTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time..</param>
        /// <param name="SortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default)..</param>
        /// <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information..</param>
        /// <param name="LocationId">ID of location associated with payment.</param>
        /// <param name="Total">The exact amount in the total_money for a &#x60;Payment&#x60;..</param>
        /// <param name="Last4">The last 4 digits of &#x60;Payment&#x60; card..</param>
        /// <param name="CardBrand">The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60;.</param>
        public ListPaymentsRequest(string BeginTime = default(string), string EndTime = default(string), string SortOrder = default(string), string Cursor = default(string), string LocationId = default(string), long? Total = default(long?), string Last4 = default(string), string CardBrand = default(string))
        {
            this.BeginTime = BeginTime;
            this.EndTime = EndTime;
            this.SortOrder = SortOrder;
            this.Cursor = Cursor;
            this.LocationId = LocationId;
            this.Total = Total;
            this.Last4 = Last4;
            this.CardBrand = CardBrand;
        }
        
        /// <summary>
        /// Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
        /// </summary>
        /// <value>Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.</value>
        [DataMember(Name="begin_time", EmitDefaultValue=false)]
        public string BeginTime { get; set; }
        /// <summary>
        /// Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
        /// </summary>
        /// <value>Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public string EndTime { get; set; }
        /// <summary>
        /// The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default).
        /// </summary>
        /// <value>The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default).</value>
        [DataMember(Name="sort_order", EmitDefaultValue=false)]
        public string SortOrder { get; set; }
        /// <summary>
        /// A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
        /// </summary>
        /// <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.</value>
        [DataMember(Name="cursor", EmitDefaultValue=false)]
        public string Cursor { get; set; }
        /// <summary>
        /// ID of location associated with payment
        /// </summary>
        /// <value>ID of location associated with payment</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public string LocationId { get; set; }
        /// <summary>
        /// The exact amount in the total_money for a &#x60;Payment&#x60;.
        /// </summary>
        /// <value>The exact amount in the total_money for a &#x60;Payment&#x60;.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public long? Total { get; set; }
        /// <summary>
        /// The last 4 digits of &#x60;Payment&#x60; card.
        /// </summary>
        /// <value>The last 4 digits of &#x60;Payment&#x60; card.</value>
        [DataMember(Name="last_4", EmitDefaultValue=false)]
        public string Last4 { get; set; }
        /// <summary>
        /// The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60;
        /// </summary>
        /// <value>The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60;</value>
        [DataMember(Name="card_brand", EmitDefaultValue=false)]
        public string CardBrand { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListPaymentsRequest {\n");
            sb.Append("  BeginTime: ").Append(BeginTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Last4: ").Append(Last4).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ListPaymentsRequest);
        }

        /// <summary>
        /// Returns true if ListPaymentsRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ListPaymentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListPaymentsRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BeginTime == other.BeginTime ||
                    this.BeginTime != null &&
                    this.BeginTime.Equals(other.BeginTime)
                ) && 
                (
                    this.EndTime == other.EndTime ||
                    this.EndTime != null &&
                    this.EndTime.Equals(other.EndTime)
                ) && 
                (
                    this.SortOrder == other.SortOrder ||
                    this.SortOrder != null &&
                    this.SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    this.Cursor == other.Cursor ||
                    this.Cursor != null &&
                    this.Cursor.Equals(other.Cursor)
                ) && 
                (
                    this.LocationId == other.LocationId ||
                    this.LocationId != null &&
                    this.LocationId.Equals(other.LocationId)
                ) && 
                (
                    this.Total == other.Total ||
                    this.Total != null &&
                    this.Total.Equals(other.Total)
                ) && 
                (
                    this.Last4 == other.Last4 ||
                    this.Last4 != null &&
                    this.Last4.Equals(other.Last4)
                ) && 
                (
                    this.CardBrand == other.CardBrand ||
                    this.CardBrand != null &&
                    this.CardBrand.Equals(other.CardBrand)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BeginTime != null)
                    hash = hash * 59 + this.BeginTime.GetHashCode();
                if (this.EndTime != null)
                    hash = hash * 59 + this.EndTime.GetHashCode();
                if (this.SortOrder != null)
                    hash = hash * 59 + this.SortOrder.GetHashCode();
                if (this.Cursor != null)
                    hash = hash * 59 + this.Cursor.GetHashCode();
                if (this.LocationId != null)
                    hash = hash * 59 + this.LocationId.GetHashCode();
                if (this.Total != null)
                    hash = hash * 59 + this.Total.GetHashCode();
                if (this.Last4 != null)
                    hash = hash * 59 + this.Last4.GetHashCode();
                if (this.CardBrand != null)
                    hash = hash * 59 + this.CardBrand.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Total (long?) minimum
            if(this.Total < (long?)0)
            {
                yield return new ValidationResult("Invalid value for Total, must be a value greater than or equal to 0.", new [] { "Total" });
            }

            yield break;
        }
    }

}
