/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// A query to be applied to a [SearchCatalogObjectsRequest](#type-searchcatalogobjectsrequest). Only one query field may be present.  Where an attribute name is required, it should be specified as the name of any field marked \&quot;searchable\&quot; from the structured data types for the desired result object type(s) ([CatalogItem](#type-catalogitem), [CatalogItemVariation](#type-catalogitemvariation), [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax), [CatalogDiscount](#type-catalogdiscount), [CatalogModifierList](#type-catalogmodifierlist), [CatalogModifier](#type-catalogmodifier)).  For example, a query that should return Items may specify attribute names from any of the searchable fields of the [CatalogItem](#type-catalogitem) data type, namely &#x60;\&quot;name\&quot;&#x60;, &#x60;\&quot;description\&quot;&#x60;, and &#x60;\&quot;abbreviation\&quot;&#x60;.
    /// </summary>
    [DataContract]
    public partial class CatalogQuery :  IEquatable<CatalogQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogQuery" /> class.
        /// </summary>
        /// <param name="SortedAttributeQuery">A query that returns all objects, sorted by the given attribute..</param>
        /// <param name="ExactQuery">A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive value..</param>
        /// <param name="PrefixQuery">A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive prefix..</param>
        /// <param name="RangeQuery">A query that returns only objects for which the given (integer-valued) attribute lies in the given range..</param>
        /// <param name="TextQuery">A query that returns only objects whose searchable attributes contain all of the given keywords as prefixes. For example, if a &#x60;CatalogItem&#x60; contains attributes &#x60;{\&quot;name\&quot;: \&quot;t-shirt\&quot;}&#x60; and &#x60;{\&quot;description\&quot;: \&quot;Small, Purple\&quot;}&#x60;, it will be matched by the query &#x60;{\&quot;keywords\&quot;: [\&quot;shirt\&quot;, \&quot;sma\&quot;, \&quot;purp\&quot;]}&#x60;..</param>
        /// <param name="ItemsForTaxQuery">A query that returns all &#x60;CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax&#x60;es enabled..</param>
        /// <param name="ItemsForModifierListQuery">A query that returns all &#x60;CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList&#x60;s enabled..</param>
        /// <param name="ItemsForItemOptionsQuery">A query that returns all &#x60;CatalogItem](#type-catalogitem)s that have all of the given [CatalogItemOption&#x60;s..</param>
        /// <param name="ItemVariationsForItemOptionValuesQuery">A query that returns all &#x60;CatalogItemVariation](#type-catalogitemvariations)s that have all of the given [CatalogItemOption&#x60; values..</param>
        public CatalogQuery(CatalogQuerySortedAttribute SortedAttributeQuery = default(CatalogQuerySortedAttribute), CatalogQueryExact ExactQuery = default(CatalogQueryExact), CatalogQueryPrefix PrefixQuery = default(CatalogQueryPrefix), CatalogQueryRange RangeQuery = default(CatalogQueryRange), CatalogQueryText TextQuery = default(CatalogQueryText), CatalogQueryItemsForTax ItemsForTaxQuery = default(CatalogQueryItemsForTax), CatalogQueryItemsForModifierList ItemsForModifierListQuery = default(CatalogQueryItemsForModifierList), CatalogQueryItemsForItemOptions ItemsForItemOptionsQuery = default(CatalogQueryItemsForItemOptions), CatalogQueryItemVariationsForItemOptionValues ItemVariationsForItemOptionValuesQuery = default(CatalogQueryItemVariationsForItemOptionValues))
        {
            this.SortedAttributeQuery = SortedAttributeQuery;
            this.ExactQuery = ExactQuery;
            this.PrefixQuery = PrefixQuery;
            this.RangeQuery = RangeQuery;
            this.TextQuery = TextQuery;
            this.ItemsForTaxQuery = ItemsForTaxQuery;
            this.ItemsForModifierListQuery = ItemsForModifierListQuery;
            this.ItemsForItemOptionsQuery = ItemsForItemOptionsQuery;
            this.ItemVariationsForItemOptionValuesQuery = ItemVariationsForItemOptionValuesQuery;
        }
        
        /// <summary>
        /// A query that returns all objects, sorted by the given attribute.
        /// </summary>
        /// <value>A query that returns all objects, sorted by the given attribute.</value>
        [DataMember(Name="sorted_attribute_query", EmitDefaultValue=false)]
        public CatalogQuerySortedAttribute SortedAttributeQuery { get; set; }
        /// <summary>
        /// A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive value.
        /// </summary>
        /// <value>A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive value.</value>
        [DataMember(Name="exact_query", EmitDefaultValue=false)]
        public CatalogQueryExact ExactQuery { get; set; }
        /// <summary>
        /// A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive prefix.
        /// </summary>
        /// <value>A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive prefix.</value>
        [DataMember(Name="prefix_query", EmitDefaultValue=false)]
        public CatalogQueryPrefix PrefixQuery { get; set; }
        /// <summary>
        /// A query that returns only objects for which the given (integer-valued) attribute lies in the given range.
        /// </summary>
        /// <value>A query that returns only objects for which the given (integer-valued) attribute lies in the given range.</value>
        [DataMember(Name="range_query", EmitDefaultValue=false)]
        public CatalogQueryRange RangeQuery { get; set; }
        /// <summary>
        /// A query that returns only objects whose searchable attributes contain all of the given keywords as prefixes. For example, if a &#x60;CatalogItem&#x60; contains attributes &#x60;{\&quot;name\&quot;: \&quot;t-shirt\&quot;}&#x60; and &#x60;{\&quot;description\&quot;: \&quot;Small, Purple\&quot;}&#x60;, it will be matched by the query &#x60;{\&quot;keywords\&quot;: [\&quot;shirt\&quot;, \&quot;sma\&quot;, \&quot;purp\&quot;]}&#x60;.
        /// </summary>
        /// <value>A query that returns only objects whose searchable attributes contain all of the given keywords as prefixes. For example, if a &#x60;CatalogItem&#x60; contains attributes &#x60;{\&quot;name\&quot;: \&quot;t-shirt\&quot;}&#x60; and &#x60;{\&quot;description\&quot;: \&quot;Small, Purple\&quot;}&#x60;, it will be matched by the query &#x60;{\&quot;keywords\&quot;: [\&quot;shirt\&quot;, \&quot;sma\&quot;, \&quot;purp\&quot;]}&#x60;.</value>
        [DataMember(Name="text_query", EmitDefaultValue=false)]
        public CatalogQueryText TextQuery { get; set; }
        /// <summary>
        /// A query that returns all &#x60;CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax&#x60;es enabled.
        /// </summary>
        /// <value>A query that returns all &#x60;CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax&#x60;es enabled.</value>
        [DataMember(Name="items_for_tax_query", EmitDefaultValue=false)]
        public CatalogQueryItemsForTax ItemsForTaxQuery { get; set; }
        /// <summary>
        /// A query that returns all &#x60;CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList&#x60;s enabled.
        /// </summary>
        /// <value>A query that returns all &#x60;CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList&#x60;s enabled.</value>
        [DataMember(Name="items_for_modifier_list_query", EmitDefaultValue=false)]
        public CatalogQueryItemsForModifierList ItemsForModifierListQuery { get; set; }
        /// <summary>
        /// A query that returns all &#x60;CatalogItem](#type-catalogitem)s that have all of the given [CatalogItemOption&#x60;s.
        /// </summary>
        /// <value>A query that returns all &#x60;CatalogItem](#type-catalogitem)s that have all of the given [CatalogItemOption&#x60;s.</value>
        [DataMember(Name="items_for_item_options_query", EmitDefaultValue=false)]
        public CatalogQueryItemsForItemOptions ItemsForItemOptionsQuery { get; set; }
        /// <summary>
        /// A query that returns all &#x60;CatalogItemVariation](#type-catalogitemvariations)s that have all of the given [CatalogItemOption&#x60; values.
        /// </summary>
        /// <value>A query that returns all &#x60;CatalogItemVariation](#type-catalogitemvariations)s that have all of the given [CatalogItemOption&#x60; values.</value>
        [DataMember(Name="item_variations_for_item_option_values_query", EmitDefaultValue=false)]
        public CatalogQueryItemVariationsForItemOptionValues ItemVariationsForItemOptionValuesQuery { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogQuery {\n");
            sb.Append("  SortedAttributeQuery: ").Append(SortedAttributeQuery).Append("\n");
            sb.Append("  ExactQuery: ").Append(ExactQuery).Append("\n");
            sb.Append("  PrefixQuery: ").Append(PrefixQuery).Append("\n");
            sb.Append("  RangeQuery: ").Append(RangeQuery).Append("\n");
            sb.Append("  TextQuery: ").Append(TextQuery).Append("\n");
            sb.Append("  ItemsForTaxQuery: ").Append(ItemsForTaxQuery).Append("\n");
            sb.Append("  ItemsForModifierListQuery: ").Append(ItemsForModifierListQuery).Append("\n");
            sb.Append("  ItemsForItemOptionsQuery: ").Append(ItemsForItemOptionsQuery).Append("\n");
            sb.Append("  ItemVariationsForItemOptionValuesQuery: ").Append(ItemVariationsForItemOptionValuesQuery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogQuery);
        }

        /// <summary>
        /// Returns true if CatalogQuery instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogQuery other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SortedAttributeQuery == other.SortedAttributeQuery ||
                    this.SortedAttributeQuery != null &&
                    this.SortedAttributeQuery.Equals(other.SortedAttributeQuery)
                ) && 
                (
                    this.ExactQuery == other.ExactQuery ||
                    this.ExactQuery != null &&
                    this.ExactQuery.Equals(other.ExactQuery)
                ) && 
                (
                    this.PrefixQuery == other.PrefixQuery ||
                    this.PrefixQuery != null &&
                    this.PrefixQuery.Equals(other.PrefixQuery)
                ) && 
                (
                    this.RangeQuery == other.RangeQuery ||
                    this.RangeQuery != null &&
                    this.RangeQuery.Equals(other.RangeQuery)
                ) && 
                (
                    this.TextQuery == other.TextQuery ||
                    this.TextQuery != null &&
                    this.TextQuery.Equals(other.TextQuery)
                ) && 
                (
                    this.ItemsForTaxQuery == other.ItemsForTaxQuery ||
                    this.ItemsForTaxQuery != null &&
                    this.ItemsForTaxQuery.Equals(other.ItemsForTaxQuery)
                ) && 
                (
                    this.ItemsForModifierListQuery == other.ItemsForModifierListQuery ||
                    this.ItemsForModifierListQuery != null &&
                    this.ItemsForModifierListQuery.Equals(other.ItemsForModifierListQuery)
                ) && 
                (
                    this.ItemsForItemOptionsQuery == other.ItemsForItemOptionsQuery ||
                    this.ItemsForItemOptionsQuery != null &&
                    this.ItemsForItemOptionsQuery.Equals(other.ItemsForItemOptionsQuery)
                ) && 
                (
                    this.ItemVariationsForItemOptionValuesQuery == other.ItemVariationsForItemOptionValuesQuery ||
                    this.ItemVariationsForItemOptionValuesQuery != null &&
                    this.ItemVariationsForItemOptionValuesQuery.Equals(other.ItemVariationsForItemOptionValuesQuery)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SortedAttributeQuery != null)
                    hash = hash * 59 + this.SortedAttributeQuery.GetHashCode();
                if (this.ExactQuery != null)
                    hash = hash * 59 + this.ExactQuery.GetHashCode();
                if (this.PrefixQuery != null)
                    hash = hash * 59 + this.PrefixQuery.GetHashCode();
                if (this.RangeQuery != null)
                    hash = hash * 59 + this.RangeQuery.GetHashCode();
                if (this.TextQuery != null)
                    hash = hash * 59 + this.TextQuery.GetHashCode();
                if (this.ItemsForTaxQuery != null)
                    hash = hash * 59 + this.ItemsForTaxQuery.GetHashCode();
                if (this.ItemsForModifierListQuery != null)
                    hash = hash * 59 + this.ItemsForModifierListQuery.GetHashCode();
                if (this.ItemsForItemOptionsQuery != null)
                    hash = hash * 59 + this.ItemsForItemOptionsQuery.GetHashCode();
                if (this.ItemVariationsForItemOptionValuesQuery != null)
                    hash = hash * 59 + this.ItemVariationsForItemOptionValuesQuery.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
