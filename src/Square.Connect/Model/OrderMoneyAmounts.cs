/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// A collection of various money amounts.
    /// Note: This endpoint is in beta.
    /// </summary>
    [DataContract]
    public partial class OrderMoneyAmounts :  IEquatable<OrderMoneyAmounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderMoneyAmounts" /> class.
        /// </summary>
        /// <param name="TotalMoney">Total money..</param>
        /// <param name="TaxMoney">Money associated with taxes..</param>
        /// <param name="DiscountMoney">Money associated with discounts..</param>
        /// <param name="TipMoney">Money associated with tips..</param>
        /// <param name="ServiceChargeMoney">Money associated with service charges..</param>
        public OrderMoneyAmounts(Money TotalMoney = default(Money), Money TaxMoney = default(Money), Money DiscountMoney = default(Money), Money TipMoney = default(Money), Money ServiceChargeMoney = default(Money))
        {
            this.TotalMoney = TotalMoney;
            this.TaxMoney = TaxMoney;
            this.DiscountMoney = DiscountMoney;
            this.TipMoney = TipMoney;
            this.ServiceChargeMoney = ServiceChargeMoney;
        }
        
        /// <summary>
        /// Total money.
        /// </summary>
        /// <value>Total money.</value>
        [DataMember(Name="total_money", EmitDefaultValue=false)]
        public Money TotalMoney { get; set; }
        /// <summary>
        /// Money associated with taxes.
        /// </summary>
        /// <value>Money associated with taxes.</value>
        [DataMember(Name="tax_money", EmitDefaultValue=false)]
        public Money TaxMoney { get; set; }
        /// <summary>
        /// Money associated with discounts.
        /// </summary>
        /// <value>Money associated with discounts.</value>
        [DataMember(Name="discount_money", EmitDefaultValue=false)]
        public Money DiscountMoney { get; set; }
        /// <summary>
        /// Money associated with tips.
        /// </summary>
        /// <value>Money associated with tips.</value>
        [DataMember(Name="tip_money", EmitDefaultValue=false)]
        public Money TipMoney { get; set; }
        /// <summary>
        /// Money associated with service charges.
        /// </summary>
        /// <value>Money associated with service charges.</value>
        [DataMember(Name="service_charge_money", EmitDefaultValue=false)]
        public Money ServiceChargeMoney { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderMoneyAmounts {\n");
            sb.Append("  TotalMoney: ").Append(TotalMoney).Append("\n");
            sb.Append("  TaxMoney: ").Append(TaxMoney).Append("\n");
            sb.Append("  DiscountMoney: ").Append(DiscountMoney).Append("\n");
            sb.Append("  TipMoney: ").Append(TipMoney).Append("\n");
            sb.Append("  ServiceChargeMoney: ").Append(ServiceChargeMoney).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderMoneyAmounts);
        }

        /// <summary>
        /// Returns true if OrderMoneyAmounts instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderMoneyAmounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderMoneyAmounts other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TotalMoney == other.TotalMoney ||
                    this.TotalMoney != null &&
                    this.TotalMoney.Equals(other.TotalMoney)
                ) && 
                (
                    this.TaxMoney == other.TaxMoney ||
                    this.TaxMoney != null &&
                    this.TaxMoney.Equals(other.TaxMoney)
                ) && 
                (
                    this.DiscountMoney == other.DiscountMoney ||
                    this.DiscountMoney != null &&
                    this.DiscountMoney.Equals(other.DiscountMoney)
                ) && 
                (
                    this.TipMoney == other.TipMoney ||
                    this.TipMoney != null &&
                    this.TipMoney.Equals(other.TipMoney)
                ) && 
                (
                    this.ServiceChargeMoney == other.ServiceChargeMoney ||
                    this.ServiceChargeMoney != null &&
                    this.ServiceChargeMoney.Equals(other.ServiceChargeMoney)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TotalMoney != null)
                    hash = hash * 59 + this.TotalMoney.GetHashCode();
                if (this.TaxMoney != null)
                    hash = hash * 59 + this.TaxMoney.GetHashCode();
                if (this.DiscountMoney != null)
                    hash = hash * 59 + this.DiscountMoney.GetHashCode();
                if (this.TipMoney != null)
                    hash = hash * 59 + this.TipMoney.GetHashCode();
                if (this.ServiceChargeMoney != null)
                    hash = hash * 59 + this.ServiceChargeMoney.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
