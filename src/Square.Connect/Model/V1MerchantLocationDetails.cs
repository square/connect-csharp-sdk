/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Additional information for a single-location account specified by its associated business account, if it has one.
    /// </summary>
    [DataContract]
    [Obsolete]
    public partial class V1MerchantLocationDetails :  IEquatable<V1MerchantLocationDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1MerchantLocationDetails" /> class.
        /// </summary>
        /// <param name="Nickname">The nickname assigned to the single-location account by the parent business. This value appears in the parent business&#39;s multi-location dashboard..</param>
        public V1MerchantLocationDetails(string Nickname = default(string))
        {
            this.Nickname = Nickname;
        }
        
        /// <summary>
        /// The nickname assigned to the single-location account by the parent business. This value appears in the parent business&#39;s multi-location dashboard.
        /// </summary>
        /// <value>The nickname assigned to the single-location account by the parent business. This value appears in the parent business&#39;s multi-location dashboard.</value>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1MerchantLocationDetails {\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1MerchantLocationDetails);
        }

        /// <summary>
        /// Returns true if V1MerchantLocationDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of V1MerchantLocationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1MerchantLocationDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Nickname == other.Nickname ||
                    this.Nickname != null &&
                    this.Nickname.Equals(other.Nickname)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Nickname != null)
                    hash = hash * 59 + this.Nickname.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
