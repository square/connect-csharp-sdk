/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// A tax in the Catalog object model.
    /// </summary>
    [DataContract]
    public partial class CatalogTax :  IEquatable<CatalogTax>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogTax" /> class.
        /// </summary>
        /// <param name="Name">The tax&#39;s name. Searchable. This field has max length of 255 Unicode code points..</param>
        /// <param name="CalculationPhase">Whether the tax is calculated based on a payment&#39;s subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for possible values.</param>
        /// <param name="InclusionType">Whether the tax is &#x60;ADDITIVE&#x60; or &#x60;INCLUSIVE&#x60;. See [TaxInclusionType](#type-taxinclusiontype) for possible values.</param>
        /// <param name="Percentage">The percentage of the tax in decimal form, using a &#x60;&#39;.&#39;&#x60; as the decimal separator and without a &#x60;&#39;%&#39;&#x60; sign. A value of &#x60;7.5&#x60; corresponds to 7.5%..</param>
        /// <param name="AppliesToCustomAmounts">If &#x60;true&#x60;, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular &#x60;CatalogItem&#x60;..</param>
        /// <param name="Enabled">If &#x60;true&#x60;, the tax will be shown as enabled in the Square Point of Sale app..</param>
        public CatalogTax(string Name = default(string), string CalculationPhase = default(string), string InclusionType = default(string), string Percentage = default(string), bool? AppliesToCustomAmounts = default(bool?), bool? Enabled = default(bool?))
        {
            this.Name = Name;
            this.CalculationPhase = CalculationPhase;
            this.InclusionType = InclusionType;
            this.Percentage = Percentage;
            this.AppliesToCustomAmounts = AppliesToCustomAmounts;
            this.Enabled = Enabled;
        }
        
        /// <summary>
        /// The tax&#39;s name. Searchable. This field has max length of 255 Unicode code points.
        /// </summary>
        /// <value>The tax&#39;s name. Searchable. This field has max length of 255 Unicode code points.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Whether the tax is calculated based on a payment&#39;s subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for possible values
        /// </summary>
        /// <value>Whether the tax is calculated based on a payment&#39;s subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for possible values</value>
        [DataMember(Name="calculation_phase", EmitDefaultValue=false)]
        public string CalculationPhase { get; set; }
        /// <summary>
        /// Whether the tax is &#x60;ADDITIVE&#x60; or &#x60;INCLUSIVE&#x60;. See [TaxInclusionType](#type-taxinclusiontype) for possible values
        /// </summary>
        /// <value>Whether the tax is &#x60;ADDITIVE&#x60; or &#x60;INCLUSIVE&#x60;. See [TaxInclusionType](#type-taxinclusiontype) for possible values</value>
        [DataMember(Name="inclusion_type", EmitDefaultValue=false)]
        public string InclusionType { get; set; }
        /// <summary>
        /// The percentage of the tax in decimal form, using a &#x60;&#39;.&#39;&#x60; as the decimal separator and without a &#x60;&#39;%&#39;&#x60; sign. A value of &#x60;7.5&#x60; corresponds to 7.5%.
        /// </summary>
        /// <value>The percentage of the tax in decimal form, using a &#x60;&#39;.&#39;&#x60; as the decimal separator and without a &#x60;&#39;%&#39;&#x60; sign. A value of &#x60;7.5&#x60; corresponds to 7.5%.</value>
        [DataMember(Name="percentage", EmitDefaultValue=false)]
        public string Percentage { get; set; }
        /// <summary>
        /// If &#x60;true&#x60;, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular &#x60;CatalogItem&#x60;.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular &#x60;CatalogItem&#x60;.</value>
        [DataMember(Name="applies_to_custom_amounts", EmitDefaultValue=false)]
        public bool? AppliesToCustomAmounts { get; set; }
        /// <summary>
        /// If &#x60;true&#x60;, the tax will be shown as enabled in the Square Point of Sale app.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the tax will be shown as enabled in the Square Point of Sale app.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogTax {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CalculationPhase: ").Append(CalculationPhase).Append("\n");
            sb.Append("  InclusionType: ").Append(InclusionType).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  AppliesToCustomAmounts: ").Append(AppliesToCustomAmounts).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogTax);
        }

        /// <summary>
        /// Returns true if CatalogTax instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogTax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogTax other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CalculationPhase == other.CalculationPhase ||
                    this.CalculationPhase != null &&
                    this.CalculationPhase.Equals(other.CalculationPhase)
                ) && 
                (
                    this.InclusionType == other.InclusionType ||
                    this.InclusionType != null &&
                    this.InclusionType.Equals(other.InclusionType)
                ) && 
                (
                    this.Percentage == other.Percentage ||
                    this.Percentage != null &&
                    this.Percentage.Equals(other.Percentage)
                ) && 
                (
                    this.AppliesToCustomAmounts == other.AppliesToCustomAmounts ||
                    this.AppliesToCustomAmounts != null &&
                    this.AppliesToCustomAmounts.Equals(other.AppliesToCustomAmounts)
                ) && 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CalculationPhase != null)
                    hash = hash * 59 + this.CalculationPhase.GetHashCode();
                if (this.InclusionType != null)
                    hash = hash * 59 + this.InclusionType.GetHashCode();
                if (this.Percentage != null)
                    hash = hash * 59 + this.Percentage.GetHashCode();
                if (this.AppliesToCustomAmounts != null)
                    hash = hash * 59 + this.AppliesToCustomAmounts.GetHashCode();
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
