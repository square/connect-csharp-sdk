/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents an applied portion of a tax to a line item in an order.  Order-scoped taxes automatically include the applied taxes in each line item. Line item taxes must be referenced from any applicable line items. The corresponding applied money is automatically computed, based on the set of participating line items.
    /// Note: This endpoint is in beta.
    /// </summary>
    [DataContract]
    public partial class OrderLineItemAppliedTax :  IEquatable<OrderLineItemAppliedTax>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItemAppliedTax" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderLineItemAppliedTax() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItemAppliedTax" /> class.
        /// </summary>
        /// <param name="Uid">Unique ID that identifies the applied tax only within this order..</param>
        /// <param name="TaxUid">The &#x60;uid&#x60; of the tax for which this applied tax represents.  Must reference a tax present in the &#x60;order.taxes&#x60; field.  This field is immutable. To change which taxes apply to a line item, delete and add new &#x60;OrderLineItemAppliedTax&#x60;s. (required).</param>
        /// <param name="AppliedMoney">The amount of money applied by the tax to the line item..</param>
        public OrderLineItemAppliedTax(string Uid = default(string), string TaxUid = default(string), Money AppliedMoney = default(Money))
        {
            // to ensure "TaxUid" is required (not null)
            if (TaxUid == null)
            {
                throw new InvalidDataException("TaxUid is a required property for OrderLineItemAppliedTax and cannot be null");
            }
            else
            {
                this.TaxUid = TaxUid;
            }
            this.Uid = Uid;
            this.AppliedMoney = AppliedMoney;
        }
        
        /// <summary>
        /// Unique ID that identifies the applied tax only within this order.
        /// </summary>
        /// <value>Unique ID that identifies the applied tax only within this order.</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }
        /// <summary>
        /// The &#x60;uid&#x60; of the tax for which this applied tax represents.  Must reference a tax present in the &#x60;order.taxes&#x60; field.  This field is immutable. To change which taxes apply to a line item, delete and add new &#x60;OrderLineItemAppliedTax&#x60;s.
        /// </summary>
        /// <value>The &#x60;uid&#x60; of the tax for which this applied tax represents.  Must reference a tax present in the &#x60;order.taxes&#x60; field.  This field is immutable. To change which taxes apply to a line item, delete and add new &#x60;OrderLineItemAppliedTax&#x60;s.</value>
        [DataMember(Name="tax_uid", EmitDefaultValue=false)]
        public string TaxUid { get; set; }
        /// <summary>
        /// The amount of money applied by the tax to the line item.
        /// </summary>
        /// <value>The amount of money applied by the tax to the line item.</value>
        [DataMember(Name="applied_money", EmitDefaultValue=false)]
        public Money AppliedMoney { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLineItemAppliedTax {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  TaxUid: ").Append(TaxUid).Append("\n");
            sb.Append("  AppliedMoney: ").Append(AppliedMoney).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderLineItemAppliedTax);
        }

        /// <summary>
        /// Returns true if OrderLineItemAppliedTax instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderLineItemAppliedTax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineItemAppliedTax other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uid == other.Uid ||
                    this.Uid != null &&
                    this.Uid.Equals(other.Uid)
                ) && 
                (
                    this.TaxUid == other.TaxUid ||
                    this.TaxUid != null &&
                    this.TaxUid.Equals(other.TaxUid)
                ) && 
                (
                    this.AppliedMoney == other.AppliedMoney ||
                    this.AppliedMoney != null &&
                    this.AppliedMoney.Equals(other.AppliedMoney)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uid != null)
                    hash = hash * 59 + this.Uid.GetHashCode();
                if (this.TaxUid != null)
                    hash = hash * 59 + this.TaxUid.GetHashCode();
                if (this.AppliedMoney != null)
                    hash = hash * 59 + this.AppliedMoney.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Uid (string) maxLength
            if(this.Uid != null && this.Uid.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Uid, length must be less than 60.", new [] { "Uid" });
            }

            // TaxUid (string) maxLength
            if(this.TaxUid != null && this.TaxUid.Length > 60)
            {
                yield return new ValidationResult("Invalid value for TaxUid, length must be less than 60.", new [] { "TaxUid" });
            }

            // TaxUid (string) minLength
            if(this.TaxUid != null && this.TaxUid.Length < 1)
            {
                yield return new ValidationResult("Invalid value for TaxUid, length must be greater than 1.", new [] { "TaxUid" });
            }

            yield break;
        }
    }

}
