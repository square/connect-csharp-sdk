/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Square.Connect.Client;
using Square.Connect.Model;

namespace Square.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// BatchChangeInventory
        /// </summary>
        /// <remarks>
        /// Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>BatchChangeInventoryResponse</returns>        BatchChangeInventoryResponse BatchChangeInventory (BatchChangeInventoryRequest body);

        /// <summary>
        /// BatchChangeInventory
        /// </summary>
        /// <remarks>
        /// Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of BatchChangeInventoryResponse</returns>
        ApiResponse<BatchChangeInventoryResponse> BatchChangeInventoryWithHttpInfo (BatchChangeInventoryRequest body);
        /// <summary>
        /// BatchRetrieveInventoryChanges
        /// </summary>
        /// <remarks>
        /// Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>BatchRetrieveInventoryChangesResponse</returns>        BatchRetrieveInventoryChangesResponse BatchRetrieveInventoryChanges (BatchRetrieveInventoryChangesRequest body);

        /// <summary>
        /// BatchRetrieveInventoryChanges
        /// </summary>
        /// <remarks>
        /// Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of BatchRetrieveInventoryChangesResponse</returns>
        ApiResponse<BatchRetrieveInventoryChangesResponse> BatchRetrieveInventoryChangesWithHttpInfo (BatchRetrieveInventoryChangesRequest body);
        /// <summary>
        /// BatchRetrieveInventoryCounts
        /// </summary>
        /// <remarks>
        /// Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>BatchRetrieveInventoryCountsResponse</returns>        BatchRetrieveInventoryCountsResponse BatchRetrieveInventoryCounts (BatchRetrieveInventoryCountsRequest body);

        /// <summary>
        /// BatchRetrieveInventoryCounts
        /// </summary>
        /// <remarks>
        /// Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of BatchRetrieveInventoryCountsResponse</returns>
        ApiResponse<BatchRetrieveInventoryCountsResponse> BatchRetrieveInventoryCountsWithHttpInfo (BatchRetrieveInventoryCountsRequest body);
        /// <summary>
        /// RetrieveInventoryAdjustment
        /// </summary>
        /// <remarks>
        /// Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adjustmentId">ID of the &#x60;InventoryAdjustment&#x60; to retrieve.</param>
        /// <returns>RetrieveInventoryAdjustmentResponse</returns>        RetrieveInventoryAdjustmentResponse RetrieveInventoryAdjustment (string adjustmentId);

        /// <summary>
        /// RetrieveInventoryAdjustment
        /// </summary>
        /// <remarks>
        /// Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adjustmentId">ID of the &#x60;InventoryAdjustment&#x60; to retrieve.</param>
        /// <returns>ApiResponse of RetrieveInventoryAdjustmentResponse</returns>
        ApiResponse<RetrieveInventoryAdjustmentResponse> RetrieveInventoryAdjustmentWithHttpInfo (string adjustmentId);
        /// <summary>
        /// RetrieveInventoryChanges
        /// </summary>
        /// <remarks>
        /// Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>RetrieveInventoryChangesResponse</returns>        RetrieveInventoryChangesResponse RetrieveInventoryChanges (string catalogObjectId, string locationIds = null, string cursor = null);

        /// <summary>
        /// RetrieveInventoryChanges
        /// </summary>
        /// <remarks>
        /// Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>ApiResponse of RetrieveInventoryChangesResponse</returns>
        ApiResponse<RetrieveInventoryChangesResponse> RetrieveInventoryChangesWithHttpInfo (string catalogObjectId, string locationIds = null, string cursor = null);
        /// <summary>
        /// RetrieveInventoryCount
        /// </summary>
        /// <remarks>
        /// Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>RetrieveInventoryCountResponse</returns>        RetrieveInventoryCountResponse RetrieveInventoryCount (string catalogObjectId, string locationIds = null, string cursor = null);

        /// <summary>
        /// RetrieveInventoryCount
        /// </summary>
        /// <remarks>
        /// Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>ApiResponse of RetrieveInventoryCountResponse</returns>
        ApiResponse<RetrieveInventoryCountResponse> RetrieveInventoryCountWithHttpInfo (string catalogObjectId, string locationIds = null, string cursor = null);
        /// <summary>
        /// RetrieveInventoryPhysicalCount
        /// </summary>
        /// <remarks>
        /// Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="physicalCountId">ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.</param>
        /// <returns>RetrieveInventoryPhysicalCountResponse</returns>        RetrieveInventoryPhysicalCountResponse RetrieveInventoryPhysicalCount (string physicalCountId);

        /// <summary>
        /// RetrieveInventoryPhysicalCount
        /// </summary>
        /// <remarks>
        /// Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="physicalCountId">ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.</param>
        /// <returns>ApiResponse of RetrieveInventoryPhysicalCountResponse</returns>
        ApiResponse<RetrieveInventoryPhysicalCountResponse> RetrieveInventoryPhysicalCountWithHttpInfo (string physicalCountId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// BatchChangeInventory
        /// </summary>
        /// <remarks>
        /// Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of BatchChangeInventoryResponse</returns>
        System.Threading.Tasks.Task<BatchChangeInventoryResponse> BatchChangeInventoryAsync (BatchChangeInventoryRequest body);

        /// <summary>
        /// BatchChangeInventory
        /// </summary>
        /// <remarks>
        /// Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (BatchChangeInventoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchChangeInventoryResponse>> BatchChangeInventoryAsyncWithHttpInfo (BatchChangeInventoryRequest body);
        /// <summary>
        /// BatchRetrieveInventoryChanges
        /// </summary>
        /// <remarks>
        /// Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of BatchRetrieveInventoryChangesResponse</returns>
        System.Threading.Tasks.Task<BatchRetrieveInventoryChangesResponse> BatchRetrieveInventoryChangesAsync (BatchRetrieveInventoryChangesRequest body);

        /// <summary>
        /// BatchRetrieveInventoryChanges
        /// </summary>
        /// <remarks>
        /// Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (BatchRetrieveInventoryChangesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchRetrieveInventoryChangesResponse>> BatchRetrieveInventoryChangesAsyncWithHttpInfo (BatchRetrieveInventoryChangesRequest body);
        /// <summary>
        /// BatchRetrieveInventoryCounts
        /// </summary>
        /// <remarks>
        /// Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of BatchRetrieveInventoryCountsResponse</returns>
        System.Threading.Tasks.Task<BatchRetrieveInventoryCountsResponse> BatchRetrieveInventoryCountsAsync (BatchRetrieveInventoryCountsRequest body);

        /// <summary>
        /// BatchRetrieveInventoryCounts
        /// </summary>
        /// <remarks>
        /// Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (BatchRetrieveInventoryCountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchRetrieveInventoryCountsResponse>> BatchRetrieveInventoryCountsAsyncWithHttpInfo (BatchRetrieveInventoryCountsRequest body);
        /// <summary>
        /// RetrieveInventoryAdjustment
        /// </summary>
        /// <remarks>
        /// Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adjustmentId">ID of the &#x60;InventoryAdjustment&#x60; to retrieve.</param>
        /// <returns>Task of RetrieveInventoryAdjustmentResponse</returns>
        System.Threading.Tasks.Task<RetrieveInventoryAdjustmentResponse> RetrieveInventoryAdjustmentAsync (string adjustmentId);

        /// <summary>
        /// RetrieveInventoryAdjustment
        /// </summary>
        /// <remarks>
        /// Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adjustmentId">ID of the &#x60;InventoryAdjustment&#x60; to retrieve.</param>
        /// <returns>Task of ApiResponse (RetrieveInventoryAdjustmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveInventoryAdjustmentResponse>> RetrieveInventoryAdjustmentAsyncWithHttpInfo (string adjustmentId);
        /// <summary>
        /// RetrieveInventoryChanges
        /// </summary>
        /// <remarks>
        /// Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>Task of RetrieveInventoryChangesResponse</returns>
        System.Threading.Tasks.Task<RetrieveInventoryChangesResponse> RetrieveInventoryChangesAsync (string catalogObjectId, string locationIds = null, string cursor = null);

        /// <summary>
        /// RetrieveInventoryChanges
        /// </summary>
        /// <remarks>
        /// Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveInventoryChangesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveInventoryChangesResponse>> RetrieveInventoryChangesAsyncWithHttpInfo (string catalogObjectId, string locationIds = null, string cursor = null);
        /// <summary>
        /// RetrieveInventoryCount
        /// </summary>
        /// <remarks>
        /// Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>Task of RetrieveInventoryCountResponse</returns>
        System.Threading.Tasks.Task<RetrieveInventoryCountResponse> RetrieveInventoryCountAsync (string catalogObjectId, string locationIds = null, string cursor = null);

        /// <summary>
        /// RetrieveInventoryCount
        /// </summary>
        /// <remarks>
        /// Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveInventoryCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveInventoryCountResponse>> RetrieveInventoryCountAsyncWithHttpInfo (string catalogObjectId, string locationIds = null, string cursor = null);
        /// <summary>
        /// RetrieveInventoryPhysicalCount
        /// </summary>
        /// <remarks>
        /// Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="physicalCountId">ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.</param>
        /// <returns>Task of RetrieveInventoryPhysicalCountResponse</returns>
        System.Threading.Tasks.Task<RetrieveInventoryPhysicalCountResponse> RetrieveInventoryPhysicalCountAsync (string physicalCountId);

        /// <summary>
        /// RetrieveInventoryPhysicalCount
        /// </summary>
        /// <remarks>
        /// Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="physicalCountId">ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.</param>
        /// <returns>Task of ApiResponse (RetrieveInventoryPhysicalCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveInventoryPhysicalCountResponse>> RetrieveInventoryPhysicalCountAsyncWithHttpInfo (string physicalCountId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InventoryApi : IInventoryApi
    {
        private Square.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InventoryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Square.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// BatchChangeInventory Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>BatchChangeInventoryResponse</returns>
        public BatchChangeInventoryResponse BatchChangeInventory (BatchChangeInventoryRequest body)
        {
             ApiResponse<BatchChangeInventoryResponse> localVarResponse = BatchChangeInventoryWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// BatchChangeInventory Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of BatchChangeInventoryResponse</returns>
        public ApiResponse< BatchChangeInventoryResponse > BatchChangeInventoryWithHttpInfo (BatchChangeInventoryRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->BatchChangeInventory");

            var localVarPath = "/v2/inventory/batch-change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchChangeInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchChangeInventoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (BatchChangeInventoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchChangeInventoryResponse)));
            
        }

        /// <summary>
        /// BatchChangeInventory Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of BatchChangeInventoryResponse</returns>
        public async System.Threading.Tasks.Task<BatchChangeInventoryResponse> BatchChangeInventoryAsync (BatchChangeInventoryRequest body)
        {
             ApiResponse<BatchChangeInventoryResponse> localVarResponse = await BatchChangeInventoryAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// BatchChangeInventory Applies adjustments and counts to the provided item quantities.  On success: returns the current calculated counts for all objects referenced in the request. On failure: returns a list of related errors.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (BatchChangeInventoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchChangeInventoryResponse>> BatchChangeInventoryAsyncWithHttpInfo (BatchChangeInventoryRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->BatchChangeInventory");

            var localVarPath = "/v2/inventory/batch-change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchChangeInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchChangeInventoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (BatchChangeInventoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchChangeInventoryResponse)));
            
        }

        /// <summary>
        /// BatchRetrieveInventoryChanges Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>BatchRetrieveInventoryChangesResponse</returns>
        public BatchRetrieveInventoryChangesResponse BatchRetrieveInventoryChanges (BatchRetrieveInventoryChangesRequest body)
        {
             ApiResponse<BatchRetrieveInventoryChangesResponse> localVarResponse = BatchRetrieveInventoryChangesWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// BatchRetrieveInventoryChanges Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of BatchRetrieveInventoryChangesResponse</returns>
        public ApiResponse< BatchRetrieveInventoryChangesResponse > BatchRetrieveInventoryChangesWithHttpInfo (BatchRetrieveInventoryChangesRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->BatchRetrieveInventoryChanges");

            var localVarPath = "/v2/inventory/batch-retrieve-changes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchRetrieveInventoryChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchRetrieveInventoryChangesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (BatchRetrieveInventoryChangesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchRetrieveInventoryChangesResponse)));
            
        }

        /// <summary>
        /// BatchRetrieveInventoryChanges Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of BatchRetrieveInventoryChangesResponse</returns>
        public async System.Threading.Tasks.Task<BatchRetrieveInventoryChangesResponse> BatchRetrieveInventoryChangesAsync (BatchRetrieveInventoryChangesRequest body)
        {
             ApiResponse<BatchRetrieveInventoryChangesResponse> localVarResponse = await BatchRetrieveInventoryChangesAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// BatchRetrieveInventoryChanges Returns historical physical counts and adjustments based on the provided filter criteria.  Results are paginated and sorted in ascending order according their &#x60;occurred_at&#x60; timestamp (oldest first).  BatchRetrieveInventoryChanges is a catch-all query endpoint for queries that cannot be handled by other, simpler endpoints.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (BatchRetrieveInventoryChangesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchRetrieveInventoryChangesResponse>> BatchRetrieveInventoryChangesAsyncWithHttpInfo (BatchRetrieveInventoryChangesRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->BatchRetrieveInventoryChanges");

            var localVarPath = "/v2/inventory/batch-retrieve-changes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchRetrieveInventoryChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchRetrieveInventoryChangesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (BatchRetrieveInventoryChangesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchRetrieveInventoryChangesResponse)));
            
        }

        /// <summary>
        /// BatchRetrieveInventoryCounts Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>BatchRetrieveInventoryCountsResponse</returns>
        public BatchRetrieveInventoryCountsResponse BatchRetrieveInventoryCounts (BatchRetrieveInventoryCountsRequest body)
        {
             ApiResponse<BatchRetrieveInventoryCountsResponse> localVarResponse = BatchRetrieveInventoryCountsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// BatchRetrieveInventoryCounts Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of BatchRetrieveInventoryCountsResponse</returns>
        public ApiResponse< BatchRetrieveInventoryCountsResponse > BatchRetrieveInventoryCountsWithHttpInfo (BatchRetrieveInventoryCountsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->BatchRetrieveInventoryCounts");

            var localVarPath = "/v2/inventory/batch-retrieve-counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchRetrieveInventoryCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchRetrieveInventoryCountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (BatchRetrieveInventoryCountsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchRetrieveInventoryCountsResponse)));
            
        }

        /// <summary>
        /// BatchRetrieveInventoryCounts Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of BatchRetrieveInventoryCountsResponse</returns>
        public async System.Threading.Tasks.Task<BatchRetrieveInventoryCountsResponse> BatchRetrieveInventoryCountsAsync (BatchRetrieveInventoryCountsRequest body)
        {
             ApiResponse<BatchRetrieveInventoryCountsResponse> localVarResponse = await BatchRetrieveInventoryCountsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// BatchRetrieveInventoryCounts Returns current counts for the provided [CatalogObject](#type-catalogobject)s at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;calculated_at&#x60; timestamp (newest first).  When &#x60;updated_after&#x60; is specified, only counts that have changed since that time (based on the server timestamp for the most recent change) are returned. This allows clients to perform a \&quot;sync\&quot; operation, for example in response to receiving a Webhook notification.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (BatchRetrieveInventoryCountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchRetrieveInventoryCountsResponse>> BatchRetrieveInventoryCountsAsyncWithHttpInfo (BatchRetrieveInventoryCountsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InventoryApi->BatchRetrieveInventoryCounts");

            var localVarPath = "/v2/inventory/batch-retrieve-counts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchRetrieveInventoryCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchRetrieveInventoryCountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (BatchRetrieveInventoryCountsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchRetrieveInventoryCountsResponse)));
            
        }

        /// <summary>
        /// RetrieveInventoryAdjustment Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adjustmentId">ID of the &#x60;InventoryAdjustment&#x60; to retrieve.</param>
        /// <returns>RetrieveInventoryAdjustmentResponse</returns>
        public RetrieveInventoryAdjustmentResponse RetrieveInventoryAdjustment (string adjustmentId)
        {
             ApiResponse<RetrieveInventoryAdjustmentResponse> localVarResponse = RetrieveInventoryAdjustmentWithHttpInfo(adjustmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveInventoryAdjustment Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adjustmentId">ID of the &#x60;InventoryAdjustment&#x60; to retrieve.</param>
        /// <returns>ApiResponse of RetrieveInventoryAdjustmentResponse</returns>
        public ApiResponse< RetrieveInventoryAdjustmentResponse > RetrieveInventoryAdjustmentWithHttpInfo (string adjustmentId)
        {
            // verify the required parameter 'adjustmentId' is set
            if (adjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'adjustmentId' when calling InventoryApi->RetrieveInventoryAdjustment");

            var localVarPath = "/v2/inventory/adjustment/{adjustment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (adjustmentId != null) localVarPathParams.Add("adjustment_id", Configuration.ApiClient.ParameterToString(adjustmentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveInventoryAdjustment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveInventoryAdjustmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (RetrieveInventoryAdjustmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveInventoryAdjustmentResponse)));
            
        }

        /// <summary>
        /// RetrieveInventoryAdjustment Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adjustmentId">ID of the &#x60;InventoryAdjustment&#x60; to retrieve.</param>
        /// <returns>Task of RetrieveInventoryAdjustmentResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveInventoryAdjustmentResponse> RetrieveInventoryAdjustmentAsync (string adjustmentId)
        {
             ApiResponse<RetrieveInventoryAdjustmentResponse> localVarResponse = await RetrieveInventoryAdjustmentAsyncWithHttpInfo(adjustmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveInventoryAdjustment Returns the [InventoryAdjustment](#type-inventoryadjustment) object with the provided &#x60;adjustment_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adjustmentId">ID of the &#x60;InventoryAdjustment&#x60; to retrieve.</param>
        /// <returns>Task of ApiResponse (RetrieveInventoryAdjustmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveInventoryAdjustmentResponse>> RetrieveInventoryAdjustmentAsyncWithHttpInfo (string adjustmentId)
        {
            // verify the required parameter 'adjustmentId' is set
            if (adjustmentId == null)
                throw new ApiException(400, "Missing required parameter 'adjustmentId' when calling InventoryApi->RetrieveInventoryAdjustment");

            var localVarPath = "/v2/inventory/adjustment/{adjustment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (adjustmentId != null) localVarPathParams.Add("adjustment_id", Configuration.ApiClient.ParameterToString(adjustmentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveInventoryAdjustment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveInventoryAdjustmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (RetrieveInventoryAdjustmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveInventoryAdjustmentResponse)));
            
        }

        /// <summary>
        /// RetrieveInventoryChanges Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>RetrieveInventoryChangesResponse</returns>
        public RetrieveInventoryChangesResponse RetrieveInventoryChanges (string catalogObjectId, string locationIds = null, string cursor = null)
        {
             ApiResponse<RetrieveInventoryChangesResponse> localVarResponse = RetrieveInventoryChangesWithHttpInfo(catalogObjectId, locationIds, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveInventoryChanges Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>ApiResponse of RetrieveInventoryChangesResponse</returns>
        public ApiResponse< RetrieveInventoryChangesResponse > RetrieveInventoryChangesWithHttpInfo (string catalogObjectId, string locationIds = null, string cursor = null)
        {
            // verify the required parameter 'catalogObjectId' is set
            if (catalogObjectId == null)
                throw new ApiException(400, "Missing required parameter 'catalogObjectId' when calling InventoryApi->RetrieveInventoryChanges");

            var localVarPath = "/v2/inventory/{catalog_object_id}/changes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (catalogObjectId != null) localVarPathParams.Add("catalog_object_id", Configuration.ApiClient.ParameterToString(catalogObjectId)); // path parameter
            if (locationIds != null) localVarQueryParams.Add("location_ids", Configuration.ApiClient.ParameterToString(locationIds)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveInventoryChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveInventoryChangesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (RetrieveInventoryChangesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveInventoryChangesResponse)));
            
        }

        /// <summary>
        /// RetrieveInventoryChanges Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>Task of RetrieveInventoryChangesResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveInventoryChangesResponse> RetrieveInventoryChangesAsync (string catalogObjectId, string locationIds = null, string cursor = null)
        {
             ApiResponse<RetrieveInventoryChangesResponse> localVarResponse = await RetrieveInventoryChangesAsyncWithHttpInfo(catalogObjectId, locationIds, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveInventoryChanges Returns a set of physical counts and inventory adjustments for the provided [CatalogObject](#type-catalogobject) at the requested [Location](#type-location)s.  Results are paginated and sorted in descending order according to their &#x60;occurred_at&#x60; timestamp (newest first).  There are no limits on how far back the caller can page. This endpoint is useful when displaying recent changes for a specific item. For more sophisticated queries, use a batch endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveInventoryChangesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveInventoryChangesResponse>> RetrieveInventoryChangesAsyncWithHttpInfo (string catalogObjectId, string locationIds = null, string cursor = null)
        {
            // verify the required parameter 'catalogObjectId' is set
            if (catalogObjectId == null)
                throw new ApiException(400, "Missing required parameter 'catalogObjectId' when calling InventoryApi->RetrieveInventoryChanges");

            var localVarPath = "/v2/inventory/{catalog_object_id}/changes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (catalogObjectId != null) localVarPathParams.Add("catalog_object_id", Configuration.ApiClient.ParameterToString(catalogObjectId)); // path parameter
            if (locationIds != null) localVarQueryParams.Add("location_ids", Configuration.ApiClient.ParameterToString(locationIds)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveInventoryChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveInventoryChangesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (RetrieveInventoryChangesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveInventoryChangesResponse)));
            
        }

        /// <summary>
        /// RetrieveInventoryCount Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>RetrieveInventoryCountResponse</returns>
        public RetrieveInventoryCountResponse RetrieveInventoryCount (string catalogObjectId, string locationIds = null, string cursor = null)
        {
             ApiResponse<RetrieveInventoryCountResponse> localVarResponse = RetrieveInventoryCountWithHttpInfo(catalogObjectId, locationIds, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveInventoryCount Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>ApiResponse of RetrieveInventoryCountResponse</returns>
        public ApiResponse< RetrieveInventoryCountResponse > RetrieveInventoryCountWithHttpInfo (string catalogObjectId, string locationIds = null, string cursor = null)
        {
            // verify the required parameter 'catalogObjectId' is set
            if (catalogObjectId == null)
                throw new ApiException(400, "Missing required parameter 'catalogObjectId' when calling InventoryApi->RetrieveInventoryCount");

            var localVarPath = "/v2/inventory/{catalog_object_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (catalogObjectId != null) localVarPathParams.Add("catalog_object_id", Configuration.ApiClient.ParameterToString(catalogObjectId)); // path parameter
            if (locationIds != null) localVarQueryParams.Add("location_ids", Configuration.ApiClient.ParameterToString(locationIds)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveInventoryCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveInventoryCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (RetrieveInventoryCountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveInventoryCountResponse)));
            
        }

        /// <summary>
        /// RetrieveInventoryCount Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>Task of RetrieveInventoryCountResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveInventoryCountResponse> RetrieveInventoryCountAsync (string catalogObjectId, string locationIds = null, string cursor = null)
        {
             ApiResponse<RetrieveInventoryCountResponse> localVarResponse = await RetrieveInventoryCountAsyncWithHttpInfo(catalogObjectId, locationIds, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveInventoryCount Retrieves the current calculated stock count for a given [CatalogObject](#type-catalogobject) at a given set of [Location](#type-location)s. Responses are paginated and unsorted. For more sophisticated queries, use a batch endpoint.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogObjectId">ID of the &#x60;CatalogObject&#x60; to retrieve.</param>
        /// <param name="locationIds">The &#x60;Location&#x60; IDs to look up as a comma-separated list. An empty list queries all locations. (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveInventoryCountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveInventoryCountResponse>> RetrieveInventoryCountAsyncWithHttpInfo (string catalogObjectId, string locationIds = null, string cursor = null)
        {
            // verify the required parameter 'catalogObjectId' is set
            if (catalogObjectId == null)
                throw new ApiException(400, "Missing required parameter 'catalogObjectId' when calling InventoryApi->RetrieveInventoryCount");

            var localVarPath = "/v2/inventory/{catalog_object_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (catalogObjectId != null) localVarPathParams.Add("catalog_object_id", Configuration.ApiClient.ParameterToString(catalogObjectId)); // path parameter
            if (locationIds != null) localVarQueryParams.Add("location_ids", Configuration.ApiClient.ParameterToString(locationIds)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveInventoryCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveInventoryCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (RetrieveInventoryCountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveInventoryCountResponse)));
            
        }

        /// <summary>
        /// RetrieveInventoryPhysicalCount Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="physicalCountId">ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.</param>
        /// <returns>RetrieveInventoryPhysicalCountResponse</returns>
        public RetrieveInventoryPhysicalCountResponse RetrieveInventoryPhysicalCount (string physicalCountId)
        {
             ApiResponse<RetrieveInventoryPhysicalCountResponse> localVarResponse = RetrieveInventoryPhysicalCountWithHttpInfo(physicalCountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveInventoryPhysicalCount Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="physicalCountId">ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.</param>
        /// <returns>ApiResponse of RetrieveInventoryPhysicalCountResponse</returns>
        public ApiResponse< RetrieveInventoryPhysicalCountResponse > RetrieveInventoryPhysicalCountWithHttpInfo (string physicalCountId)
        {
            // verify the required parameter 'physicalCountId' is set
            if (physicalCountId == null)
                throw new ApiException(400, "Missing required parameter 'physicalCountId' when calling InventoryApi->RetrieveInventoryPhysicalCount");

            var localVarPath = "/v2/inventory/physical-count/{physical_count_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (physicalCountId != null) localVarPathParams.Add("physical_count_id", Configuration.ApiClient.ParameterToString(physicalCountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveInventoryPhysicalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveInventoryPhysicalCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (RetrieveInventoryPhysicalCountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveInventoryPhysicalCountResponse)));
            
        }

        /// <summary>
        /// RetrieveInventoryPhysicalCount Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="physicalCountId">ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.</param>
        /// <returns>Task of RetrieveInventoryPhysicalCountResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveInventoryPhysicalCountResponse> RetrieveInventoryPhysicalCountAsync (string physicalCountId)
        {
             ApiResponse<RetrieveInventoryPhysicalCountResponse> localVarResponse = await RetrieveInventoryPhysicalCountAsyncWithHttpInfo(physicalCountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveInventoryPhysicalCount Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount) object with the provided &#x60;physical_count_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="physicalCountId">ID of the &#x60;InventoryPhysicalCount&#x60; to retrieve.</param>
        /// <returns>Task of ApiResponse (RetrieveInventoryPhysicalCountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveInventoryPhysicalCountResponse>> RetrieveInventoryPhysicalCountAsyncWithHttpInfo (string physicalCountId)
        {
            // verify the required parameter 'physicalCountId' is set
            if (physicalCountId == null)
                throw new ApiException(400, "Missing required parameter 'physicalCountId' when calling InventoryApi->RetrieveInventoryPhysicalCount");

            var localVarPath = "/v2/inventory/physical-count/{physical_count_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (physicalCountId != null) localVarPathParams.Add("physical_count_id", Configuration.ApiClient.ParameterToString(physicalCountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveInventoryPhysicalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveInventoryPhysicalCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (RetrieveInventoryPhysicalCountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveInventoryPhysicalCountResponse)));
            
        }

    }
}
