/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Square.Connect.Client;
using Square.Connect.Model;

namespace Square.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILaborApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CreateBreakType
        /// </summary>
        /// <remarks>
        /// Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>CreateBreakTypeResponse</returns>        CreateBreakTypeResponse CreateBreakType (CreateBreakTypeRequest body);

        /// <summary>
        /// CreateBreakType
        /// </summary>
        /// <remarks>
        /// Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of CreateBreakTypeResponse</returns>
        ApiResponse<CreateBreakTypeResponse> CreateBreakTypeWithHttpInfo (CreateBreakTypeRequest body);
        /// <summary>
        /// CreateShift
        /// </summary>
        /// <remarks>
        /// Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>CreateShiftResponse</returns>        CreateShiftResponse CreateShift (CreateShiftRequest body);

        /// <summary>
        /// CreateShift
        /// </summary>
        /// <remarks>
        /// Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of CreateShiftResponse</returns>
        ApiResponse<CreateShiftResponse> CreateShiftWithHttpInfo (CreateShiftRequest body);
        /// <summary>
        /// DeleteBreakType
        /// </summary>
        /// <remarks>
        /// Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
        /// <returns>DeleteBreakTypeResponse</returns>        DeleteBreakTypeResponse DeleteBreakType (string id);

        /// <summary>
        /// DeleteBreakType
        /// </summary>
        /// <remarks>
        /// Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
        /// <returns>ApiResponse of DeleteBreakTypeResponse</returns>
        ApiResponse<DeleteBreakTypeResponse> DeleteBreakTypeWithHttpInfo (string id);
        /// <summary>
        /// DeleteShift
        /// </summary>
        /// <remarks>
        /// Deletes a &#x60;Shift&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
        /// <returns>DeleteShiftResponse</returns>        DeleteShiftResponse DeleteShift (string id);

        /// <summary>
        /// DeleteShift
        /// </summary>
        /// <remarks>
        /// Deletes a &#x60;Shift&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
        /// <returns>ApiResponse of DeleteShiftResponse</returns>
        ApiResponse<DeleteShiftResponse> DeleteShiftWithHttpInfo (string id);
        /// <summary>
        /// GetBreakType
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;BreakType&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
        /// <returns>GetBreakTypeResponse</returns>        GetBreakTypeResponse GetBreakType (string id);

        /// <summary>
        /// GetBreakType
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;BreakType&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
        /// <returns>ApiResponse of GetBreakTypeResponse</returns>
        ApiResponse<GetBreakTypeResponse> GetBreakTypeWithHttpInfo (string id);
        /// <summary>
        /// GetEmployeeWage
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;EmployeeWage&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
        /// <returns>GetEmployeeWageResponse</returns>        GetEmployeeWageResponse GetEmployeeWage (string id);

        /// <summary>
        /// GetEmployeeWage
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;EmployeeWage&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
        /// <returns>ApiResponse of GetEmployeeWageResponse</returns>
        ApiResponse<GetEmployeeWageResponse> GetEmployeeWageWithHttpInfo (string id);
        /// <summary>
        /// GetShift
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;Shift&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
        /// <returns>GetShiftResponse</returns>        GetShiftResponse GetShift (string id);

        /// <summary>
        /// GetShift
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;Shift&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
        /// <returns>ApiResponse of GetShiftResponse</returns>
        ApiResponse<GetShiftResponse> GetShiftWithHttpInfo (string id);
        /// <summary>
        /// ListBreakTypes
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
        /// <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
        /// <returns>ListBreakTypesResponse</returns>        ListBreakTypesResponse ListBreakTypes (string locationId = null, int? limit = null, string cursor = null);

        /// <summary>
        /// ListBreakTypes
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
        /// <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
        /// <returns>ApiResponse of ListBreakTypesResponse</returns>
        ApiResponse<ListBreakTypesResponse> ListBreakTypesWithHttpInfo (string locationId = null, int? limit = null, string cursor = null);
        /// <summary>
        /// ListEmployeeWages
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
        /// <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
        /// <returns>ListEmployeeWagesResponse</returns>        ListEmployeeWagesResponse ListEmployeeWages (string employeeId = null, int? limit = null, string cursor = null);

        /// <summary>
        /// ListEmployeeWages
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
        /// <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
        /// <returns>ApiResponse of ListEmployeeWagesResponse</returns>
        ApiResponse<ListEmployeeWagesResponse> ListEmployeeWagesWithHttpInfo (string employeeId = null, int? limit = null, string cursor = null);
        /// <summary>
        /// ListWorkweekConfigs
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
        /// <returns>ListWorkweekConfigsResponse</returns>        ListWorkweekConfigsResponse ListWorkweekConfigs (int? limit = null, string cursor = null);

        /// <summary>
        /// ListWorkweekConfigs
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
        /// <returns>ApiResponse of ListWorkweekConfigsResponse</returns>
        ApiResponse<ListWorkweekConfigsResponse> ListWorkweekConfigsWithHttpInfo (int? limit = null, string cursor = null);
        /// <summary>
        /// SearchShifts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>SearchShiftsResponse</returns>        SearchShiftsResponse SearchShifts (SearchShiftsRequest body);

        /// <summary>
        /// SearchShifts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of SearchShiftsResponse</returns>
        ApiResponse<SearchShiftsResponse> SearchShiftsWithHttpInfo (SearchShiftsRequest body);
        /// <summary>
        /// UpdateBreakType
        /// </summary>
        /// <remarks>
        /// Updates an existing &#x60;BreakType&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>UpdateBreakTypeResponse</returns>        UpdateBreakTypeResponse UpdateBreakType (string id, UpdateBreakTypeRequest body);

        /// <summary>
        /// UpdateBreakType
        /// </summary>
        /// <remarks>
        /// Updates an existing &#x60;BreakType&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of UpdateBreakTypeResponse</returns>
        ApiResponse<UpdateBreakTypeResponse> UpdateBreakTypeWithHttpInfo (string id, UpdateBreakTypeRequest body);
        /// <summary>
        /// UpdateShift
        /// </summary>
        /// <remarks>
        /// Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>UpdateShiftResponse</returns>        UpdateShiftResponse UpdateShift (string id, UpdateShiftRequest body);

        /// <summary>
        /// UpdateShift
        /// </summary>
        /// <remarks>
        /// Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of UpdateShiftResponse</returns>
        ApiResponse<UpdateShiftResponse> UpdateShiftWithHttpInfo (string id, UpdateShiftRequest body);
        /// <summary>
        /// UpdateWorkweekConfig
        /// </summary>
        /// <remarks>
        /// Updates a &#x60;WorkweekConfig&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>UpdateWorkweekConfigResponse</returns>        UpdateWorkweekConfigResponse UpdateWorkweekConfig (string id, UpdateWorkweekConfigRequest body);

        /// <summary>
        /// UpdateWorkweekConfig
        /// </summary>
        /// <remarks>
        /// Updates a &#x60;WorkweekConfig&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of UpdateWorkweekConfigResponse</returns>
        ApiResponse<UpdateWorkweekConfigResponse> UpdateWorkweekConfigWithHttpInfo (string id, UpdateWorkweekConfigRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// CreateBreakType
        /// </summary>
        /// <remarks>
        /// Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of CreateBreakTypeResponse</returns>
        System.Threading.Tasks.Task<CreateBreakTypeResponse> CreateBreakTypeAsync (CreateBreakTypeRequest body);

        /// <summary>
        /// CreateBreakType
        /// </summary>
        /// <remarks>
        /// Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (CreateBreakTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateBreakTypeResponse>> CreateBreakTypeAsyncWithHttpInfo (CreateBreakTypeRequest body);
        /// <summary>
        /// CreateShift
        /// </summary>
        /// <remarks>
        /// Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of CreateShiftResponse</returns>
        System.Threading.Tasks.Task<CreateShiftResponse> CreateShiftAsync (CreateShiftRequest body);

        /// <summary>
        /// CreateShift
        /// </summary>
        /// <remarks>
        /// Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (CreateShiftResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateShiftResponse>> CreateShiftAsyncWithHttpInfo (CreateShiftRequest body);
        /// <summary>
        /// DeleteBreakType
        /// </summary>
        /// <remarks>
        /// Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
        /// <returns>Task of DeleteBreakTypeResponse</returns>
        System.Threading.Tasks.Task<DeleteBreakTypeResponse> DeleteBreakTypeAsync (string id);

        /// <summary>
        /// DeleteBreakType
        /// </summary>
        /// <remarks>
        /// Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
        /// <returns>Task of ApiResponse (DeleteBreakTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteBreakTypeResponse>> DeleteBreakTypeAsyncWithHttpInfo (string id);
        /// <summary>
        /// DeleteShift
        /// </summary>
        /// <remarks>
        /// Deletes a &#x60;Shift&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
        /// <returns>Task of DeleteShiftResponse</returns>
        System.Threading.Tasks.Task<DeleteShiftResponse> DeleteShiftAsync (string id);

        /// <summary>
        /// DeleteShift
        /// </summary>
        /// <remarks>
        /// Deletes a &#x60;Shift&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
        /// <returns>Task of ApiResponse (DeleteShiftResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteShiftResponse>> DeleteShiftAsyncWithHttpInfo (string id);
        /// <summary>
        /// GetBreakType
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;BreakType&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
        /// <returns>Task of GetBreakTypeResponse</returns>
        System.Threading.Tasks.Task<GetBreakTypeResponse> GetBreakTypeAsync (string id);

        /// <summary>
        /// GetBreakType
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;BreakType&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
        /// <returns>Task of ApiResponse (GetBreakTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBreakTypeResponse>> GetBreakTypeAsyncWithHttpInfo (string id);
        /// <summary>
        /// GetEmployeeWage
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;EmployeeWage&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
        /// <returns>Task of GetEmployeeWageResponse</returns>
        System.Threading.Tasks.Task<GetEmployeeWageResponse> GetEmployeeWageAsync (string id);

        /// <summary>
        /// GetEmployeeWage
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;EmployeeWage&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
        /// <returns>Task of ApiResponse (GetEmployeeWageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmployeeWageResponse>> GetEmployeeWageAsyncWithHttpInfo (string id);
        /// <summary>
        /// GetShift
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;Shift&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
        /// <returns>Task of GetShiftResponse</returns>
        System.Threading.Tasks.Task<GetShiftResponse> GetShiftAsync (string id);

        /// <summary>
        /// GetShift
        /// </summary>
        /// <remarks>
        /// Returns a single &#x60;Shift&#x60; specified by id.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
        /// <returns>Task of ApiResponse (GetShiftResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShiftResponse>> GetShiftAsyncWithHttpInfo (string id);
        /// <summary>
        /// ListBreakTypes
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
        /// <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
        /// <returns>Task of ListBreakTypesResponse</returns>
        System.Threading.Tasks.Task<ListBreakTypesResponse> ListBreakTypesAsync (string locationId = null, int? limit = null, string cursor = null);

        /// <summary>
        /// ListBreakTypes
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
        /// <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (ListBreakTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListBreakTypesResponse>> ListBreakTypesAsyncWithHttpInfo (string locationId = null, int? limit = null, string cursor = null);
        /// <summary>
        /// ListEmployeeWages
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
        /// <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
        /// <returns>Task of ListEmployeeWagesResponse</returns>
        System.Threading.Tasks.Task<ListEmployeeWagesResponse> ListEmployeeWagesAsync (string employeeId = null, int? limit = null, string cursor = null);

        /// <summary>
        /// ListEmployeeWages
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
        /// <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (ListEmployeeWagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListEmployeeWagesResponse>> ListEmployeeWagesAsyncWithHttpInfo (string employeeId = null, int? limit = null, string cursor = null);
        /// <summary>
        /// ListWorkweekConfigs
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
        /// <returns>Task of ListWorkweekConfigsResponse</returns>
        System.Threading.Tasks.Task<ListWorkweekConfigsResponse> ListWorkweekConfigsAsync (int? limit = null, string cursor = null);

        /// <summary>
        /// ListWorkweekConfigs
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (ListWorkweekConfigsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListWorkweekConfigsResponse>> ListWorkweekConfigsAsyncWithHttpInfo (int? limit = null, string cursor = null);
        /// <summary>
        /// SearchShifts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of SearchShiftsResponse</returns>
        System.Threading.Tasks.Task<SearchShiftsResponse> SearchShiftsAsync (SearchShiftsRequest body);

        /// <summary>
        /// SearchShifts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (SearchShiftsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchShiftsResponse>> SearchShiftsAsyncWithHttpInfo (SearchShiftsRequest body);
        /// <summary>
        /// UpdateBreakType
        /// </summary>
        /// <remarks>
        /// Updates an existing &#x60;BreakType&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of UpdateBreakTypeResponse</returns>
        System.Threading.Tasks.Task<UpdateBreakTypeResponse> UpdateBreakTypeAsync (string id, UpdateBreakTypeRequest body);

        /// <summary>
        /// UpdateBreakType
        /// </summary>
        /// <remarks>
        /// Updates an existing &#x60;BreakType&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (UpdateBreakTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateBreakTypeResponse>> UpdateBreakTypeAsyncWithHttpInfo (string id, UpdateBreakTypeRequest body);
        /// <summary>
        /// UpdateShift
        /// </summary>
        /// <remarks>
        /// Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of UpdateShiftResponse</returns>
        System.Threading.Tasks.Task<UpdateShiftResponse> UpdateShiftAsync (string id, UpdateShiftRequest body);

        /// <summary>
        /// UpdateShift
        /// </summary>
        /// <remarks>
        /// Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (UpdateShiftResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateShiftResponse>> UpdateShiftAsyncWithHttpInfo (string id, UpdateShiftRequest body);
        /// <summary>
        /// UpdateWorkweekConfig
        /// </summary>
        /// <remarks>
        /// Updates a &#x60;WorkweekConfig&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of UpdateWorkweekConfigResponse</returns>
        System.Threading.Tasks.Task<UpdateWorkweekConfigResponse> UpdateWorkweekConfigAsync (string id, UpdateWorkweekConfigRequest body);

        /// <summary>
        /// UpdateWorkweekConfig
        /// </summary>
        /// <remarks>
        /// Updates a &#x60;WorkweekConfig&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (UpdateWorkweekConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateWorkweekConfigResponse>> UpdateWorkweekConfigAsyncWithHttpInfo (string id, UpdateWorkweekConfigRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LaborApi : ILaborApi
    {
        private Square.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LaborApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LaborApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LaborApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LaborApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Square.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// CreateBreakType Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>CreateBreakTypeResponse</returns>
        public CreateBreakTypeResponse CreateBreakType (CreateBreakTypeRequest body)
        {
             ApiResponse<CreateBreakTypeResponse> localVarResponse = CreateBreakTypeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateBreakType Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of CreateBreakTypeResponse</returns>
        public ApiResponse< CreateBreakTypeResponse > CreateBreakTypeWithHttpInfo (CreateBreakTypeRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->CreateBreakType");

            var localVarPath = "/v2/labor/break-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBreakType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateBreakTypeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (CreateBreakTypeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateBreakTypeResponse)));
            
        }

        /// <summary>
        /// CreateBreakType Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of CreateBreakTypeResponse</returns>
        public async System.Threading.Tasks.Task<CreateBreakTypeResponse> CreateBreakTypeAsync (CreateBreakTypeRequest body)
        {
             ApiResponse<CreateBreakTypeResponse> localVarResponse = await CreateBreakTypeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateBreakType Creates a new &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; is a template for creating &#x60;Break&#x60; objects.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;break_name&#x60; - &#x60;expected_duration&#x60; - &#x60;is_paid&#x60;  You can only have 3 &#x60;BreakType&#x60; instances per location. If you attempt to add a 4th &#x60;BreakType&#x60; for a location, an &#x60;INVALID_REQUEST_ERROR&#x60; \&quot;Exceeded limit of 3 breaks per location.\&quot; is returned.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (CreateBreakTypeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateBreakTypeResponse>> CreateBreakTypeAsyncWithHttpInfo (CreateBreakTypeRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->CreateBreakType");

            var localVarPath = "/v2/labor/break-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBreakType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateBreakTypeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (CreateBreakTypeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateBreakTypeResponse)));
            
        }

        /// <summary>
        /// CreateShift Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>CreateShiftResponse</returns>
        public CreateShiftResponse CreateShift (CreateShiftRequest body)
        {
             ApiResponse<CreateShiftResponse> localVarResponse = CreateShiftWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateShift Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of CreateShiftResponse</returns>
        public ApiResponse< CreateShiftResponse > CreateShiftWithHttpInfo (CreateShiftRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->CreateShift");

            var localVarPath = "/v2/labor/shifts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateShiftResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (CreateShiftResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateShiftResponse)));
            
        }

        /// <summary>
        /// CreateShift Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of CreateShiftResponse</returns>
        public async System.Threading.Tasks.Task<CreateShiftResponse> CreateShiftAsync (CreateShiftRequest body)
        {
             ApiResponse<CreateShiftResponse> localVarResponse = await CreateShiftAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateShift Creates a new &#x60;Shift&#x60;.   A &#x60;Shift&#x60; represents a complete work day for a single employee.  You must provide the following values in your request to this endpoint:  - &#x60;location_id&#x60; - &#x60;employee_id&#x60; - &#x60;start_at&#x60;  An attempt to create a new &#x60;Shift&#x60; can result in a &#x60;BAD_REQUEST&#x60; error when: - The &#x60;status&#x60; of the new &#x60;Shift&#x60; is &#x60;OPEN&#x60; and the employee has another  shift with an &#x60;OPEN&#x60; status.  - The &#x60;start_at&#x60; date is in the future - the &#x60;start_at&#x60; or &#x60;end_at&#x60; overlaps another shift for the same employee - If &#x60;Break&#x60;s are set in the request, a break &#x60;start_at&#x60; must not be before the &#x60;Shift.start_at&#x60;. A break &#x60;end_at&#x60; must not be after the &#x60;Shift.end_at&#x60;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (CreateShiftResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateShiftResponse>> CreateShiftAsyncWithHttpInfo (CreateShiftRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->CreateShift");

            var localVarPath = "/v2/labor/shifts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateShiftResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (CreateShiftResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateShiftResponse)));
            
        }

        /// <summary>
        /// DeleteBreakType Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
        /// <returns>DeleteBreakTypeResponse</returns>
        public DeleteBreakTypeResponse DeleteBreakType (string id)
        {
             ApiResponse<DeleteBreakTypeResponse> localVarResponse = DeleteBreakTypeWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteBreakType Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
        /// <returns>ApiResponse of DeleteBreakTypeResponse</returns>
        public ApiResponse< DeleteBreakTypeResponse > DeleteBreakTypeWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->DeleteBreakType");

            var localVarPath = "/v2/labor/break-types/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBreakType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteBreakTypeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (DeleteBreakTypeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteBreakTypeResponse)));
            
        }

        /// <summary>
        /// DeleteBreakType Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
        /// <returns>Task of DeleteBreakTypeResponse</returns>
        public async System.Threading.Tasks.Task<DeleteBreakTypeResponse> DeleteBreakTypeAsync (string id)
        {
             ApiResponse<DeleteBreakTypeResponse> localVarResponse = await DeleteBreakTypeAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteBreakType Deletes an existing &#x60;BreakType&#x60;.   A &#x60;BreakType&#x60; can be deleted even if it is referenced from a &#x60;Shift&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being deleted.</param>
        /// <returns>Task of ApiResponse (DeleteBreakTypeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteBreakTypeResponse>> DeleteBreakTypeAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->DeleteBreakType");

            var localVarPath = "/v2/labor/break-types/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBreakType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteBreakTypeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (DeleteBreakTypeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteBreakTypeResponse)));
            
        }

        /// <summary>
        /// DeleteShift Deletes a &#x60;Shift&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
        /// <returns>DeleteShiftResponse</returns>
        public DeleteShiftResponse DeleteShift (string id)
        {
             ApiResponse<DeleteShiftResponse> localVarResponse = DeleteShiftWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteShift Deletes a &#x60;Shift&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
        /// <returns>ApiResponse of DeleteShiftResponse</returns>
        public ApiResponse< DeleteShiftResponse > DeleteShiftWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->DeleteShift");

            var localVarPath = "/v2/labor/shifts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteShiftResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (DeleteShiftResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteShiftResponse)));
            
        }

        /// <summary>
        /// DeleteShift Deletes a &#x60;Shift&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
        /// <returns>Task of DeleteShiftResponse</returns>
        public async System.Threading.Tasks.Task<DeleteShiftResponse> DeleteShiftAsync (string id)
        {
             ApiResponse<DeleteShiftResponse> localVarResponse = await DeleteShiftAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteShift Deletes a &#x60;Shift&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being deleted.</param>
        /// <returns>Task of ApiResponse (DeleteShiftResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteShiftResponse>> DeleteShiftAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->DeleteShift");

            var localVarPath = "/v2/labor/shifts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteShiftResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (DeleteShiftResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteShiftResponse)));
            
        }

        /// <summary>
        /// GetBreakType Returns a single &#x60;BreakType&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
        /// <returns>GetBreakTypeResponse</returns>
        public GetBreakTypeResponse GetBreakType (string id)
        {
             ApiResponse<GetBreakTypeResponse> localVarResponse = GetBreakTypeWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GetBreakType Returns a single &#x60;BreakType&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
        /// <returns>ApiResponse of GetBreakTypeResponse</returns>
        public ApiResponse< GetBreakTypeResponse > GetBreakTypeWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->GetBreakType");

            var localVarPath = "/v2/labor/break-types/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBreakType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBreakTypeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (GetBreakTypeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBreakTypeResponse)));
            
        }

        /// <summary>
        /// GetBreakType Returns a single &#x60;BreakType&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
        /// <returns>Task of GetBreakTypeResponse</returns>
        public async System.Threading.Tasks.Task<GetBreakTypeResponse> GetBreakTypeAsync (string id)
        {
             ApiResponse<GetBreakTypeResponse> localVarResponse = await GetBreakTypeAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GetBreakType Returns a single &#x60;BreakType&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being retrieved.</param>
        /// <returns>Task of ApiResponse (GetBreakTypeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBreakTypeResponse>> GetBreakTypeAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->GetBreakType");

            var localVarPath = "/v2/labor/break-types/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBreakType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBreakTypeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (GetBreakTypeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBreakTypeResponse)));
            
        }

        /// <summary>
        /// GetEmployeeWage Returns a single &#x60;EmployeeWage&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
        /// <returns>GetEmployeeWageResponse</returns>
        public GetEmployeeWageResponse GetEmployeeWage (string id)
        {
             ApiResponse<GetEmployeeWageResponse> localVarResponse = GetEmployeeWageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GetEmployeeWage Returns a single &#x60;EmployeeWage&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
        /// <returns>ApiResponse of GetEmployeeWageResponse</returns>
        public ApiResponse< GetEmployeeWageResponse > GetEmployeeWageWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->GetEmployeeWage");

            var localVarPath = "/v2/labor/employee-wages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmployeeWage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetEmployeeWageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (GetEmployeeWageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetEmployeeWageResponse)));
            
        }

        /// <summary>
        /// GetEmployeeWage Returns a single &#x60;EmployeeWage&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
        /// <returns>Task of GetEmployeeWageResponse</returns>
        public async System.Threading.Tasks.Task<GetEmployeeWageResponse> GetEmployeeWageAsync (string id)
        {
             ApiResponse<GetEmployeeWageResponse> localVarResponse = await GetEmployeeWageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GetEmployeeWage Returns a single &#x60;EmployeeWage&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;EmployeeWage&#x60; being retrieved.</param>
        /// <returns>Task of ApiResponse (GetEmployeeWageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetEmployeeWageResponse>> GetEmployeeWageAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->GetEmployeeWage");

            var localVarPath = "/v2/labor/employee-wages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmployeeWage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetEmployeeWageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (GetEmployeeWageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetEmployeeWageResponse)));
            
        }

        /// <summary>
        /// GetShift Returns a single &#x60;Shift&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
        /// <returns>GetShiftResponse</returns>
        public GetShiftResponse GetShift (string id)
        {
             ApiResponse<GetShiftResponse> localVarResponse = GetShiftWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GetShift Returns a single &#x60;Shift&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
        /// <returns>ApiResponse of GetShiftResponse</returns>
        public ApiResponse< GetShiftResponse > GetShiftWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->GetShift");

            var localVarPath = "/v2/labor/shifts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShiftResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (GetShiftResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShiftResponse)));
            
        }

        /// <summary>
        /// GetShift Returns a single &#x60;Shift&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
        /// <returns>Task of GetShiftResponse</returns>
        public async System.Threading.Tasks.Task<GetShiftResponse> GetShiftAsync (string id)
        {
             ApiResponse<GetShiftResponse> localVarResponse = await GetShiftAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GetShift Returns a single &#x60;Shift&#x60; specified by id.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;Shift&#x60; being retrieved.</param>
        /// <returns>Task of ApiResponse (GetShiftResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetShiftResponse>> GetShiftAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->GetShift");

            var localVarPath = "/v2/labor/shifts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShiftResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (GetShiftResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShiftResponse)));
            
        }

        /// <summary>
        /// ListBreakTypes Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
        /// <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
        /// <returns>ListBreakTypesResponse</returns>
        public ListBreakTypesResponse ListBreakTypes (string locationId = null, int? limit = null, string cursor = null)
        {
             ApiResponse<ListBreakTypesResponse> localVarResponse = ListBreakTypesWithHttpInfo(locationId, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListBreakTypes Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
        /// <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
        /// <returns>ApiResponse of ListBreakTypesResponse</returns>
        public ApiResponse< ListBreakTypesResponse > ListBreakTypesWithHttpInfo (string locationId = null, int? limit = null, string cursor = null)
        {

            var localVarPath = "/v2/labor/break-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (locationId != null) localVarQueryParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBreakTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListBreakTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (ListBreakTypesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListBreakTypesResponse)));
            
        }

        /// <summary>
        /// ListBreakTypes Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
        /// <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
        /// <returns>Task of ListBreakTypesResponse</returns>
        public async System.Threading.Tasks.Task<ListBreakTypesResponse> ListBreakTypesAsync (string locationId = null, int? limit = null, string cursor = null)
        {
             ApiResponse<ListBreakTypesResponse> localVarResponse = await ListBreakTypesAsyncWithHttpInfo(locationId, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListBreakTypes Returns a paginated list of &#x60;BreakType&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Filter Break Types returned to only those that are associated with the specified location. (optional)</param>
        /// <param name="limit">Maximum number of Break Types to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Break Type results to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (ListBreakTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListBreakTypesResponse>> ListBreakTypesAsyncWithHttpInfo (string locationId = null, int? limit = null, string cursor = null)
        {

            var localVarPath = "/v2/labor/break-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (locationId != null) localVarQueryParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBreakTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListBreakTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (ListBreakTypesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListBreakTypesResponse)));
            
        }

        /// <summary>
        /// ListEmployeeWages Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
        /// <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
        /// <returns>ListEmployeeWagesResponse</returns>
        public ListEmployeeWagesResponse ListEmployeeWages (string employeeId = null, int? limit = null, string cursor = null)
        {
             ApiResponse<ListEmployeeWagesResponse> localVarResponse = ListEmployeeWagesWithHttpInfo(employeeId, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListEmployeeWages Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
        /// <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
        /// <returns>ApiResponse of ListEmployeeWagesResponse</returns>
        public ApiResponse< ListEmployeeWagesResponse > ListEmployeeWagesWithHttpInfo (string employeeId = null, int? limit = null, string cursor = null)
        {

            var localVarPath = "/v2/labor/employee-wages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (employeeId != null) localVarQueryParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmployeeWages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListEmployeeWagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (ListEmployeeWagesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListEmployeeWagesResponse)));
            
        }

        /// <summary>
        /// ListEmployeeWages Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
        /// <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
        /// <returns>Task of ListEmployeeWagesResponse</returns>
        public async System.Threading.Tasks.Task<ListEmployeeWagesResponse> ListEmployeeWagesAsync (string employeeId = null, int? limit = null, string cursor = null)
        {
             ApiResponse<ListEmployeeWagesResponse> localVarResponse = await ListEmployeeWagesAsyncWithHttpInfo(employeeId, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListEmployeeWages Returns a paginated list of &#x60;EmployeeWage&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Filter wages returned to only those that are associated with the specified employee. (optional)</param>
        /// <param name="limit">Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Employee Wage results to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (ListEmployeeWagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListEmployeeWagesResponse>> ListEmployeeWagesAsyncWithHttpInfo (string employeeId = null, int? limit = null, string cursor = null)
        {

            var localVarPath = "/v2/labor/employee-wages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (employeeId != null) localVarQueryParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmployeeWages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListEmployeeWagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (ListEmployeeWagesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListEmployeeWagesResponse)));
            
        }

        /// <summary>
        /// ListWorkweekConfigs Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
        /// <returns>ListWorkweekConfigsResponse</returns>
        public ListWorkweekConfigsResponse ListWorkweekConfigs (int? limit = null, string cursor = null)
        {
             ApiResponse<ListWorkweekConfigsResponse> localVarResponse = ListWorkweekConfigsWithHttpInfo(limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListWorkweekConfigs Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
        /// <returns>ApiResponse of ListWorkweekConfigsResponse</returns>
        public ApiResponse< ListWorkweekConfigsResponse > ListWorkweekConfigsWithHttpInfo (int? limit = null, string cursor = null)
        {

            var localVarPath = "/v2/labor/workweek-configs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListWorkweekConfigs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListWorkweekConfigsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (ListWorkweekConfigsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListWorkweekConfigsResponse)));
            
        }

        /// <summary>
        /// ListWorkweekConfigs Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
        /// <returns>Task of ListWorkweekConfigsResponse</returns>
        public async System.Threading.Tasks.Task<ListWorkweekConfigsResponse> ListWorkweekConfigsAsync (int? limit = null, string cursor = null)
        {
             ApiResponse<ListWorkweekConfigsResponse> localVarResponse = await ListWorkweekConfigsAsyncWithHttpInfo(limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListWorkweekConfigs Returns a list of &#x60;WorkweekConfig&#x60; instances for a business.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of Workweek Configs to return per page. (optional)</param>
        /// <param name="cursor">Pointer to the next page of Workweek Config results to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (ListWorkweekConfigsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListWorkweekConfigsResponse>> ListWorkweekConfigsAsyncWithHttpInfo (int? limit = null, string cursor = null)
        {

            var localVarPath = "/v2/labor/workweek-configs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListWorkweekConfigs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListWorkweekConfigsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (ListWorkweekConfigsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListWorkweekConfigsResponse)));
            
        }

        /// <summary>
        /// SearchShifts Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>SearchShiftsResponse</returns>
        public SearchShiftsResponse SearchShifts (SearchShiftsRequest body)
        {
             ApiResponse<SearchShiftsResponse> localVarResponse = SearchShiftsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// SearchShifts Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of SearchShiftsResponse</returns>
        public ApiResponse< SearchShiftsResponse > SearchShiftsWithHttpInfo (SearchShiftsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->SearchShifts");

            var localVarPath = "/v2/labor/shifts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchShifts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchShiftsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (SearchShiftsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchShiftsResponse)));
            
        }

        /// <summary>
        /// SearchShifts Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of SearchShiftsResponse</returns>
        public async System.Threading.Tasks.Task<SearchShiftsResponse> SearchShiftsAsync (SearchShiftsRequest body)
        {
             ApiResponse<SearchShiftsResponse> localVarResponse = await SearchShiftsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// SearchShifts Returns a paginated list of &#x60;Shift&#x60; records for a business.  The list to be returned can be filtered by: - Location IDs **and** - employee IDs **and** - shift status (&#x60;OPEN&#x60;, &#x60;CLOSED&#x60;) **and** - shift start **and** - shift end **and** - work day details  The list can be sorted by: - &#x60;start_at&#x60; - &#x60;end_at&#x60; - &#x60;created_at&#x60; - &#x60;updated_at&#x60;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (SearchShiftsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchShiftsResponse>> SearchShiftsAsyncWithHttpInfo (SearchShiftsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->SearchShifts");

            var localVarPath = "/v2/labor/shifts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchShifts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchShiftsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (SearchShiftsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchShiftsResponse)));
            
        }

        /// <summary>
        /// UpdateBreakType Updates an existing &#x60;BreakType&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>UpdateBreakTypeResponse</returns>
        public UpdateBreakTypeResponse UpdateBreakType (string id, UpdateBreakTypeRequest body)
        {
             ApiResponse<UpdateBreakTypeResponse> localVarResponse = UpdateBreakTypeWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateBreakType Updates an existing &#x60;BreakType&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of UpdateBreakTypeResponse</returns>
        public ApiResponse< UpdateBreakTypeResponse > UpdateBreakTypeWithHttpInfo (string id, UpdateBreakTypeRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->UpdateBreakType");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->UpdateBreakType");

            var localVarPath = "/v2/labor/break-types/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBreakType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateBreakTypeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (UpdateBreakTypeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateBreakTypeResponse)));
            
        }

        /// <summary>
        /// UpdateBreakType Updates an existing &#x60;BreakType&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of UpdateBreakTypeResponse</returns>
        public async System.Threading.Tasks.Task<UpdateBreakTypeResponse> UpdateBreakTypeAsync (string id, UpdateBreakTypeRequest body)
        {
             ApiResponse<UpdateBreakTypeResponse> localVarResponse = await UpdateBreakTypeAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateBreakType Updates an existing &#x60;BreakType&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;BreakType&#x60; being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (UpdateBreakTypeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateBreakTypeResponse>> UpdateBreakTypeAsyncWithHttpInfo (string id, UpdateBreakTypeRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->UpdateBreakType");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->UpdateBreakType");

            var localVarPath = "/v2/labor/break-types/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBreakType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateBreakTypeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (UpdateBreakTypeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateBreakTypeResponse)));
            
        }

        /// <summary>
        /// UpdateShift Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>UpdateShiftResponse</returns>
        public UpdateShiftResponse UpdateShift (string id, UpdateShiftRequest body)
        {
             ApiResponse<UpdateShiftResponse> localVarResponse = UpdateShiftWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateShift Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of UpdateShiftResponse</returns>
        public ApiResponse< UpdateShiftResponse > UpdateShiftWithHttpInfo (string id, UpdateShiftRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->UpdateShift");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->UpdateShift");

            var localVarPath = "/v2/labor/shifts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateShiftResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (UpdateShiftResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateShiftResponse)));
            
        }

        /// <summary>
        /// UpdateShift Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of UpdateShiftResponse</returns>
        public async System.Threading.Tasks.Task<UpdateShiftResponse> UpdateShiftAsync (string id, UpdateShiftRequest body)
        {
             ApiResponse<UpdateShiftResponse> localVarResponse = await UpdateShiftAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateShift Updates an existing &#x60;Shift&#x60;.   When adding a &#x60;Break&#x60; to a &#x60;Shift&#x60;, any earlier &#x60;Breaks&#x60; in the &#x60;Shift&#x60; have  the &#x60;end_at&#x60; property set to a valid RFC-3339 datetime string.   When closing a &#x60;Shift&#x60;, all &#x60;Break&#x60; instances in the shift must be complete with &#x60;end_at&#x60; set on each &#x60;Break&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (UpdateShiftResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateShiftResponse>> UpdateShiftAsyncWithHttpInfo (string id, UpdateShiftRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->UpdateShift");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->UpdateShift");

            var localVarPath = "/v2/labor/shifts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateShiftResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (UpdateShiftResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateShiftResponse)));
            
        }

        /// <summary>
        /// UpdateWorkweekConfig Updates a &#x60;WorkweekConfig&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>UpdateWorkweekConfigResponse</returns>
        public UpdateWorkweekConfigResponse UpdateWorkweekConfig (string id, UpdateWorkweekConfigRequest body)
        {
             ApiResponse<UpdateWorkweekConfigResponse> localVarResponse = UpdateWorkweekConfigWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateWorkweekConfig Updates a &#x60;WorkweekConfig&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of UpdateWorkweekConfigResponse</returns>
        public ApiResponse< UpdateWorkweekConfigResponse > UpdateWorkweekConfigWithHttpInfo (string id, UpdateWorkweekConfigRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->UpdateWorkweekConfig");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->UpdateWorkweekConfig");

            var localVarPath = "/v2/labor/workweek-configs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkweekConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateWorkweekConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (UpdateWorkweekConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateWorkweekConfigResponse)));
            
        }

        /// <summary>
        /// UpdateWorkweekConfig Updates a &#x60;WorkweekConfig&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of UpdateWorkweekConfigResponse</returns>
        public async System.Threading.Tasks.Task<UpdateWorkweekConfigResponse> UpdateWorkweekConfigAsync (string id, UpdateWorkweekConfigRequest body)
        {
             ApiResponse<UpdateWorkweekConfigResponse> localVarResponse = await UpdateWorkweekConfigAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateWorkweekConfig Updates a &#x60;WorkweekConfig&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UUID for the &#x60;WorkweekConfig&#x60; object being updated.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (UpdateWorkweekConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateWorkweekConfigResponse>> UpdateWorkweekConfigAsyncWithHttpInfo (string id, UpdateWorkweekConfigRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LaborApi->UpdateWorkweekConfig");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LaborApi->UpdateWorkweekConfig");

            var localVarPath = "/v2/labor/workweek-configs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-11-20");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWorkweekConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateWorkweekConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (UpdateWorkweekConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateWorkweekConfigResponse)));
            
        }

    }
}
