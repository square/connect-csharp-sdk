/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Square.Connect.Client;
using Square.Connect.Model;

namespace Square.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefundsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GetPaymentRefund
        /// </summary>
        /// <remarks>
        /// Retrieves a specific &#x60;Refund&#x60; using the &#x60;refund_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">Unique ID for the desired &#x60;PaymentRefund&#x60;.</param>
        /// <returns>GetPaymentRefundResponse</returns>        GetPaymentRefundResponse GetPaymentRefund (string refundId);

        /// <summary>
        /// GetPaymentRefund
        /// </summary>
        /// <remarks>
        /// Retrieves a specific &#x60;Refund&#x60; using the &#x60;refund_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">Unique ID for the desired &#x60;PaymentRefund&#x60;.</param>
        /// <returns>ApiResponse of GetPaymentRefundResponse</returns>
        ApiResponse<GetPaymentRefundResponse> GetPaymentRefundWithHttpInfo (string refundId);
        /// <summary>
        /// ListPaymentRefunds
        /// </summary>
        /// <remarks>
        /// Retrieves a list of refunds for the account making the request.  Max results per page: 100
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment. (optional)</param>
        /// <param name="status">If provided, only refunds with the given status are returned.  For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status. (optional)</param>
        /// <param name="sourceType">If provided, only refunds with the given source type are returned.  - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment  source.  Default: If omitted refunds are returned regardless of source type. (optional)</param>
        /// <returns>ListPaymentRefundsResponse</returns>        ListPaymentRefundsResponse ListPaymentRefunds (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, string status = null, string sourceType = null);

        /// <summary>
        /// ListPaymentRefunds
        /// </summary>
        /// <remarks>
        /// Retrieves a list of refunds for the account making the request.  Max results per page: 100
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment. (optional)</param>
        /// <param name="status">If provided, only refunds with the given status are returned.  For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status. (optional)</param>
        /// <param name="sourceType">If provided, only refunds with the given source type are returned.  - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment  source.  Default: If omitted refunds are returned regardless of source type. (optional)</param>
        /// <returns>ApiResponse of ListPaymentRefundsResponse</returns>
        ApiResponse<ListPaymentRefundsResponse> ListPaymentRefundsWithHttpInfo (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, string status = null, string sourceType = null);
        /// <summary>
        /// RefundPayment
        /// </summary>
        /// <remarks>
        /// Refunds a payment. You can refund the entire payment amount or a  portion of it. For more information, see  [Payments and Refunds Overview](/payments-api/overview).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>RefundPaymentResponse</returns>        RefundPaymentResponse RefundPayment (RefundPaymentRequest body);

        /// <summary>
        /// RefundPayment
        /// </summary>
        /// <remarks>
        /// Refunds a payment. You can refund the entire payment amount or a  portion of it. For more information, see  [Payments and Refunds Overview](/payments-api/overview).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of RefundPaymentResponse</returns>
        ApiResponse<RefundPaymentResponse> RefundPaymentWithHttpInfo (RefundPaymentRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// GetPaymentRefund
        /// </summary>
        /// <remarks>
        /// Retrieves a specific &#x60;Refund&#x60; using the &#x60;refund_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">Unique ID for the desired &#x60;PaymentRefund&#x60;.</param>
        /// <returns>Task of GetPaymentRefundResponse</returns>
        System.Threading.Tasks.Task<GetPaymentRefundResponse> GetPaymentRefundAsync (string refundId);

        /// <summary>
        /// GetPaymentRefund
        /// </summary>
        /// <remarks>
        /// Retrieves a specific &#x60;Refund&#x60; using the &#x60;refund_id&#x60;.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">Unique ID for the desired &#x60;PaymentRefund&#x60;.</param>
        /// <returns>Task of ApiResponse (GetPaymentRefundResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentRefundResponse>> GetPaymentRefundAsyncWithHttpInfo (string refundId);
        /// <summary>
        /// ListPaymentRefunds
        /// </summary>
        /// <remarks>
        /// Retrieves a list of refunds for the account making the request.  Max results per page: 100
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment. (optional)</param>
        /// <param name="status">If provided, only refunds with the given status are returned.  For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status. (optional)</param>
        /// <param name="sourceType">If provided, only refunds with the given source type are returned.  - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment  source.  Default: If omitted refunds are returned regardless of source type. (optional)</param>
        /// <returns>Task of ListPaymentRefundsResponse</returns>
        System.Threading.Tasks.Task<ListPaymentRefundsResponse> ListPaymentRefundsAsync (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, string status = null, string sourceType = null);

        /// <summary>
        /// ListPaymentRefunds
        /// </summary>
        /// <remarks>
        /// Retrieves a list of refunds for the account making the request.  Max results per page: 100
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment. (optional)</param>
        /// <param name="status">If provided, only refunds with the given status are returned.  For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status. (optional)</param>
        /// <param name="sourceType">If provided, only refunds with the given source type are returned.  - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment  source.  Default: If omitted refunds are returned regardless of source type. (optional)</param>
        /// <returns>Task of ApiResponse (ListPaymentRefundsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPaymentRefundsResponse>> ListPaymentRefundsAsyncWithHttpInfo (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, string status = null, string sourceType = null);
        /// <summary>
        /// RefundPayment
        /// </summary>
        /// <remarks>
        /// Refunds a payment. You can refund the entire payment amount or a  portion of it. For more information, see  [Payments and Refunds Overview](/payments-api/overview).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of RefundPaymentResponse</returns>
        System.Threading.Tasks.Task<RefundPaymentResponse> RefundPaymentAsync (RefundPaymentRequest body);

        /// <summary>
        /// RefundPayment
        /// </summary>
        /// <remarks>
        /// Refunds a payment. You can refund the entire payment amount or a  portion of it. For more information, see  [Payments and Refunds Overview](/payments-api/overview).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (RefundPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefundPaymentResponse>> RefundPaymentAsyncWithHttpInfo (RefundPaymentRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RefundsApi : IRefundsApi
    {
        private Square.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefundsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RefundsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Square.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// GetPaymentRefund Retrieves a specific &#x60;Refund&#x60; using the &#x60;refund_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">Unique ID for the desired &#x60;PaymentRefund&#x60;.</param>
        /// <returns>GetPaymentRefundResponse</returns>
        public GetPaymentRefundResponse GetPaymentRefund (string refundId)
        {
             ApiResponse<GetPaymentRefundResponse> localVarResponse = GetPaymentRefundWithHttpInfo(refundId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GetPaymentRefund Retrieves a specific &#x60;Refund&#x60; using the &#x60;refund_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">Unique ID for the desired &#x60;PaymentRefund&#x60;.</param>
        /// <returns>ApiResponse of GetPaymentRefundResponse</returns>
        public ApiResponse< GetPaymentRefundResponse > GetPaymentRefundWithHttpInfo (string refundId)
        {
            // verify the required parameter 'refundId' is set
            if (refundId == null)
                throw new ApiException(400, "Missing required parameter 'refundId' when calling RefundsApi->GetPaymentRefund");

            var localVarPath = "/v2/refunds/{refund_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (refundId != null) localVarPathParams.Add("refund_id", Configuration.ApiClient.ParameterToString(refundId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentRefund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPaymentRefundResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (GetPaymentRefundResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPaymentRefundResponse)));
            
        }

        /// <summary>
        /// GetPaymentRefund Retrieves a specific &#x60;Refund&#x60; using the &#x60;refund_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">Unique ID for the desired &#x60;PaymentRefund&#x60;.</param>
        /// <returns>Task of GetPaymentRefundResponse</returns>
        public async System.Threading.Tasks.Task<GetPaymentRefundResponse> GetPaymentRefundAsync (string refundId)
        {
             ApiResponse<GetPaymentRefundResponse> localVarResponse = await GetPaymentRefundAsyncWithHttpInfo(refundId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GetPaymentRefund Retrieves a specific &#x60;Refund&#x60; using the &#x60;refund_id&#x60;.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">Unique ID for the desired &#x60;PaymentRefund&#x60;.</param>
        /// <returns>Task of ApiResponse (GetPaymentRefundResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPaymentRefundResponse>> GetPaymentRefundAsyncWithHttpInfo (string refundId)
        {
            // verify the required parameter 'refundId' is set
            if (refundId == null)
                throw new ApiException(400, "Missing required parameter 'refundId' when calling RefundsApi->GetPaymentRefund");

            var localVarPath = "/v2/refunds/{refund_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (refundId != null) localVarPathParams.Add("refund_id", Configuration.ApiClient.ParameterToString(refundId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentRefund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPaymentRefundResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (GetPaymentRefundResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPaymentRefundResponse)));
            
        }

        /// <summary>
        /// ListPaymentRefunds Retrieves a list of refunds for the account making the request.  Max results per page: 100
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment. (optional)</param>
        /// <param name="status">If provided, only refunds with the given status are returned.  For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status. (optional)</param>
        /// <param name="sourceType">If provided, only refunds with the given source type are returned.  - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment  source.  Default: If omitted refunds are returned regardless of source type. (optional)</param>
        /// <returns>ListPaymentRefundsResponse</returns>
        public ListPaymentRefundsResponse ListPaymentRefunds (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, string status = null, string sourceType = null)
        {
             ApiResponse<ListPaymentRefundsResponse> localVarResponse = ListPaymentRefundsWithHttpInfo(beginTime, endTime, sortOrder, cursor, locationId, status, sourceType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListPaymentRefunds Retrieves a list of refunds for the account making the request.  Max results per page: 100
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment. (optional)</param>
        /// <param name="status">If provided, only refunds with the given status are returned.  For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status. (optional)</param>
        /// <param name="sourceType">If provided, only refunds with the given source type are returned.  - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment  source.  Default: If omitted refunds are returned regardless of source type. (optional)</param>
        /// <returns>ApiResponse of ListPaymentRefundsResponse</returns>
        public ApiResponse< ListPaymentRefundsResponse > ListPaymentRefundsWithHttpInfo (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, string status = null, string sourceType = null)
        {

            var localVarPath = "/v2/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sort_order", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter
            if (locationId != null) localVarQueryParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (sourceType != null) localVarQueryParams.Add("source_type", Configuration.ApiClient.ParameterToString(sourceType)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPaymentRefunds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPaymentRefundsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (ListPaymentRefundsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPaymentRefundsResponse)));
            
        }

        /// <summary>
        /// ListPaymentRefunds Retrieves a list of refunds for the account making the request.  Max results per page: 100
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment. (optional)</param>
        /// <param name="status">If provided, only refunds with the given status are returned.  For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status. (optional)</param>
        /// <param name="sourceType">If provided, only refunds with the given source type are returned.  - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment  source.  Default: If omitted refunds are returned regardless of source type. (optional)</param>
        /// <returns>Task of ListPaymentRefundsResponse</returns>
        public async System.Threading.Tasks.Task<ListPaymentRefundsResponse> ListPaymentRefundsAsync (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, string status = null, string sourceType = null)
        {
             ApiResponse<ListPaymentRefundsResponse> localVarResponse = await ListPaymentRefundsAsyncWithHttpInfo(beginTime, endTime, sortOrder, cursor, locationId, status, sourceType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListPaymentRefunds Retrieves a list of refunds for the account making the request.  Max results per page: 100
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment. (optional)</param>
        /// <param name="status">If provided, only refunds with the given status are returned.  For a list of refund status values, see &#x60;PaymentRefund&#x60;.  Default: If omitted refunds are returned regardless of status. (optional)</param>
        /// <param name="sourceType">If provided, only refunds with the given source type are returned.  - &#x60;CARD&#x60; - List refunds only for payments where card was specified as payment  source.  Default: If omitted refunds are returned regardless of source type. (optional)</param>
        /// <returns>Task of ApiResponse (ListPaymentRefundsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPaymentRefundsResponse>> ListPaymentRefundsAsyncWithHttpInfo (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, string status = null, string sourceType = null)
        {

            var localVarPath = "/v2/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sort_order", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter
            if (locationId != null) localVarQueryParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (sourceType != null) localVarQueryParams.Add("source_type", Configuration.ApiClient.ParameterToString(sourceType)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPaymentRefunds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPaymentRefundsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (ListPaymentRefundsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPaymentRefundsResponse)));
            
        }

        /// <summary>
        /// RefundPayment Refunds a payment. You can refund the entire payment amount or a  portion of it. For more information, see  [Payments and Refunds Overview](/payments-api/overview).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>RefundPaymentResponse</returns>
        public RefundPaymentResponse RefundPayment (RefundPaymentRequest body)
        {
             ApiResponse<RefundPaymentResponse> localVarResponse = RefundPaymentWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RefundPayment Refunds a payment. You can refund the entire payment amount or a  portion of it. For more information, see  [Payments and Refunds Overview](/payments-api/overview).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of RefundPaymentResponse</returns>
        public ApiResponse< RefundPaymentResponse > RefundPaymentWithHttpInfo (RefundPaymentRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RefundsApi->RefundPayment");

            var localVarPath = "/v2/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefundPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (RefundPaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefundPaymentResponse)));
            
        }

        /// <summary>
        /// RefundPayment Refunds a payment. You can refund the entire payment amount or a  portion of it. For more information, see  [Payments and Refunds Overview](/payments-api/overview).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of RefundPaymentResponse</returns>
        public async System.Threading.Tasks.Task<RefundPaymentResponse> RefundPaymentAsync (RefundPaymentRequest body)
        {
             ApiResponse<RefundPaymentResponse> localVarResponse = await RefundPaymentAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RefundPayment Refunds a payment. You can refund the entire payment amount or a  portion of it. For more information, see  [Payments and Refunds Overview](/payments-api/overview).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (RefundPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RefundPaymentResponse>> RefundPaymentAsyncWithHttpInfo (RefundPaymentRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RefundsApi->RefundPayment");

            var localVarPath = "/v2/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefundPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (RefundPaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefundPaymentResponse)));
            
        }

    }
}
