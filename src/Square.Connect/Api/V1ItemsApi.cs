/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Square.Connect.Client;
using Square.Connect.Model;

namespace Square.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV1ItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// AdjustInventory
        /// </summary>
        /// <remarks>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1InventoryEntry</returns>        V1InventoryEntry AdjustInventory (string locationId, string variationId, V1AdjustInventoryRequest body);

        /// <summary>
        /// AdjustInventory
        /// </summary>
        /// <remarks>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1InventoryEntry</returns>
        ApiResponse<V1InventoryEntry> AdjustInventoryWithHttpInfo (string locationId, string variationId, V1AdjustInventoryRequest body);
        /// <summary>
        /// ApplyFee
        /// </summary>
        /// <remarks>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>V1Item</returns>        V1Item ApplyFee (string locationId, string itemId, string feeId);

        /// <summary>
        /// ApplyFee
        /// </summary>
        /// <remarks>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> ApplyFeeWithHttpInfo (string locationId, string itemId, string feeId);
        /// <summary>
        /// ApplyModifierList
        /// </summary>
        /// <remarks>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>V1Item</returns>        V1Item ApplyModifierList (string locationId, string modifierListId, string itemId);

        /// <summary>
        /// ApplyModifierList
        /// </summary>
        /// <remarks>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> ApplyModifierListWithHttpInfo (string locationId, string modifierListId, string itemId);
        /// <summary>
        /// CreateCategory
        /// </summary>
        /// <remarks>
        /// Creates an item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Category</returns>        V1Category CreateCategory (string locationId, V1Category body);

        /// <summary>
        /// CreateCategory
        /// </summary>
        /// <remarks>
        /// Creates an item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Category</returns>
        ApiResponse<V1Category> CreateCategoryWithHttpInfo (string locationId, V1Category body);
        /// <summary>
        /// CreateDiscount
        /// </summary>
        /// <remarks>
        /// Creates a discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Discount</returns>        V1Discount CreateDiscount (string locationId, V1Discount body);

        /// <summary>
        /// CreateDiscount
        /// </summary>
        /// <remarks>
        /// Creates a discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        ApiResponse<V1Discount> CreateDiscountWithHttpInfo (string locationId, V1Discount body);
        /// <summary>
        /// CreateFee
        /// </summary>
        /// <remarks>
        /// Creates a fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Fee</returns>        V1Fee CreateFee (string locationId, V1Fee body);

        /// <summary>
        /// CreateFee
        /// </summary>
        /// <remarks>
        /// Creates a fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        ApiResponse<V1Fee> CreateFeeWithHttpInfo (string locationId, V1Fee body);
        /// <summary>
        /// CreateItem
        /// </summary>
        /// <remarks>
        /// Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Item</returns>        V1Item CreateItem (string locationId, V1Item body);

        /// <summary>
        /// CreateItem
        /// </summary>
        /// <remarks>
        /// Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> CreateItemWithHttpInfo (string locationId, V1Item body);
        /// <summary>
        /// CreateModifierList
        /// </summary>
        /// <remarks>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierList</returns>        V1ModifierList CreateModifierList (string locationId, V1ModifierList body);

        /// <summary>
        /// CreateModifierList
        /// </summary>
        /// <remarks>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        ApiResponse<V1ModifierList> CreateModifierListWithHttpInfo (string locationId, V1ModifierList body);
        /// <summary>
        /// CreateModifierOption
        /// </summary>
        /// <remarks>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierOption</returns>        V1ModifierOption CreateModifierOption (string locationId, string modifierListId, V1ModifierOption body);

        /// <summary>
        /// CreateModifierOption
        /// </summary>
        /// <remarks>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        ApiResponse<V1ModifierOption> CreateModifierOptionWithHttpInfo (string locationId, string modifierListId, V1ModifierOption body);
        /// <summary>
        /// CreatePage
        /// </summary>
        /// <remarks>
        /// Creates a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>        V1Page CreatePage (string locationId, V1Page body);

        /// <summary>
        /// CreatePage
        /// </summary>
        /// <remarks>
        /// Creates a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        ApiResponse<V1Page> CreatePageWithHttpInfo (string locationId, V1Page body);
        /// <summary>
        /// CreateVariation
        /// </summary>
        /// <remarks>
        /// Creates an item variation for an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Variation</returns>        V1Variation CreateVariation (string locationId, string itemId, V1Variation body);

        /// <summary>
        /// CreateVariation
        /// </summary>
        /// <remarks>
        /// Creates an item variation for an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        ApiResponse<V1Variation> CreateVariationWithHttpInfo (string locationId, string itemId, V1Variation body);
        /// <summary>
        /// DeleteCategory
        /// </summary>
        /// <remarks>
        /// Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>V1Category</returns>        V1Category DeleteCategory (string locationId, string categoryId);

        /// <summary>
        /// DeleteCategory
        /// </summary>
        /// <remarks>
        /// Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>ApiResponse of V1Category</returns>
        ApiResponse<V1Category> DeleteCategoryWithHttpInfo (string locationId, string categoryId);
        /// <summary>
        /// DeleteDiscount
        /// </summary>
        /// <remarks>
        /// Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>V1Discount</returns>        V1Discount DeleteDiscount (string locationId, string discountId);

        /// <summary>
        /// DeleteDiscount
        /// </summary>
        /// <remarks>
        /// Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        ApiResponse<V1Discount> DeleteDiscountWithHttpInfo (string locationId, string discountId);
        /// <summary>
        /// DeleteFee
        /// </summary>
        /// <remarks>
        /// Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>V1Fee</returns>        V1Fee DeleteFee (string locationId, string feeId);

        /// <summary>
        /// DeleteFee
        /// </summary>
        /// <remarks>
        /// Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        ApiResponse<V1Fee> DeleteFeeWithHttpInfo (string locationId, string feeId);
        /// <summary>
        /// DeleteItem
        /// </summary>
        /// <remarks>
        /// Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>V1Item</returns>        V1Item DeleteItem (string locationId, string itemId);

        /// <summary>
        /// DeleteItem
        /// </summary>
        /// <remarks>
        /// Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> DeleteItemWithHttpInfo (string locationId, string itemId);
        /// <summary>
        /// DeleteModifierList
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>V1ModifierList</returns>        V1ModifierList DeleteModifierList (string locationId, string modifierListId);

        /// <summary>
        /// DeleteModifierList
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        ApiResponse<V1ModifierList> DeleteModifierListWithHttpInfo (string locationId, string modifierListId);
        /// <summary>
        /// DeleteModifierOption
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>V1ModifierOption</returns>        V1ModifierOption DeleteModifierOption (string locationId, string modifierListId, string modifierOptionId);

        /// <summary>
        /// DeleteModifierOption
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        ApiResponse<V1ModifierOption> DeleteModifierOptionWithHttpInfo (string locationId, string modifierListId, string modifierOptionId);
        /// <summary>
        /// DeletePage
        /// </summary>
        /// <remarks>
        /// Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>V1Page</returns>        V1Page DeletePage (string locationId, string pageId);

        /// <summary>
        /// DeletePage
        /// </summary>
        /// <remarks>
        /// Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>ApiResponse of V1Page</returns>
        ApiResponse<V1Page> DeletePageWithHttpInfo (string locationId, string pageId);
        /// <summary>
        /// DeletePageCell
        /// </summary>
        /// <remarks>
        /// Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>V1Page</returns>        V1Page DeletePageCell (string locationId, string pageId, string row = null, string column = null);

        /// <summary>
        /// DeletePageCell
        /// </summary>
        /// <remarks>
        /// Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>ApiResponse of V1Page</returns>
        ApiResponse<V1Page> DeletePageCellWithHttpInfo (string locationId, string pageId, string row = null, string column = null);
        /// <summary>
        /// DeleteVariation
        /// </summary>
        /// <remarks>
        /// Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>V1Variation</returns>        V1Variation DeleteVariation (string locationId, string itemId, string variationId);

        /// <summary>
        /// DeleteVariation
        /// </summary>
        /// <remarks>
        /// Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        ApiResponse<V1Variation> DeleteVariationWithHttpInfo (string locationId, string itemId, string variationId);
        /// <summary>
        /// ListCategories
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s item categories.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>List&lt;V1Category&gt;</returns>        List<V1Category> ListCategories (string locationId);

        /// <summary>
        /// ListCategories
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s item categories.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>ApiResponse of List&lt;V1Category&gt;</returns>
        ApiResponse<List<V1Category>> ListCategoriesWithHttpInfo (string locationId);
        /// <summary>
        /// ListDiscounts
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s discounts.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>List&lt;V1Discount&gt;</returns>        List<V1Discount> ListDiscounts (string locationId);

        /// <summary>
        /// ListDiscounts
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s discounts.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>ApiResponse of List&lt;V1Discount&gt;</returns>
        ApiResponse<List<V1Discount>> ListDiscountsWithHttpInfo (string locationId);
        /// <summary>
        /// ListFees
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s fees (taxes).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>List&lt;V1Fee&gt;</returns>        List<V1Fee> ListFees (string locationId);

        /// <summary>
        /// ListFees
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s fees (taxes).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>ApiResponse of List&lt;V1Fee&gt;</returns>
        ApiResponse<List<V1Fee>> ListFeesWithHttpInfo (string locationId);
        /// <summary>
        /// ListInventory
        /// </summary>
        /// <remarks>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1InventoryEntry&gt;</returns>        List<V1InventoryEntry> ListInventory (string locationId, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListInventory
        /// </summary>
        /// <remarks>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1InventoryEntry&gt;</returns>
        ApiResponse<List<V1InventoryEntry>> ListInventoryWithHttpInfo (string locationId, int? limit = null, string batchToken = null);
        /// <summary>
        /// ListItems
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a location&#39;s items.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Item&gt;</returns>        List<V1Item> ListItems (string locationId, string batchToken = null);

        /// <summary>
        /// ListItems
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a location&#39;s items.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Item&gt;</returns>
        ApiResponse<List<V1Item>> ListItemsWithHttpInfo (string locationId, string batchToken = null);
        /// <summary>
        /// ListModifierLists
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s modifier lists.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>List&lt;V1ModifierList&gt;</returns>        List<V1ModifierList> ListModifierLists (string locationId);

        /// <summary>
        /// ListModifierLists
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s modifier lists.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>ApiResponse of List&lt;V1ModifierList&gt;</returns>
        ApiResponse<List<V1ModifierList>> ListModifierListsWithHttpInfo (string locationId);
        /// <summary>
        /// ListPages
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>List&lt;V1Page&gt;</returns>        List<V1Page> ListPages (string locationId);

        /// <summary>
        /// ListPages
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>ApiResponse of List&lt;V1Page&gt;</returns>
        ApiResponse<List<V1Page>> ListPagesWithHttpInfo (string locationId);
        /// <summary>
        /// RemoveFee
        /// </summary>
        /// <remarks>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>V1Item</returns>        V1Item RemoveFee (string locationId, string itemId, string feeId);

        /// <summary>
        /// RemoveFee
        /// </summary>
        /// <remarks>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> RemoveFeeWithHttpInfo (string locationId, string itemId, string feeId);
        /// <summary>
        /// RemoveModifierList
        /// </summary>
        /// <remarks>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>V1Item</returns>        V1Item RemoveModifierList (string locationId, string modifierListId, string itemId);

        /// <summary>
        /// RemoveModifierList
        /// </summary>
        /// <remarks>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> RemoveModifierListWithHttpInfo (string locationId, string modifierListId, string itemId);
        /// <summary>
        /// RetrieveItem
        /// </summary>
        /// <remarks>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>V1Item</returns>        V1Item RetrieveItem (string locationId, string itemId);

        /// <summary>
        /// RetrieveItem
        /// </summary>
        /// <remarks>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> RetrieveItemWithHttpInfo (string locationId, string itemId);
        /// <summary>
        /// RetrieveModifierList
        /// </summary>
        /// <remarks>
        /// Provides the details for a single modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>V1ModifierList</returns>        V1ModifierList RetrieveModifierList (string locationId, string modifierListId);

        /// <summary>
        /// RetrieveModifierList
        /// </summary>
        /// <remarks>
        /// Provides the details for a single modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        ApiResponse<V1ModifierList> RetrieveModifierListWithHttpInfo (string locationId, string modifierListId);
        /// <summary>
        /// UpdateCategory
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Category</returns>        V1Category UpdateCategory (string locationId, string categoryId, V1Category body);

        /// <summary>
        /// UpdateCategory
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Category</returns>
        ApiResponse<V1Category> UpdateCategoryWithHttpInfo (string locationId, string categoryId, V1Category body);
        /// <summary>
        /// UpdateDiscount
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Discount</returns>        V1Discount UpdateDiscount (string locationId, string discountId, V1Discount body);

        /// <summary>
        /// UpdateDiscount
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        ApiResponse<V1Discount> UpdateDiscountWithHttpInfo (string locationId, string discountId, V1Discount body);
        /// <summary>
        /// UpdateFee
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Fee</returns>        V1Fee UpdateFee (string locationId, string feeId, V1Fee body);

        /// <summary>
        /// UpdateFee
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        ApiResponse<V1Fee> UpdateFeeWithHttpInfo (string locationId, string feeId, V1Fee body);
        /// <summary>
        /// UpdateItem
        /// </summary>
        /// <remarks>
        /// Modifies the core details of an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Item</returns>        V1Item UpdateItem (string locationId, string itemId, V1Item body);

        /// <summary>
        /// UpdateItem
        /// </summary>
        /// <remarks>
        /// Modifies the core details of an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Item</returns>
        ApiResponse<V1Item> UpdateItemWithHttpInfo (string locationId, string itemId, V1Item body);
        /// <summary>
        /// UpdateModifierList
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierList</returns>        V1ModifierList UpdateModifierList (string locationId, string modifierListId, V1UpdateModifierListRequest body);

        /// <summary>
        /// UpdateModifierList
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        ApiResponse<V1ModifierList> UpdateModifierListWithHttpInfo (string locationId, string modifierListId, V1UpdateModifierListRequest body);
        /// <summary>
        /// UpdateModifierOption
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier option.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierOption</returns>        V1ModifierOption UpdateModifierOption (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body);

        /// <summary>
        /// UpdateModifierOption
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier option.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        ApiResponse<V1ModifierOption> UpdateModifierOptionWithHttpInfo (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body);
        /// <summary>
        /// UpdatePage
        /// </summary>
        /// <remarks>
        /// Modifies the details of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>        V1Page UpdatePage (string locationId, string pageId, V1Page body);

        /// <summary>
        /// UpdatePage
        /// </summary>
        /// <remarks>
        /// Modifies the details of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        ApiResponse<V1Page> UpdatePageWithHttpInfo (string locationId, string pageId, V1Page body);
        /// <summary>
        /// UpdatePageCell
        /// </summary>
        /// <remarks>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>        V1Page UpdatePageCell (string locationId, string pageId, V1PageCell body);

        /// <summary>
        /// UpdatePageCell
        /// </summary>
        /// <remarks>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        ApiResponse<V1Page> UpdatePageCellWithHttpInfo (string locationId, string pageId, V1PageCell body);
        /// <summary>
        /// UpdateVariation
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item variation.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Variation</returns>        V1Variation UpdateVariation (string locationId, string itemId, string variationId, V1Variation body);

        /// <summary>
        /// UpdateVariation
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item variation.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        ApiResponse<V1Variation> UpdateVariationWithHttpInfo (string locationId, string itemId, string variationId, V1Variation body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// AdjustInventory
        /// </summary>
        /// <remarks>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1InventoryEntry</returns>
        System.Threading.Tasks.Task<V1InventoryEntry> AdjustInventoryAsync (string locationId, string variationId, V1AdjustInventoryRequest body);

        /// <summary>
        /// AdjustInventory
        /// </summary>
        /// <remarks>
        /// Adjusts an item variation&#39;s current available inventory.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1InventoryEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1InventoryEntry>> AdjustInventoryAsyncWithHttpInfo (string locationId, string variationId, V1AdjustInventoryRequest body);
        /// <summary>
        /// ApplyFee
        /// </summary>
        /// <remarks>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> ApplyFeeAsync (string locationId, string itemId, string feeId);

        /// <summary>
        /// ApplyFee
        /// </summary>
        /// <remarks>
        /// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> ApplyFeeAsyncWithHttpInfo (string locationId, string itemId, string feeId);
        /// <summary>
        /// ApplyModifierList
        /// </summary>
        /// <remarks>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> ApplyModifierListAsync (string locationId, string modifierListId, string itemId);

        /// <summary>
        /// ApplyModifierList
        /// </summary>
        /// <remarks>
        /// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> ApplyModifierListAsyncWithHttpInfo (string locationId, string modifierListId, string itemId);
        /// <summary>
        /// CreateCategory
        /// </summary>
        /// <remarks>
        /// Creates an item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Category</returns>
        System.Threading.Tasks.Task<V1Category> CreateCategoryAsync (string locationId, V1Category body);

        /// <summary>
        /// CreateCategory
        /// </summary>
        /// <remarks>
        /// Creates an item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Category>> CreateCategoryAsyncWithHttpInfo (string locationId, V1Category body);
        /// <summary>
        /// CreateDiscount
        /// </summary>
        /// <remarks>
        /// Creates a discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Discount</returns>
        System.Threading.Tasks.Task<V1Discount> CreateDiscountAsync (string locationId, V1Discount body);

        /// <summary>
        /// CreateDiscount
        /// </summary>
        /// <remarks>
        /// Creates a discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Discount>> CreateDiscountAsyncWithHttpInfo (string locationId, V1Discount body);
        /// <summary>
        /// CreateFee
        /// </summary>
        /// <remarks>
        /// Creates a fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Fee</returns>
        System.Threading.Tasks.Task<V1Fee> CreateFeeAsync (string locationId, V1Fee body);

        /// <summary>
        /// CreateFee
        /// </summary>
        /// <remarks>
        /// Creates a fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Fee>> CreateFeeAsyncWithHttpInfo (string locationId, V1Fee body);
        /// <summary>
        /// CreateItem
        /// </summary>
        /// <remarks>
        /// Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> CreateItemAsync (string locationId, V1Item body);

        /// <summary>
        /// CreateItem
        /// </summary>
        /// <remarks>
        /// Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> CreateItemAsyncWithHttpInfo (string locationId, V1Item body);
        /// <summary>
        /// CreateModifierList
        /// </summary>
        /// <remarks>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierList</returns>
        System.Threading.Tasks.Task<V1ModifierList> CreateModifierListAsync (string locationId, V1ModifierList body);

        /// <summary>
        /// CreateModifierList
        /// </summary>
        /// <remarks>
        /// Creates an item modifier list and at least one modifier option for it.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> CreateModifierListAsyncWithHttpInfo (string locationId, V1ModifierList body);
        /// <summary>
        /// CreateModifierOption
        /// </summary>
        /// <remarks>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierOption</returns>
        System.Threading.Tasks.Task<V1ModifierOption> CreateModifierOptionAsync (string locationId, string modifierListId, V1ModifierOption body);

        /// <summary>
        /// CreateModifierOption
        /// </summary>
        /// <remarks>
        /// Creates an item modifier option and adds it to a modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> CreateModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, V1ModifierOption body);
        /// <summary>
        /// CreatePage
        /// </summary>
        /// <remarks>
        /// Creates a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        System.Threading.Tasks.Task<V1Page> CreatePageAsync (string locationId, V1Page body);

        /// <summary>
        /// CreatePage
        /// </summary>
        /// <remarks>
        /// Creates a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Page>> CreatePageAsyncWithHttpInfo (string locationId, V1Page body);
        /// <summary>
        /// CreateVariation
        /// </summary>
        /// <remarks>
        /// Creates an item variation for an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Variation</returns>
        System.Threading.Tasks.Task<V1Variation> CreateVariationAsync (string locationId, string itemId, V1Variation body);

        /// <summary>
        /// CreateVariation
        /// </summary>
        /// <remarks>
        /// Creates an item variation for an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Variation>> CreateVariationAsyncWithHttpInfo (string locationId, string itemId, V1Variation body);
        /// <summary>
        /// DeleteCategory
        /// </summary>
        /// <remarks>
        /// Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>Task of V1Category</returns>
        System.Threading.Tasks.Task<V1Category> DeleteCategoryAsync (string locationId, string categoryId);

        /// <summary>
        /// DeleteCategory
        /// </summary>
        /// <remarks>
        /// Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Category>> DeleteCategoryAsyncWithHttpInfo (string locationId, string categoryId);
        /// <summary>
        /// DeleteDiscount
        /// </summary>
        /// <remarks>
        /// Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>Task of V1Discount</returns>
        System.Threading.Tasks.Task<V1Discount> DeleteDiscountAsync (string locationId, string discountId);

        /// <summary>
        /// DeleteDiscount
        /// </summary>
        /// <remarks>
        /// Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Discount>> DeleteDiscountAsyncWithHttpInfo (string locationId, string discountId);
        /// <summary>
        /// DeleteFee
        /// </summary>
        /// <remarks>
        /// Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>Task of V1Fee</returns>
        System.Threading.Tasks.Task<V1Fee> DeleteFeeAsync (string locationId, string feeId);

        /// <summary>
        /// DeleteFee
        /// </summary>
        /// <remarks>
        /// Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Fee>> DeleteFeeAsyncWithHttpInfo (string locationId, string feeId);
        /// <summary>
        /// DeleteItem
        /// </summary>
        /// <remarks>
        /// Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> DeleteItemAsync (string locationId, string itemId);

        /// <summary>
        /// DeleteItem
        /// </summary>
        /// <remarks>
        /// Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> DeleteItemAsyncWithHttpInfo (string locationId, string itemId);
        /// <summary>
        /// DeleteModifierList
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>Task of V1ModifierList</returns>
        System.Threading.Tasks.Task<V1ModifierList> DeleteModifierListAsync (string locationId, string modifierListId);

        /// <summary>
        /// DeleteModifierList
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> DeleteModifierListAsyncWithHttpInfo (string locationId, string modifierListId);
        /// <summary>
        /// DeleteModifierOption
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>Task of V1ModifierOption</returns>
        System.Threading.Tasks.Task<V1ModifierOption> DeleteModifierOptionAsync (string locationId, string modifierListId, string modifierOptionId);

        /// <summary>
        /// DeleteModifierOption
        /// </summary>
        /// <remarks>
        /// Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> DeleteModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, string modifierOptionId);
        /// <summary>
        /// DeletePage
        /// </summary>
        /// <remarks>
        /// Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>Task of V1Page</returns>
        System.Threading.Tasks.Task<V1Page> DeletePageAsync (string locationId, string pageId);

        /// <summary>
        /// DeletePage
        /// </summary>
        /// <remarks>
        /// Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Page>> DeletePageAsyncWithHttpInfo (string locationId, string pageId);
        /// <summary>
        /// DeletePageCell
        /// </summary>
        /// <remarks>
        /// Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>Task of V1Page</returns>
        System.Threading.Tasks.Task<V1Page> DeletePageCellAsync (string locationId, string pageId, string row = null, string column = null);

        /// <summary>
        /// DeletePageCell
        /// </summary>
        /// <remarks>
        /// Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Page>> DeletePageCellAsyncWithHttpInfo (string locationId, string pageId, string row = null, string column = null);
        /// <summary>
        /// DeleteVariation
        /// </summary>
        /// <remarks>
        /// Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>Task of V1Variation</returns>
        System.Threading.Tasks.Task<V1Variation> DeleteVariationAsync (string locationId, string itemId, string variationId);

        /// <summary>
        /// DeleteVariation
        /// </summary>
        /// <remarks>
        /// Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Variation>> DeleteVariationAsyncWithHttpInfo (string locationId, string itemId, string variationId);
        /// <summary>
        /// ListCategories
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s item categories.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of List&lt;V1Category&gt;</returns>
        System.Threading.Tasks.Task<List<V1Category>> ListCategoriesAsync (string locationId);

        /// <summary>
        /// ListCategories
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s item categories.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Category&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Category>>> ListCategoriesAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// ListDiscounts
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s discounts.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of List&lt;V1Discount&gt;</returns>
        System.Threading.Tasks.Task<List<V1Discount>> ListDiscountsAsync (string locationId);

        /// <summary>
        /// ListDiscounts
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s discounts.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Discount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Discount>>> ListDiscountsAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// ListFees
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s fees (taxes).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>Task of List&lt;V1Fee&gt;</returns>
        System.Threading.Tasks.Task<List<V1Fee>> ListFeesAsync (string locationId);

        /// <summary>
        /// ListFees
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s fees (taxes).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Fee&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Fee>>> ListFeesAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// ListInventory
        /// </summary>
        /// <remarks>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1InventoryEntry&gt;</returns>
        System.Threading.Tasks.Task<List<V1InventoryEntry>> ListInventoryAsync (string locationId, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListInventory
        /// </summary>
        /// <remarks>
        /// Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1InventoryEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1InventoryEntry>>> ListInventoryAsyncWithHttpInfo (string locationId, int? limit = null, string batchToken = null);
        /// <summary>
        /// ListItems
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a location&#39;s items.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Item&gt;</returns>
        System.Threading.Tasks.Task<List<V1Item>> ListItemsAsync (string locationId, string batchToken = null);

        /// <summary>
        /// ListItems
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a location&#39;s items.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Item&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Item>>> ListItemsAsyncWithHttpInfo (string locationId, string batchToken = null);
        /// <summary>
        /// ListModifierLists
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s modifier lists.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>Task of List&lt;V1ModifierList&gt;</returns>
        System.Threading.Tasks.Task<List<V1ModifierList>> ListModifierListsAsync (string locationId);

        /// <summary>
        /// ListModifierLists
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s modifier lists.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1ModifierList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1ModifierList>>> ListModifierListsAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// ListPages
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>Task of List&lt;V1Page&gt;</returns>
        System.Threading.Tasks.Task<List<V1Page>> ListPagesAsync (string locationId);

        /// <summary>
        /// ListPages
        /// </summary>
        /// <remarks>
        /// Lists all of a location&#39;s Favorites pages in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Page&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Page>>> ListPagesAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// RemoveFee
        /// </summary>
        /// <remarks>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> RemoveFeeAsync (string locationId, string itemId, string feeId);

        /// <summary>
        /// RemoveFee
        /// </summary>
        /// <remarks>
        /// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> RemoveFeeAsyncWithHttpInfo (string locationId, string itemId, string feeId);
        /// <summary>
        /// RemoveModifierList
        /// </summary>
        /// <remarks>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> RemoveModifierListAsync (string locationId, string modifierListId, string itemId);

        /// <summary>
        /// RemoveModifierList
        /// </summary>
        /// <remarks>
        /// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> RemoveModifierListAsyncWithHttpInfo (string locationId, string modifierListId, string itemId);
        /// <summary>
        /// RetrieveItem
        /// </summary>
        /// <remarks>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> RetrieveItemAsync (string locationId, string itemId);

        /// <summary>
        /// RetrieveItem
        /// </summary>
        /// <remarks>
        /// Provides the details for a single item, including associated modifier lists and fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> RetrieveItemAsyncWithHttpInfo (string locationId, string itemId);
        /// <summary>
        /// RetrieveModifierList
        /// </summary>
        /// <remarks>
        /// Provides the details for a single modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>Task of V1ModifierList</returns>
        System.Threading.Tasks.Task<V1ModifierList> RetrieveModifierListAsync (string locationId, string modifierListId);

        /// <summary>
        /// RetrieveModifierList
        /// </summary>
        /// <remarks>
        /// Provides the details for a single modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> RetrieveModifierListAsyncWithHttpInfo (string locationId, string modifierListId);
        /// <summary>
        /// UpdateCategory
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Category</returns>
        System.Threading.Tasks.Task<V1Category> UpdateCategoryAsync (string locationId, string categoryId, V1Category body);

        /// <summary>
        /// UpdateCategory
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item category.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Category>> UpdateCategoryAsyncWithHttpInfo (string locationId, string categoryId, V1Category body);
        /// <summary>
        /// UpdateDiscount
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Discount</returns>
        System.Threading.Tasks.Task<V1Discount> UpdateDiscountAsync (string locationId, string discountId, V1Discount body);

        /// <summary>
        /// UpdateDiscount
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing discount.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Discount>> UpdateDiscountAsyncWithHttpInfo (string locationId, string discountId, V1Discount body);
        /// <summary>
        /// UpdateFee
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Fee</returns>
        System.Threading.Tasks.Task<V1Fee> UpdateFeeAsync (string locationId, string feeId, V1Fee body);

        /// <summary>
        /// UpdateFee
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing fee (tax).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Fee>> UpdateFeeAsyncWithHttpInfo (string locationId, string feeId, V1Fee body);
        /// <summary>
        /// UpdateItem
        /// </summary>
        /// <remarks>
        /// Modifies the core details of an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Item</returns>
        System.Threading.Tasks.Task<V1Item> UpdateItemAsync (string locationId, string itemId, V1Item body);

        /// <summary>
        /// UpdateItem
        /// </summary>
        /// <remarks>
        /// Modifies the core details of an existing item.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Item>> UpdateItemAsyncWithHttpInfo (string locationId, string itemId, V1Item body);
        /// <summary>
        /// UpdateModifierList
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierList</returns>
        System.Threading.Tasks.Task<V1ModifierList> UpdateModifierListAsync (string locationId, string modifierListId, V1UpdateModifierListRequest body);

        /// <summary>
        /// UpdateModifierList
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier list.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> UpdateModifierListAsyncWithHttpInfo (string locationId, string modifierListId, V1UpdateModifierListRequest body);
        /// <summary>
        /// UpdateModifierOption
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier option.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierOption</returns>
        System.Threading.Tasks.Task<V1ModifierOption> UpdateModifierOptionAsync (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body);

        /// <summary>
        /// UpdateModifierOption
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item modifier option.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> UpdateModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body);
        /// <summary>
        /// UpdatePage
        /// </summary>
        /// <remarks>
        /// Modifies the details of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        System.Threading.Tasks.Task<V1Page> UpdatePageAsync (string locationId, string pageId, V1Page body);

        /// <summary>
        /// UpdatePage
        /// </summary>
        /// <remarks>
        /// Modifies the details of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Page>> UpdatePageAsyncWithHttpInfo (string locationId, string pageId, V1Page body);
        /// <summary>
        /// UpdatePageCell
        /// </summary>
        /// <remarks>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        System.Threading.Tasks.Task<V1Page> UpdatePageCellAsync (string locationId, string pageId, V1PageCell body);

        /// <summary>
        /// UpdatePageCell
        /// </summary>
        /// <remarks>
        /// Modifies a cell of a Favorites page in Square Register.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Page>> UpdatePageCellAsyncWithHttpInfo (string locationId, string pageId, V1PageCell body);
        /// <summary>
        /// UpdateVariation
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item variation.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Variation</returns>
        System.Threading.Tasks.Task<V1Variation> UpdateVariationAsync (string locationId, string itemId, string variationId, V1Variation body);

        /// <summary>
        /// UpdateVariation
        /// </summary>
        /// <remarks>
        /// Modifies the details of an existing item variation.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Variation>> UpdateVariationAsyncWithHttpInfo (string locationId, string itemId, string variationId, V1Variation body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V1ItemsApi : IV1ItemsApi
    {
        private Square.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V1ItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public V1ItemsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V1ItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V1ItemsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Square.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// AdjustInventory Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1InventoryEntry</returns>
        public V1InventoryEntry AdjustInventory (string locationId, string variationId, V1AdjustInventoryRequest body)
        {
             ApiResponse<V1InventoryEntry> localVarResponse = AdjustInventoryWithHttpInfo(locationId, variationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// AdjustInventory Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1InventoryEntry</returns>
        public ApiResponse< V1InventoryEntry > AdjustInventoryWithHttpInfo (string locationId, string variationId, V1AdjustInventoryRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->AdjustInventory");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling V1ItemsApi->AdjustInventory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->AdjustInventory");

            var localVarPath = "/v1/{location_id}/inventory/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdjustInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1InventoryEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1InventoryEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1InventoryEntry)));
            
        }

        /// <summary>
        /// AdjustInventory Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1InventoryEntry</returns>
        public async System.Threading.Tasks.Task<V1InventoryEntry> AdjustInventoryAsync (string locationId, string variationId, V1AdjustInventoryRequest body)
        {
             ApiResponse<V1InventoryEntry> localVarResponse = await AdjustInventoryAsyncWithHttpInfo(locationId, variationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// AdjustInventory Adjusts an item variation&#39;s current available inventory.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="variationId">The ID of the variation to adjust inventory information for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1InventoryEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1InventoryEntry>> AdjustInventoryAsyncWithHttpInfo (string locationId, string variationId, V1AdjustInventoryRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->AdjustInventory");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling V1ItemsApi->AdjustInventory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->AdjustInventory");

            var localVarPath = "/v1/{location_id}/inventory/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdjustInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1InventoryEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1InventoryEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1InventoryEntry)));
            
        }

        /// <summary>
        /// ApplyFee Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>V1Item</returns>
        public V1Item ApplyFee (string locationId, string itemId, string feeId)
        {
             ApiResponse<V1Item> localVarResponse = ApplyFeeWithHttpInfo(locationId, itemId, feeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ApplyFee Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > ApplyFeeWithHttpInfo (string locationId, string itemId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ApplyFee");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->ApplyFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling V1ItemsApi->ApplyFee");

            var localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// ApplyFee Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> ApplyFeeAsync (string locationId, string itemId, string feeId)
        {
             ApiResponse<V1Item> localVarResponse = await ApplyFeeAsyncWithHttpInfo(locationId, itemId, feeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ApplyFee Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> ApplyFeeAsyncWithHttpInfo (string locationId, string itemId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ApplyFee");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->ApplyFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling V1ItemsApi->ApplyFee");

            var localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// ApplyModifierList Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>V1Item</returns>
        public V1Item ApplyModifierList (string locationId, string modifierListId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = ApplyModifierListWithHttpInfo(locationId, modifierListId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ApplyModifierList Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > ApplyModifierListWithHttpInfo (string locationId, string modifierListId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ApplyModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->ApplyModifierList");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->ApplyModifierList");

            var localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// ApplyModifierList Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> ApplyModifierListAsync (string locationId, string modifierListId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = await ApplyModifierListAsyncWithHttpInfo(locationId, modifierListId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ApplyModifierList Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to apply.</param>
        /// <param name="itemId">The ID of the item to add the modifier list to.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> ApplyModifierListAsyncWithHttpInfo (string locationId, string modifierListId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ApplyModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->ApplyModifierList");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->ApplyModifierList");

            var localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// CreateCategory Creates an item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Category</returns>
        public V1Category CreateCategory (string locationId, V1Category body)
        {
             ApiResponse<V1Category> localVarResponse = CreateCategoryWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateCategory Creates an item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Category</returns>
        public ApiResponse< V1Category > CreateCategoryWithHttpInfo (string locationId, V1Category body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateCategory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateCategory");

            var localVarPath = "/v1/{location_id}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// CreateCategory Creates an item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Category</returns>
        public async System.Threading.Tasks.Task<V1Category> CreateCategoryAsync (string locationId, V1Category body)
        {
             ApiResponse<V1Category> localVarResponse = await CreateCategoryAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateCategory Creates an item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Category>> CreateCategoryAsyncWithHttpInfo (string locationId, V1Category body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateCategory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateCategory");

            var localVarPath = "/v1/{location_id}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// CreateDiscount Creates a discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Discount</returns>
        public V1Discount CreateDiscount (string locationId, V1Discount body)
        {
             ApiResponse<V1Discount> localVarResponse = CreateDiscountWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateDiscount Creates a discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        public ApiResponse< V1Discount > CreateDiscountWithHttpInfo (string locationId, V1Discount body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateDiscount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateDiscount");

            var localVarPath = "/v1/{location_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// CreateDiscount Creates a discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Discount</returns>
        public async System.Threading.Tasks.Task<V1Discount> CreateDiscountAsync (string locationId, V1Discount body)
        {
             ApiResponse<V1Discount> localVarResponse = await CreateDiscountAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateDiscount Creates a discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Discount>> CreateDiscountAsyncWithHttpInfo (string locationId, V1Discount body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateDiscount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateDiscount");

            var localVarPath = "/v1/{location_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// CreateFee Creates a fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Fee</returns>
        public V1Fee CreateFee (string locationId, V1Fee body)
        {
             ApiResponse<V1Fee> localVarResponse = CreateFeeWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateFee Creates a fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        public ApiResponse< V1Fee > CreateFeeWithHttpInfo (string locationId, V1Fee body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateFee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateFee");

            var localVarPath = "/v1/{location_id}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// CreateFee Creates a fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Fee</returns>
        public async System.Threading.Tasks.Task<V1Fee> CreateFeeAsync (string locationId, V1Fee body)
        {
             ApiResponse<V1Fee> localVarResponse = await CreateFeeAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateFee Creates a fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a fee for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Fee>> CreateFeeAsyncWithHttpInfo (string locationId, V1Fee body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateFee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateFee");

            var localVarPath = "/v1/{location_id}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// CreateItem Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Item</returns>
        public V1Item CreateItem (string locationId, V1Item body)
        {
             ApiResponse<V1Item> localVarResponse = CreateItemWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateItem Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > CreateItemWithHttpInfo (string locationId, V1Item body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateItem");

            var localVarPath = "/v1/{location_id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// CreateItem Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> CreateItemAsync (string locationId, V1Item body)
        {
             ApiResponse<V1Item> localVarResponse = await CreateItemAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateItem Creates an item and at least one variation for it. Item-related entities include fields you can use to associate them with entities in a non-Square system.  When you create an item-related entity, you can optionally specify its &#x60;id&#x60;. This value must be unique among all IDs ever specified for the account, including those specified by other applications. You can never reuse an entity ID. If you do not specify an ID, Square generates one for the entity.  Item variations have a &#x60;user_data&#x60; string that lets you associate arbitrary metadata with the variation. The string cannot exceed 255 characters.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> CreateItemAsyncWithHttpInfo (string locationId, V1Item body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateItem");

            var localVarPath = "/v1/{location_id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// CreateModifierList Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierList</returns>
        public V1ModifierList CreateModifierList (string locationId, V1ModifierList body)
        {
             ApiResponse<V1ModifierList> localVarResponse = CreateModifierListWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateModifierList Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        public ApiResponse< V1ModifierList > CreateModifierListWithHttpInfo (string locationId, V1ModifierList body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateModifierList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// CreateModifierList Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierList</returns>
        public async System.Threading.Tasks.Task<V1ModifierList> CreateModifierListAsync (string locationId, V1ModifierList body)
        {
             ApiResponse<V1ModifierList> localVarResponse = await CreateModifierListAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateModifierList Creates an item modifier list and at least one modifier option for it.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create a modifier list for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> CreateModifierListAsyncWithHttpInfo (string locationId, V1ModifierList body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateModifierList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// CreateModifierOption Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierOption</returns>
        public V1ModifierOption CreateModifierOption (string locationId, string modifierListId, V1ModifierOption body)
        {
             ApiResponse<V1ModifierOption> localVarResponse = CreateModifierOptionWithHttpInfo(locationId, modifierListId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateModifierOption Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        public ApiResponse< V1ModifierOption > CreateModifierOptionWithHttpInfo (string locationId, string modifierListId, V1ModifierOption body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->CreateModifierOption");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// CreateModifierOption Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierOption</returns>
        public async System.Threading.Tasks.Task<V1ModifierOption> CreateModifierOptionAsync (string locationId, string modifierListId, V1ModifierOption body)
        {
             ApiResponse<V1ModifierOption> localVarResponse = await CreateModifierOptionAsyncWithHttpInfo(locationId, modifierListId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateModifierOption Creates an item modifier option and adds it to a modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> CreateModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, V1ModifierOption body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->CreateModifierOption");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// CreatePage Creates a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>
        public V1Page CreatePage (string locationId, V1Page body)
        {
             ApiResponse<V1Page> localVarResponse = CreatePageWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreatePage Creates a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        public ApiResponse< V1Page > CreatePageWithHttpInfo (string locationId, V1Page body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreatePage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreatePage");

            var localVarPath = "/v1/{location_id}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// CreatePage Creates a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        public async System.Threading.Tasks.Task<V1Page> CreatePageAsync (string locationId, V1Page body)
        {
             ApiResponse<V1Page> localVarResponse = await CreatePageAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreatePage Creates a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to create an item for.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Page>> CreatePageAsyncWithHttpInfo (string locationId, V1Page body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreatePage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreatePage");

            var localVarPath = "/v1/{location_id}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// CreateVariation Creates an item variation for an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Variation</returns>
        public V1Variation CreateVariation (string locationId, string itemId, V1Variation body)
        {
             ApiResponse<V1Variation> localVarResponse = CreateVariationWithHttpInfo(locationId, itemId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateVariation Creates an item variation for an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        public ApiResponse< V1Variation > CreateVariationWithHttpInfo (string locationId, string itemId, V1Variation body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->CreateVariation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

        /// <summary>
        /// CreateVariation Creates an item variation for an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Variation</returns>
        public async System.Threading.Tasks.Task<V1Variation> CreateVariationAsync (string locationId, string itemId, V1Variation body)
        {
             ApiResponse<V1Variation> localVarResponse = await CreateVariationAsyncWithHttpInfo(locationId, itemId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateVariation Creates an item variation for an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Variation>> CreateVariationAsyncWithHttpInfo (string locationId, string itemId, V1Variation body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->CreateVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->CreateVariation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->CreateVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

        /// <summary>
        /// DeleteCategory Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>V1Category</returns>
        public V1Category DeleteCategory (string locationId, string categoryId)
        {
             ApiResponse<V1Category> localVarResponse = DeleteCategoryWithHttpInfo(locationId, categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteCategory Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>ApiResponse of V1Category</returns>
        public ApiResponse< V1Category > DeleteCategoryWithHttpInfo (string locationId, string categoryId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling V1ItemsApi->DeleteCategory");

            var localVarPath = "/v1/{location_id}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// DeleteCategory Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>Task of V1Category</returns>
        public async System.Threading.Tasks.Task<V1Category> DeleteCategoryAsync (string locationId, string categoryId)
        {
             ApiResponse<V1Category> localVarResponse = await DeleteCategoryAsyncWithHttpInfo(locationId, categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteCategory Deletes an existing item category. *Note**: DeleteCategory returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteCategoryRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to delete.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Category>> DeleteCategoryAsyncWithHttpInfo (string locationId, string categoryId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling V1ItemsApi->DeleteCategory");

            var localVarPath = "/v1/{location_id}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// DeleteDiscount Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>V1Discount</returns>
        public V1Discount DeleteDiscount (string locationId, string discountId)
        {
             ApiResponse<V1Discount> localVarResponse = DeleteDiscountWithHttpInfo(locationId, discountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteDiscount Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        public ApiResponse< V1Discount > DeleteDiscountWithHttpInfo (string locationId, string discountId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteDiscount");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling V1ItemsApi->DeleteDiscount");

            var localVarPath = "/v1/{location_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// DeleteDiscount Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>Task of V1Discount</returns>
        public async System.Threading.Tasks.Task<V1Discount> DeleteDiscountAsync (string locationId, string discountId)
        {
             ApiResponse<V1Discount> localVarResponse = await DeleteDiscountAsyncWithHttpInfo(locationId, discountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteDiscount Deletes an existing discount. *Note**: DeleteDiscount returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteDiscountRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to delete.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Discount>> DeleteDiscountAsyncWithHttpInfo (string locationId, string discountId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteDiscount");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling V1ItemsApi->DeleteDiscount");

            var localVarPath = "/v1/{location_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// DeleteFee Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>V1Fee</returns>
        public V1Fee DeleteFee (string locationId, string feeId)
        {
             ApiResponse<V1Fee> localVarResponse = DeleteFeeWithHttpInfo(locationId, feeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteFee Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        public ApiResponse< V1Fee > DeleteFeeWithHttpInfo (string locationId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling V1ItemsApi->DeleteFee");

            var localVarPath = "/v1/{location_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// DeleteFee Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>Task of V1Fee</returns>
        public async System.Threading.Tasks.Task<V1Fee> DeleteFeeAsync (string locationId, string feeId)
        {
             ApiResponse<V1Fee> localVarResponse = await DeleteFeeAsyncWithHttpInfo(locationId, feeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteFee Deletes an existing fee (tax). *Note**: DeleteFee returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteFeeRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to delete.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Fee>> DeleteFeeAsyncWithHttpInfo (string locationId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling V1ItemsApi->DeleteFee");

            var localVarPath = "/v1/{location_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// DeleteItem Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>V1Item</returns>
        public V1Item DeleteItem (string locationId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = DeleteItemWithHttpInfo(locationId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteItem Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > DeleteItemWithHttpInfo (string locationId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->DeleteItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// DeleteItem Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> DeleteItemAsync (string locationId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = await DeleteItemAsyncWithHttpInfo(locationId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteItem Deletes an existing item and all item variations associated with it. *Note**: DeleteItem returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteItemRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> DeleteItemAsyncWithHttpInfo (string locationId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->DeleteItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// DeleteModifierList Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>V1ModifierList</returns>
        public V1ModifierList DeleteModifierList (string locationId, string modifierListId)
        {
             ApiResponse<V1ModifierList> localVarResponse = DeleteModifierListWithHttpInfo(locationId, modifierListId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteModifierList Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        public ApiResponse< V1ModifierList > DeleteModifierListWithHttpInfo (string locationId, string modifierListId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->DeleteModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// DeleteModifierList Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>Task of V1ModifierList</returns>
        public async System.Threading.Tasks.Task<V1ModifierList> DeleteModifierListAsync (string locationId, string modifierListId)
        {
             ApiResponse<V1ModifierList> localVarResponse = await DeleteModifierListAsyncWithHttpInfo(locationId, modifierListId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteModifierList Deletes an existing item modifier list and all modifier options associated with it. *Note**: DeleteModifierList returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierListRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> DeleteModifierListAsyncWithHttpInfo (string locationId, string modifierListId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->DeleteModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// DeleteModifierOption Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>V1ModifierOption</returns>
        public V1ModifierOption DeleteModifierOption (string locationId, string modifierListId, string modifierOptionId)
        {
             ApiResponse<V1ModifierOption> localVarResponse = DeleteModifierOptionWithHttpInfo(locationId, modifierListId, modifierOptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteModifierOption Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        public ApiResponse< V1ModifierOption > DeleteModifierOptionWithHttpInfo (string locationId, string modifierListId, string modifierOptionId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->DeleteModifierOption");
            // verify the required parameter 'modifierOptionId' is set
            if (modifierOptionId == null)
                throw new ApiException(400, "Missing required parameter 'modifierOptionId' when calling V1ItemsApi->DeleteModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (modifierOptionId != null) localVarPathParams.Add("modifier_option_id", Configuration.ApiClient.ParameterToString(modifierOptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// DeleteModifierOption Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>Task of V1ModifierOption</returns>
        public async System.Threading.Tasks.Task<V1ModifierOption> DeleteModifierOptionAsync (string locationId, string modifierListId, string modifierOptionId)
        {
             ApiResponse<V1ModifierOption> localVarResponse = await DeleteModifierOptionAsyncWithHttpInfo(locationId, modifierListId, modifierOptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteModifierOption Deletes an existing item modifier option from a modifier list. *Note**: DeleteModifierOption returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteModifierOptionRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to delete.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> DeleteModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, string modifierOptionId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->DeleteModifierOption");
            // verify the required parameter 'modifierOptionId' is set
            if (modifierOptionId == null)
                throw new ApiException(400, "Missing required parameter 'modifierOptionId' when calling V1ItemsApi->DeleteModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (modifierOptionId != null) localVarPathParams.Add("modifier_option_id", Configuration.ApiClient.ParameterToString(modifierOptionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// DeletePage Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>V1Page</returns>
        public V1Page DeletePage (string locationId, string pageId)
        {
             ApiResponse<V1Page> localVarResponse = DeletePageWithHttpInfo(locationId, pageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeletePage Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>ApiResponse of V1Page</returns>
        public ApiResponse< V1Page > DeletePageWithHttpInfo (string locationId, string pageId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeletePage");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling V1ItemsApi->DeletePage");

            var localVarPath = "/v1/{location_id}/pages/{page_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// DeletePage Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>Task of V1Page</returns>
        public async System.Threading.Tasks.Task<V1Page> DeletePageAsync (string locationId, string pageId)
        {
             ApiResponse<V1Page> localVarResponse = await DeletePageAsyncWithHttpInfo(locationId, pageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeletePage Deletes an existing Favorites page and all of its cells. *Note**: DeletePage returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Page>> DeletePageAsyncWithHttpInfo (string locationId, string pageId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeletePage");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling V1ItemsApi->DeletePage");

            var localVarPath = "/v1/{location_id}/pages/{page_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// DeletePageCell Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>V1Page</returns>
        public V1Page DeletePageCell (string locationId, string pageId, string row = null, string column = null)
        {
             ApiResponse<V1Page> localVarResponse = DeletePageCellWithHttpInfo(locationId, pageId, row, column);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeletePageCell Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>ApiResponse of V1Page</returns>
        public ApiResponse< V1Page > DeletePageCellWithHttpInfo (string locationId, string pageId, string row = null, string column = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeletePageCell");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling V1ItemsApi->DeletePageCell");

            var localVarPath = "/v1/{location_id}/pages/{page_id}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePageCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// DeletePageCell Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>Task of V1Page</returns>
        public async System.Threading.Tasks.Task<V1Page> DeletePageCellAsync (string locationId, string pageId, string row = null, string column = null)
        {
             ApiResponse<V1Page> localVarResponse = await DeletePageCellAsyncWithHttpInfo(locationId, pageId, row, column);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeletePageCell Deletes a cell from a Favorites page in Square Register. *Note**: DeletePageCell returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeletePageCellRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page to delete.</param>
        /// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
        /// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Page>> DeletePageCellAsyncWithHttpInfo (string locationId, string pageId, string row = null, string column = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeletePageCell");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling V1ItemsApi->DeletePageCell");

            var localVarPath = "/v1/{location_id}/pages/{page_id}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (row != null) localVarQueryParams.Add("row", Configuration.ApiClient.ParameterToString(row)); // query parameter
            if (column != null) localVarQueryParams.Add("column", Configuration.ApiClient.ParameterToString(column)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePageCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// DeleteVariation Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>V1Variation</returns>
        public V1Variation DeleteVariation (string locationId, string itemId, string variationId)
        {
             ApiResponse<V1Variation> localVarResponse = DeleteVariationWithHttpInfo(locationId, itemId, variationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteVariation Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        public ApiResponse< V1Variation > DeleteVariationWithHttpInfo (string locationId, string itemId, string variationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->DeleteVariation");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling V1ItemsApi->DeleteVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

        /// <summary>
        /// DeleteVariation Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>Task of V1Variation</returns>
        public async System.Threading.Tasks.Task<V1Variation> DeleteVariationAsync (string locationId, string itemId, string variationId)
        {
             ApiResponse<V1Variation> localVarResponse = await DeleteVariationAsyncWithHttpInfo(locationId, itemId, variationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteVariation Deletes an existing item variation from an item. *Note**: DeleteVariation returns nothing on success but Connect SDKs map the empty response to an empty &#x60;V1DeleteVariationRequest&#x60; object as documented below.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to delete.</param>
        /// <param name="variationId">The ID of the variation to delete.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Variation>> DeleteVariationAsyncWithHttpInfo (string locationId, string itemId, string variationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->DeleteVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->DeleteVariation");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling V1ItemsApi->DeleteVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

        /// <summary>
        /// ListCategories Lists all of a location&#39;s item categories.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>List&lt;V1Category&gt;</returns>
        public List<V1Category> ListCategories (string locationId)
        {
             ApiResponse<List<V1Category>> localVarResponse = ListCategoriesWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListCategories Lists all of a location&#39;s item categories.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>ApiResponse of List&lt;V1Category&gt;</returns>
        public ApiResponse< List<V1Category> > ListCategoriesWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListCategories");

            var localVarPath = "/v1/{location_id}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Category>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Category>)));
            
        }

        /// <summary>
        /// ListCategories Lists all of a location&#39;s item categories.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of List&lt;V1Category&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Category>> ListCategoriesAsync (string locationId)
        {
             ApiResponse<List<V1Category>> localVarResponse = await ListCategoriesAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListCategories Lists all of a location&#39;s item categories.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Category&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Category>>> ListCategoriesAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListCategories");

            var localVarPath = "/v1/{location_id}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Category>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Category>)));
            
        }

        /// <summary>
        /// ListDiscounts Lists all of a location&#39;s discounts.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>List&lt;V1Discount&gt;</returns>
        public List<V1Discount> ListDiscounts (string locationId)
        {
             ApiResponse<List<V1Discount>> localVarResponse = ListDiscountsWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListDiscounts Lists all of a location&#39;s discounts.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>ApiResponse of List&lt;V1Discount&gt;</returns>
        public ApiResponse< List<V1Discount> > ListDiscountsWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListDiscounts");

            var localVarPath = "/v1/{location_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDiscounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Discount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Discount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Discount>)));
            
        }

        /// <summary>
        /// ListDiscounts Lists all of a location&#39;s discounts.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of List&lt;V1Discount&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Discount>> ListDiscountsAsync (string locationId)
        {
             ApiResponse<List<V1Discount>> localVarResponse = await ListDiscountsAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListDiscounts Lists all of a location&#39;s discounts.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list categories for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Discount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Discount>>> ListDiscountsAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListDiscounts");

            var localVarPath = "/v1/{location_id}/discounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDiscounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Discount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Discount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Discount>)));
            
        }

        /// <summary>
        /// ListFees Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>List&lt;V1Fee&gt;</returns>
        public List<V1Fee> ListFees (string locationId)
        {
             ApiResponse<List<V1Fee>> localVarResponse = ListFeesWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListFees Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>ApiResponse of List&lt;V1Fee&gt;</returns>
        public ApiResponse< List<V1Fee> > ListFeesWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListFees");

            var localVarPath = "/v1/{location_id}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Fee>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Fee>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Fee>)));
            
        }

        /// <summary>
        /// ListFees Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>Task of List&lt;V1Fee&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Fee>> ListFeesAsync (string locationId)
        {
             ApiResponse<List<V1Fee>> localVarResponse = await ListFeesAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListFees Lists all of a location&#39;s fees (taxes).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list fees for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Fee&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Fee>>> ListFeesAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListFees");

            var localVarPath = "/v1/{location_id}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Fee>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Fee>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Fee>)));
            
        }

        /// <summary>
        /// ListInventory Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1InventoryEntry&gt;</returns>
        public List<V1InventoryEntry> ListInventory (string locationId, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1InventoryEntry>> localVarResponse = ListInventoryWithHttpInfo(locationId, limit, batchToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListInventory Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1InventoryEntry&gt;</returns>
        public ApiResponse< List<V1InventoryEntry> > ListInventoryWithHttpInfo (string locationId, int? limit = null, string batchToken = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListInventory");

            var localVarPath = "/v1/{location_id}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1InventoryEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1InventoryEntry>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1InventoryEntry>)));
            
        }

        /// <summary>
        /// ListInventory Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1InventoryEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1InventoryEntry>> ListInventoryAsync (string locationId, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1InventoryEntry>> localVarResponse = await ListInventoryAsyncWithHttpInfo(locationId, limit, batchToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListInventory Provides inventory information for all of a merchant&#39;s inventory-enabled item variations.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1InventoryEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1InventoryEntry>>> ListInventoryAsyncWithHttpInfo (string locationId, int? limit = null, string batchToken = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListInventory");

            var localVarPath = "/v1/{location_id}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1InventoryEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1InventoryEntry>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1InventoryEntry>)));
            
        }

        /// <summary>
        /// ListItems Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Item&gt;</returns>
        public List<V1Item> ListItems (string locationId, string batchToken = null)
        {
             ApiResponse<List<V1Item>> localVarResponse = ListItemsWithHttpInfo(locationId, batchToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListItems Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Item&gt;</returns>
        public ApiResponse< List<V1Item> > ListItemsWithHttpInfo (string locationId, string batchToken = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListItems");

            var localVarPath = "/v1/{location_id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Item>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Item>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Item>)));
            
        }

        /// <summary>
        /// ListItems Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Item&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Item>> ListItemsAsync (string locationId, string batchToken = null)
        {
             ApiResponse<List<V1Item>> localVarResponse = await ListItemsAsyncWithHttpInfo(locationId, batchToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListItems Provides summary information for all of a location&#39;s items.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list items for.</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Item&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Item>>> ListItemsAsyncWithHttpInfo (string locationId, string batchToken = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListItems");

            var localVarPath = "/v1/{location_id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Item>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Item>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Item>)));
            
        }

        /// <summary>
        /// ListModifierLists Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>List&lt;V1ModifierList&gt;</returns>
        public List<V1ModifierList> ListModifierLists (string locationId)
        {
             ApiResponse<List<V1ModifierList>> localVarResponse = ListModifierListsWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListModifierLists Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>ApiResponse of List&lt;V1ModifierList&gt;</returns>
        public ApiResponse< List<V1ModifierList> > ListModifierListsWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListModifierLists");

            var localVarPath = "/v1/{location_id}/modifier-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListModifierLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1ModifierList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1ModifierList>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1ModifierList>)));
            
        }

        /// <summary>
        /// ListModifierLists Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>Task of List&lt;V1ModifierList&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1ModifierList>> ListModifierListsAsync (string locationId)
        {
             ApiResponse<List<V1ModifierList>> localVarResponse = await ListModifierListsAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListModifierLists Lists all of a location&#39;s modifier lists.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list modifier lists for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1ModifierList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1ModifierList>>> ListModifierListsAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListModifierLists");

            var localVarPath = "/v1/{location_id}/modifier-lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListModifierLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1ModifierList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1ModifierList>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1ModifierList>)));
            
        }

        /// <summary>
        /// ListPages Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>List&lt;V1Page&gt;</returns>
        public List<V1Page> ListPages (string locationId)
        {
             ApiResponse<List<V1Page>> localVarResponse = ListPagesWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListPages Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>ApiResponse of List&lt;V1Page&gt;</returns>
        public ApiResponse< List<V1Page> > ListPagesWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListPages");

            var localVarPath = "/v1/{location_id}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Page>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Page>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Page>)));
            
        }

        /// <summary>
        /// ListPages Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>Task of List&lt;V1Page&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Page>> ListPagesAsync (string locationId)
        {
             ApiResponse<List<V1Page>> localVarResponse = await ListPagesAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListPages Lists all of a location&#39;s Favorites pages in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list Favorites pages for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1Page&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Page>>> ListPagesAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->ListPages");

            var localVarPath = "/v1/{location_id}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Page>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Page>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Page>)));
            
        }

        /// <summary>
        /// RemoveFee Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>V1Item</returns>
        public V1Item RemoveFee (string locationId, string itemId, string feeId)
        {
             ApiResponse<V1Item> localVarResponse = RemoveFeeWithHttpInfo(locationId, itemId, feeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RemoveFee Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > RemoveFeeWithHttpInfo (string locationId, string itemId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->RemoveFee");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->RemoveFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling V1ItemsApi->RemoveFee");

            var localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// RemoveFee Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> RemoveFeeAsync (string locationId, string itemId, string feeId)
        {
             ApiResponse<V1Item> localVarResponse = await RemoveFeeAsyncWithHttpInfo(locationId, itemId, feeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RemoveFee Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to add the fee to.</param>
        /// <param name="feeId">The ID of the fee to apply.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> RemoveFeeAsyncWithHttpInfo (string locationId, string itemId, string feeId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->RemoveFee");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->RemoveFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling V1ItemsApi->RemoveFee");

            var localVarPath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// RemoveModifierList Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>V1Item</returns>
        public V1Item RemoveModifierList (string locationId, string modifierListId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = RemoveModifierListWithHttpInfo(locationId, modifierListId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RemoveModifierList Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > RemoveModifierListWithHttpInfo (string locationId, string modifierListId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->RemoveModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->RemoveModifierList");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->RemoveModifierList");

            var localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// RemoveModifierList Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> RemoveModifierListAsync (string locationId, string modifierListId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = await RemoveModifierListAsyncWithHttpInfo(locationId, modifierListId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RemoveModifierList Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to remove.</param>
        /// <param name="itemId">The ID of the item to remove the modifier list from.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> RemoveModifierListAsyncWithHttpInfo (string locationId, string modifierListId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->RemoveModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->RemoveModifierList");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->RemoveModifierList");

            var localVarPath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// RetrieveItem Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>V1Item</returns>
        public V1Item RetrieveItem (string locationId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = RetrieveItemWithHttpInfo(locationId, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveItem Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > RetrieveItemWithHttpInfo (string locationId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->RetrieveItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->RetrieveItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// RetrieveItem Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> RetrieveItemAsync (string locationId, string itemId)
        {
             ApiResponse<V1Item> localVarResponse = await RetrieveItemAsyncWithHttpInfo(locationId, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveItem Provides the details for a single item, including associated modifier lists and fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The item&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> RetrieveItemAsyncWithHttpInfo (string locationId, string itemId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->RetrieveItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->RetrieveItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// RetrieveModifierList Provides the details for a single modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>V1ModifierList</returns>
        public V1ModifierList RetrieveModifierList (string locationId, string modifierListId)
        {
             ApiResponse<V1ModifierList> localVarResponse = RetrieveModifierListWithHttpInfo(locationId, modifierListId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveModifierList Provides the details for a single modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        public ApiResponse< V1ModifierList > RetrieveModifierListWithHttpInfo (string locationId, string modifierListId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->RetrieveModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->RetrieveModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// RetrieveModifierList Provides the details for a single modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>Task of V1ModifierList</returns>
        public async System.Threading.Tasks.Task<V1ModifierList> RetrieveModifierListAsync (string locationId, string modifierListId)
        {
             ApiResponse<V1ModifierList> localVarResponse = await RetrieveModifierListAsyncWithHttpInfo(locationId, modifierListId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveModifierList Provides the details for a single modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The modifier list&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> RetrieveModifierListAsyncWithHttpInfo (string locationId, string modifierListId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->RetrieveModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->RetrieveModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// UpdateCategory Modifies the details of an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Category</returns>
        public V1Category UpdateCategory (string locationId, string categoryId, V1Category body)
        {
             ApiResponse<V1Category> localVarResponse = UpdateCategoryWithHttpInfo(locationId, categoryId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateCategory Modifies the details of an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Category</returns>
        public ApiResponse< V1Category > UpdateCategoryWithHttpInfo (string locationId, string categoryId, V1Category body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling V1ItemsApi->UpdateCategory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateCategory");

            var localVarPath = "/v1/{location_id}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// UpdateCategory Modifies the details of an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Category</returns>
        public async System.Threading.Tasks.Task<V1Category> UpdateCategoryAsync (string locationId, string categoryId, V1Category body)
        {
             ApiResponse<V1Category> localVarResponse = await UpdateCategoryAsyncWithHttpInfo(locationId, categoryId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateCategory Modifies the details of an existing item category.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="categoryId">The ID of the category to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Category>> UpdateCategoryAsyncWithHttpInfo (string locationId, string categoryId, V1Category body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling V1ItemsApi->UpdateCategory");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateCategory");

            var localVarPath = "/v1/{location_id}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Category)));
            
        }

        /// <summary>
        /// UpdateDiscount Modifies the details of an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Discount</returns>
        public V1Discount UpdateDiscount (string locationId, string discountId, V1Discount body)
        {
             ApiResponse<V1Discount> localVarResponse = UpdateDiscountWithHttpInfo(locationId, discountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateDiscount Modifies the details of an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Discount</returns>
        public ApiResponse< V1Discount > UpdateDiscountWithHttpInfo (string locationId, string discountId, V1Discount body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateDiscount");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling V1ItemsApi->UpdateDiscount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateDiscount");

            var localVarPath = "/v1/{location_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// UpdateDiscount Modifies the details of an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Discount</returns>
        public async System.Threading.Tasks.Task<V1Discount> UpdateDiscountAsync (string locationId, string discountId, V1Discount body)
        {
             ApiResponse<V1Discount> localVarResponse = await UpdateDiscountAsyncWithHttpInfo(locationId, discountId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateDiscount Modifies the details of an existing discount.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the category&#39;s associated location.</param>
        /// <param name="discountId">The ID of the discount to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Discount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Discount>> UpdateDiscountAsyncWithHttpInfo (string locationId, string discountId, V1Discount body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateDiscount");
            // verify the required parameter 'discountId' is set
            if (discountId == null)
                throw new ApiException(400, "Missing required parameter 'discountId' when calling V1ItemsApi->UpdateDiscount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateDiscount");

            var localVarPath = "/v1/{location_id}/discounts/{discount_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (discountId != null) localVarPathParams.Add("discount_id", Configuration.ApiClient.ParameterToString(discountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Discount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Discount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Discount)));
            
        }

        /// <summary>
        /// UpdateFee Modifies the details of an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Fee</returns>
        public V1Fee UpdateFee (string locationId, string feeId, V1Fee body)
        {
             ApiResponse<V1Fee> localVarResponse = UpdateFeeWithHttpInfo(locationId, feeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateFee Modifies the details of an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Fee</returns>
        public ApiResponse< V1Fee > UpdateFeeWithHttpInfo (string locationId, string feeId, V1Fee body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling V1ItemsApi->UpdateFee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateFee");

            var localVarPath = "/v1/{location_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// UpdateFee Modifies the details of an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Fee</returns>
        public async System.Threading.Tasks.Task<V1Fee> UpdateFeeAsync (string locationId, string feeId, V1Fee body)
        {
             ApiResponse<V1Fee> localVarResponse = await UpdateFeeAsyncWithHttpInfo(locationId, feeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateFee Modifies the details of an existing fee (tax).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the fee&#39;s associated location.</param>
        /// <param name="feeId">The ID of the fee to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Fee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Fee>> UpdateFeeAsyncWithHttpInfo (string locationId, string feeId, V1Fee body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateFee");
            // verify the required parameter 'feeId' is set
            if (feeId == null)
                throw new ApiException(400, "Missing required parameter 'feeId' when calling V1ItemsApi->UpdateFee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateFee");

            var localVarPath = "/v1/{location_id}/fees/{fee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (feeId != null) localVarPathParams.Add("fee_id", Configuration.ApiClient.ParameterToString(feeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Fee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Fee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Fee)));
            
        }

        /// <summary>
        /// UpdateItem Modifies the core details of an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Item</returns>
        public V1Item UpdateItem (string locationId, string itemId, V1Item body)
        {
             ApiResponse<V1Item> localVarResponse = UpdateItemWithHttpInfo(locationId, itemId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateItem Modifies the core details of an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Item</returns>
        public ApiResponse< V1Item > UpdateItemWithHttpInfo (string locationId, string itemId, V1Item body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->UpdateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// UpdateItem Modifies the core details of an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Item</returns>
        public async System.Threading.Tasks.Task<V1Item> UpdateItemAsync (string locationId, string itemId, V1Item body)
        {
             ApiResponse<V1Item> localVarResponse = await UpdateItemAsyncWithHttpInfo(locationId, itemId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateItem Modifies the core details of an existing item.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Item>> UpdateItemAsyncWithHttpInfo (string locationId, string itemId, V1Item body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->UpdateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateItem");

            var localVarPath = "/v1/{location_id}/items/{item_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Item)));
            
        }

        /// <summary>
        /// UpdateModifierList Modifies the details of an existing item modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierList</returns>
        public V1ModifierList UpdateModifierList (string locationId, string modifierListId, V1UpdateModifierListRequest body)
        {
             ApiResponse<V1ModifierList> localVarResponse = UpdateModifierListWithHttpInfo(locationId, modifierListId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateModifierList Modifies the details of an existing item modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierList</returns>
        public ApiResponse< V1ModifierList > UpdateModifierListWithHttpInfo (string locationId, string modifierListId, V1UpdateModifierListRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->UpdateModifierList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// UpdateModifierList Modifies the details of an existing item modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierList</returns>
        public async System.Threading.Tasks.Task<V1ModifierList> UpdateModifierListAsync (string locationId, string modifierListId, V1UpdateModifierListRequest body)
        {
             ApiResponse<V1ModifierList> localVarResponse = await UpdateModifierListAsyncWithHttpInfo(locationId, modifierListId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateModifierList Modifies the details of an existing item modifier list.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierList>> UpdateModifierListAsyncWithHttpInfo (string locationId, string modifierListId, V1UpdateModifierListRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateModifierList");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->UpdateModifierList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateModifierList");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModifierList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierList)));
            
        }

        /// <summary>
        /// UpdateModifierOption Modifies the details of an existing item modifier option.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1ModifierOption</returns>
        public V1ModifierOption UpdateModifierOption (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body)
        {
             ApiResponse<V1ModifierOption> localVarResponse = UpdateModifierOptionWithHttpInfo(locationId, modifierListId, modifierOptionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateModifierOption Modifies the details of an existing item modifier option.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1ModifierOption</returns>
        public ApiResponse< V1ModifierOption > UpdateModifierOptionWithHttpInfo (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->UpdateModifierOption");
            // verify the required parameter 'modifierOptionId' is set
            if (modifierOptionId == null)
                throw new ApiException(400, "Missing required parameter 'modifierOptionId' when calling V1ItemsApi->UpdateModifierOption");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (modifierOptionId != null) localVarPathParams.Add("modifier_option_id", Configuration.ApiClient.ParameterToString(modifierOptionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// UpdateModifierOption Modifies the details of an existing item modifier option.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1ModifierOption</returns>
        public async System.Threading.Tasks.Task<V1ModifierOption> UpdateModifierOptionAsync (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body)
        {
             ApiResponse<V1ModifierOption> localVarResponse = await UpdateModifierOptionAsyncWithHttpInfo(locationId, modifierListId, modifierOptionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateModifierOption Modifies the details of an existing item modifier option.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="modifierListId">The ID of the modifier list to edit.</param>
        /// <param name="modifierOptionId">The ID of the modifier list to edit.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1ModifierOption)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1ModifierOption>> UpdateModifierOptionAsyncWithHttpInfo (string locationId, string modifierListId, string modifierOptionId, V1ModifierOption body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateModifierOption");
            // verify the required parameter 'modifierListId' is set
            if (modifierListId == null)
                throw new ApiException(400, "Missing required parameter 'modifierListId' when calling V1ItemsApi->UpdateModifierOption");
            // verify the required parameter 'modifierOptionId' is set
            if (modifierOptionId == null)
                throw new ApiException(400, "Missing required parameter 'modifierOptionId' when calling V1ItemsApi->UpdateModifierOption");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateModifierOption");

            var localVarPath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (modifierListId != null) localVarPathParams.Add("modifier_list_id", Configuration.ApiClient.ParameterToString(modifierListId)); // path parameter
            if (modifierOptionId != null) localVarPathParams.Add("modifier_option_id", Configuration.ApiClient.ParameterToString(modifierOptionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModifierOption", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1ModifierOption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1ModifierOption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1ModifierOption)));
            
        }

        /// <summary>
        /// UpdatePage Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>
        public V1Page UpdatePage (string locationId, string pageId, V1Page body)
        {
             ApiResponse<V1Page> localVarResponse = UpdatePageWithHttpInfo(locationId, pageId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdatePage Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        public ApiResponse< V1Page > UpdatePageWithHttpInfo (string locationId, string pageId, V1Page body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdatePage");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling V1ItemsApi->UpdatePage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdatePage");

            var localVarPath = "/v1/{location_id}/pages/{page_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// UpdatePage Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        public async System.Threading.Tasks.Task<V1Page> UpdatePageAsync (string locationId, string pageId, V1Page body)
        {
             ApiResponse<V1Page> localVarResponse = await UpdatePageAsyncWithHttpInfo(locationId, pageId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdatePage Modifies the details of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location</param>
        /// <param name="pageId">The ID of the page to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Page>> UpdatePageAsyncWithHttpInfo (string locationId, string pageId, V1Page body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdatePage");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling V1ItemsApi->UpdatePage");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdatePage");

            var localVarPath = "/v1/{location_id}/pages/{page_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// UpdatePageCell Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Page</returns>
        public V1Page UpdatePageCell (string locationId, string pageId, V1PageCell body)
        {
             ApiResponse<V1Page> localVarResponse = UpdatePageCellWithHttpInfo(locationId, pageId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdatePageCell Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Page</returns>
        public ApiResponse< V1Page > UpdatePageCellWithHttpInfo (string locationId, string pageId, V1PageCell body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdatePageCell");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling V1ItemsApi->UpdatePageCell");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdatePageCell");

            var localVarPath = "/v1/{location_id}/pages/{page_id}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePageCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// UpdatePageCell Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Page</returns>
        public async System.Threading.Tasks.Task<V1Page> UpdatePageCellAsync (string locationId, string pageId, V1PageCell body)
        {
             ApiResponse<V1Page> localVarResponse = await UpdatePageCellAsyncWithHttpInfo(locationId, pageId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdatePageCell Modifies a cell of a Favorites page in Square Register.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the Favorites page&#39;s associated location.</param>
        /// <param name="pageId">The ID of the page the cell belongs to.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Page)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Page>> UpdatePageCellAsyncWithHttpInfo (string locationId, string pageId, V1PageCell body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdatePageCell");
            // verify the required parameter 'pageId' is set
            if (pageId == null)
                throw new ApiException(400, "Missing required parameter 'pageId' when calling V1ItemsApi->UpdatePageCell");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdatePageCell");

            var localVarPath = "/v1/{location_id}/pages/{page_id}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (pageId != null) localVarPathParams.Add("page_id", Configuration.ApiClient.ParameterToString(pageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePageCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Page>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Page) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Page)));
            
        }

        /// <summary>
        /// UpdateVariation Modifies the details of an existing item variation.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Variation</returns>
        public V1Variation UpdateVariation (string locationId, string itemId, string variationId, V1Variation body)
        {
             ApiResponse<V1Variation> localVarResponse = UpdateVariationWithHttpInfo(locationId, itemId, variationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateVariation Modifies the details of an existing item variation.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Variation</returns>
        public ApiResponse< V1Variation > UpdateVariationWithHttpInfo (string locationId, string itemId, string variationId, V1Variation body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->UpdateVariation");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling V1ItemsApi->UpdateVariation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

        /// <summary>
        /// UpdateVariation Modifies the details of an existing item variation.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Variation</returns>
        public async System.Threading.Tasks.Task<V1Variation> UpdateVariationAsync (string locationId, string itemId, string variationId, V1Variation body)
        {
             ApiResponse<V1Variation> localVarResponse = await UpdateVariationAsyncWithHttpInfo(locationId, itemId, variationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateVariation Modifies the details of an existing item variation.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the item&#39;s associated location.</param>
        /// <param name="itemId">The ID of the item to modify.</param>
        /// <param name="variationId">The ID of the variation to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Variation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Variation>> UpdateVariationAsyncWithHttpInfo (string locationId, string itemId, string variationId, V1Variation body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1ItemsApi->UpdateVariation");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling V1ItemsApi->UpdateVariation");
            // verify the required parameter 'variationId' is set
            if (variationId == null)
                throw new ApiException(400, "Missing required parameter 'variationId' when calling V1ItemsApi->UpdateVariation");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1ItemsApi->UpdateVariation");

            var localVarPath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (variationId != null) localVarPathParams.Add("variation_id", Configuration.ApiClient.ParameterToString(variationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVariation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Variation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Variation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Variation)));
            
        }

    }
}
