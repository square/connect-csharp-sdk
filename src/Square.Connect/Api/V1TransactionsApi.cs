/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Square.Connect.Client;
using Square.Connect.Model;

namespace Square.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV1TransactionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CreateRefund
        /// </summary>
        /// <remarks>
        /// Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the original payment&#39;s associated location.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Refund</returns>        V1Refund CreateRefund (string locationId, V1CreateRefundRequest body);

        /// <summary>
        /// CreateRefund
        /// </summary>
        /// <remarks>
        /// Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the original payment&#39;s associated location.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Refund</returns>
        ApiResponse<V1Refund> CreateRefundWithHttpInfo (string locationId, V1CreateRefundRequest body);
        /// <summary>
        /// ListBankAccounts
        /// </summary>
        /// <remarks>
        /// Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list bank accounts for.</param>
        /// <returns>List&lt;V1BankAccount&gt;</returns>        List<V1BankAccount> ListBankAccounts (string locationId);

        /// <summary>
        /// ListBankAccounts
        /// </summary>
        /// <remarks>
        /// Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list bank accounts for.</param>
        /// <returns>ApiResponse of List&lt;V1BankAccount&gt;</returns>
        ApiResponse<List<V1BankAccount>> ListBankAccountsWithHttpInfo (string locationId);
        /// <summary>
        /// ListOrders
        /// </summary>
        /// <remarks>
        /// Provides summary information for a merchant&#39;s online store orders.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list online store orders for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Order&gt;</returns>        List<V1Order> ListOrders (string locationId, string order = null, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListOrders
        /// </summary>
        /// <remarks>
        /// Provides summary information for a merchant&#39;s online store orders.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list online store orders for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Order&gt;</returns>
        ApiResponse<List<V1Order>> ListOrdersWithHttpInfo (string locationId, string order = null, int? limit = null, string batchToken = null);
        /// <summary>
        /// ListPayments
        /// </summary>
        /// <remarks>
        /// Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">The order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
        /// <returns>List&lt;V1Payment&gt;</returns>        List<V1Payment> ListPayments (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null, bool? includePartial = null);

        /// <summary>
        /// ListPayments
        /// </summary>
        /// <remarks>
        /// Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">The order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Payment&gt;</returns>
        ApiResponse<List<V1Payment>> ListPaymentsWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null, bool? includePartial = null);
        /// <summary>
        /// ListRefunds
        /// </summary>
        /// <remarks>
        /// Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list refunds for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Refund&gt;</returns>        List<V1Refund> ListRefunds (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListRefunds
        /// </summary>
        /// <remarks>
        /// Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list refunds for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Refund&gt;</returns>
        ApiResponse<List<V1Refund>> ListRefundsWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null);
        /// <summary>
        /// ListSettlements
        /// </summary>
        /// <remarks>
        /// Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Settlement&gt;</returns>        List<V1Settlement> ListSettlements (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string status = null, string batchToken = null);

        /// <summary>
        /// ListSettlements
        /// </summary>
        /// <remarks>
        /// Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Settlement&gt;</returns>
        ApiResponse<List<V1Settlement>> ListSettlementsWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string status = null, string batchToken = null);
        /// <summary>
        /// RetrieveBankAccount
        /// </summary>
        /// <remarks>
        /// Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the bank account&#39;s associated location.</param>
        /// <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
        /// <returns>V1BankAccount</returns>        V1BankAccount RetrieveBankAccount (string locationId, string bankAccountId);

        /// <summary>
        /// RetrieveBankAccount
        /// </summary>
        /// <remarks>
        /// Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the bank account&#39;s associated location.</param>
        /// <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
        /// <returns>ApiResponse of V1BankAccount</returns>
        ApiResponse<V1BankAccount> RetrieveBankAccountWithHttpInfo (string locationId, string bankAccountId);
        /// <summary>
        /// RetrieveOrder
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single online store order, including the order&#39;s history.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <returns>V1Order</returns>        V1Order RetrieveOrder (string locationId, string orderId);

        /// <summary>
        /// RetrieveOrder
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single online store order, including the order&#39;s history.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <returns>ApiResponse of V1Order</returns>
        ApiResponse<V1Order> RetrieveOrderWithHttpInfo (string locationId, string orderId);
        /// <summary>
        /// RetrievePayment
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single payment.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the payment&#39;s associated location.</param>
        /// <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
        /// <returns>V1Payment</returns>        V1Payment RetrievePayment (string locationId, string paymentId);

        /// <summary>
        /// RetrievePayment
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single payment.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the payment&#39;s associated location.</param>
        /// <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
        /// <returns>ApiResponse of V1Payment</returns>
        ApiResponse<V1Payment> RetrievePaymentWithHttpInfo (string locationId, string paymentId);
        /// <summary>
        /// RetrieveSettlement
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the settlements&#39;s associated location.</param>
        /// <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
        /// <returns>V1Settlement</returns>        V1Settlement RetrieveSettlement (string locationId, string settlementId);

        /// <summary>
        /// RetrieveSettlement
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the settlements&#39;s associated location.</param>
        /// <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
        /// <returns>ApiResponse of V1Settlement</returns>
        ApiResponse<V1Settlement> RetrieveSettlementWithHttpInfo (string locationId, string settlementId);
        /// <summary>
        /// UpdateOrder
        /// </summary>
        /// <remarks>
        /// Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Order</returns>        V1Order UpdateOrder (string locationId, string orderId, V1UpdateOrderRequest body);

        /// <summary>
        /// UpdateOrder
        /// </summary>
        /// <remarks>
        /// Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Order</returns>
        ApiResponse<V1Order> UpdateOrderWithHttpInfo (string locationId, string orderId, V1UpdateOrderRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// CreateRefund
        /// </summary>
        /// <remarks>
        /// Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the original payment&#39;s associated location.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Refund</returns>
        System.Threading.Tasks.Task<V1Refund> CreateRefundAsync (string locationId, V1CreateRefundRequest body);

        /// <summary>
        /// CreateRefund
        /// </summary>
        /// <remarks>
        /// Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the original payment&#39;s associated location.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Refund)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Refund>> CreateRefundAsyncWithHttpInfo (string locationId, V1CreateRefundRequest body);
        /// <summary>
        /// ListBankAccounts
        /// </summary>
        /// <remarks>
        /// Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list bank accounts for.</param>
        /// <returns>Task of List&lt;V1BankAccount&gt;</returns>
        System.Threading.Tasks.Task<List<V1BankAccount>> ListBankAccountsAsync (string locationId);

        /// <summary>
        /// ListBankAccounts
        /// </summary>
        /// <remarks>
        /// Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list bank accounts for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1BankAccount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1BankAccount>>> ListBankAccountsAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// ListOrders
        /// </summary>
        /// <remarks>
        /// Provides summary information for a merchant&#39;s online store orders.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list online store orders for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Order&gt;</returns>
        System.Threading.Tasks.Task<List<V1Order>> ListOrdersAsync (string locationId, string order = null, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListOrders
        /// </summary>
        /// <remarks>
        /// Provides summary information for a merchant&#39;s online store orders.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list online store orders for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Order>>> ListOrdersAsyncWithHttpInfo (string locationId, string order = null, int? limit = null, string batchToken = null);
        /// <summary>
        /// ListPayments
        /// </summary>
        /// <remarks>
        /// Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">The order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
        /// <returns>Task of List&lt;V1Payment&gt;</returns>
        System.Threading.Tasks.Task<List<V1Payment>> ListPaymentsAsync (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null, bool? includePartial = null);

        /// <summary>
        /// ListPayments
        /// </summary>
        /// <remarks>
        /// Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">The order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Payment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Payment>>> ListPaymentsAsyncWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null, bool? includePartial = null);
        /// <summary>
        /// ListRefunds
        /// </summary>
        /// <remarks>
        /// Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list refunds for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Refund&gt;</returns>
        System.Threading.Tasks.Task<List<V1Refund>> ListRefundsAsync (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListRefunds
        /// </summary>
        /// <remarks>
        /// Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list refunds for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Refund&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Refund>>> ListRefundsAsyncWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null);
        /// <summary>
        /// ListSettlements
        /// </summary>
        /// <remarks>
        /// Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Settlement&gt;</returns>
        System.Threading.Tasks.Task<List<V1Settlement>> ListSettlementsAsync (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string status = null, string batchToken = null);

        /// <summary>
        /// ListSettlements
        /// </summary>
        /// <remarks>
        /// Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Settlement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Settlement>>> ListSettlementsAsyncWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string status = null, string batchToken = null);
        /// <summary>
        /// RetrieveBankAccount
        /// </summary>
        /// <remarks>
        /// Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the bank account&#39;s associated location.</param>
        /// <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
        /// <returns>Task of V1BankAccount</returns>
        System.Threading.Tasks.Task<V1BankAccount> RetrieveBankAccountAsync (string locationId, string bankAccountId);

        /// <summary>
        /// RetrieveBankAccount
        /// </summary>
        /// <remarks>
        /// Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the bank account&#39;s associated location.</param>
        /// <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
        /// <returns>Task of ApiResponse (V1BankAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1BankAccount>> RetrieveBankAccountAsyncWithHttpInfo (string locationId, string bankAccountId);
        /// <summary>
        /// RetrieveOrder
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single online store order, including the order&#39;s history.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <returns>Task of V1Order</returns>
        System.Threading.Tasks.Task<V1Order> RetrieveOrderAsync (string locationId, string orderId);

        /// <summary>
        /// RetrieveOrder
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single online store order, including the order&#39;s history.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <returns>Task of ApiResponse (V1Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Order>> RetrieveOrderAsyncWithHttpInfo (string locationId, string orderId);
        /// <summary>
        /// RetrievePayment
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single payment.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the payment&#39;s associated location.</param>
        /// <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
        /// <returns>Task of V1Payment</returns>
        System.Threading.Tasks.Task<V1Payment> RetrievePaymentAsync (string locationId, string paymentId);

        /// <summary>
        /// RetrievePayment
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single payment.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the payment&#39;s associated location.</param>
        /// <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
        /// <returns>Task of ApiResponse (V1Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Payment>> RetrievePaymentAsyncWithHttpInfo (string locationId, string paymentId);
        /// <summary>
        /// RetrieveSettlement
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the settlements&#39;s associated location.</param>
        /// <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
        /// <returns>Task of V1Settlement</returns>
        System.Threading.Tasks.Task<V1Settlement> RetrieveSettlementAsync (string locationId, string settlementId);

        /// <summary>
        /// RetrieveSettlement
        /// </summary>
        /// <remarks>
        /// Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the settlements&#39;s associated location.</param>
        /// <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
        /// <returns>Task of ApiResponse (V1Settlement)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Settlement>> RetrieveSettlementAsyncWithHttpInfo (string locationId, string settlementId);
        /// <summary>
        /// UpdateOrder
        /// </summary>
        /// <remarks>
        /// Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Order</returns>
        System.Threading.Tasks.Task<V1Order> UpdateOrderAsync (string locationId, string orderId, V1UpdateOrderRequest body);

        /// <summary>
        /// UpdateOrder
        /// </summary>
        /// <remarks>
        /// Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Order>> UpdateOrderAsyncWithHttpInfo (string locationId, string orderId, V1UpdateOrderRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V1TransactionsApi : IV1TransactionsApi
    {
        private Square.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V1TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public V1TransactionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V1TransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V1TransactionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Square.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// CreateRefund Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the original payment&#39;s associated location.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Refund</returns>
        public V1Refund CreateRefund (string locationId, V1CreateRefundRequest body)
        {
             ApiResponse<V1Refund> localVarResponse = CreateRefundWithHttpInfo(locationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateRefund Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the original payment&#39;s associated location.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Refund</returns>
        public ApiResponse< V1Refund > CreateRefundWithHttpInfo (string locationId, V1CreateRefundRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->CreateRefund");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1TransactionsApi->CreateRefund");

            var localVarPath = "/v1/{location_id}/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRefund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Refund>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Refund) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Refund)));
            
        }

        /// <summary>
        /// CreateRefund Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the original payment&#39;s associated location.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Refund</returns>
        public async System.Threading.Tasks.Task<V1Refund> CreateRefundAsync (string locationId, V1CreateRefundRequest body)
        {
             ApiResponse<V1Refund> localVarResponse = await CreateRefundAsyncWithHttpInfo(locationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateRefund Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the original payment&#39;s associated location.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Refund)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Refund>> CreateRefundAsyncWithHttpInfo (string locationId, V1CreateRefundRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->CreateRefund");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1TransactionsApi->CreateRefund");

            var localVarPath = "/v1/{location_id}/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRefund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Refund>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Refund) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Refund)));
            
        }

        /// <summary>
        /// ListBankAccounts Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list bank accounts for.</param>
        /// <returns>List&lt;V1BankAccount&gt;</returns>
        public List<V1BankAccount> ListBankAccounts (string locationId)
        {
             ApiResponse<List<V1BankAccount>> localVarResponse = ListBankAccountsWithHttpInfo(locationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListBankAccounts Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list bank accounts for.</param>
        /// <returns>ApiResponse of List&lt;V1BankAccount&gt;</returns>
        public ApiResponse< List<V1BankAccount> > ListBankAccountsWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->ListBankAccounts");

            var localVarPath = "/v1/{location_id}/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBankAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1BankAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1BankAccount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1BankAccount>)));
            
        }

        /// <summary>
        /// ListBankAccounts Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list bank accounts for.</param>
        /// <returns>Task of List&lt;V1BankAccount&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1BankAccount>> ListBankAccountsAsync (string locationId)
        {
             ApiResponse<List<V1BankAccount>> localVarResponse = await ListBankAccountsAsyncWithHttpInfo(locationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListBankAccounts Provides non-confidential details for all of a location&#39;s associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list bank accounts for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1BankAccount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1BankAccount>>> ListBankAccountsAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->ListBankAccounts");

            var localVarPath = "/v1/{location_id}/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBankAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1BankAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1BankAccount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1BankAccount>)));
            
        }

        /// <summary>
        /// ListOrders Provides summary information for a merchant&#39;s online store orders.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list online store orders for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Order&gt;</returns>
        public List<V1Order> ListOrders (string locationId, string order = null, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1Order>> localVarResponse = ListOrdersWithHttpInfo(locationId, order, limit, batchToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListOrders Provides summary information for a merchant&#39;s online store orders.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list online store orders for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Order&gt;</returns>
        public ApiResponse< List<V1Order> > ListOrdersWithHttpInfo (string locationId, string order = null, int? limit = null, string batchToken = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->ListOrders");

            var localVarPath = "/v1/{location_id}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Order>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Order>)));
            
        }

        /// <summary>
        /// ListOrders Provides summary information for a merchant&#39;s online store orders.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list online store orders for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Order>> ListOrdersAsync (string locationId, string order = null, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1Order>> localVarResponse = await ListOrdersAsyncWithHttpInfo(locationId, order, limit, batchToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListOrders Provides summary information for a merchant&#39;s online store orders.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list online store orders for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Order>>> ListOrdersAsyncWithHttpInfo (string locationId, string order = null, int? limit = null, string batchToken = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->ListOrders");

            var localVarPath = "/v1/{location_id}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Order>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Order>)));
            
        }

        /// <summary>
        /// ListPayments Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">The order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
        /// <returns>List&lt;V1Payment&gt;</returns>
        public List<V1Payment> ListPayments (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null, bool? includePartial = null)
        {
             ApiResponse<List<V1Payment>> localVarResponse = ListPaymentsWithHttpInfo(locationId, order, beginTime, endTime, limit, batchToken, includePartial);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListPayments Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">The order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Payment&gt;</returns>
        public ApiResponse< List<V1Payment> > ListPaymentsWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null, bool? includePartial = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->ListPayments");

            var localVarPath = "/v1/{location_id}/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter
            if (includePartial != null) localVarQueryParams.Add("include_partial", Configuration.ApiClient.ParameterToString(includePartial)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Payment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Payment>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Payment>)));
            
        }

        /// <summary>
        /// ListPayments Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">The order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
        /// <returns>Task of List&lt;V1Payment&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Payment>> ListPaymentsAsync (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null, bool? includePartial = null)
        {
             ApiResponse<List<V1Payment>> localVarResponse = await ListPaymentsAsyncWithHttpInfo(locationId, order, beginTime, endTime, limit, batchToken, includePartial);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListPayments Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a &#x60;created_at&#x60; value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">The order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <param name="includePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Payment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Payment>>> ListPaymentsAsyncWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null, bool? includePartial = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->ListPayments");

            var localVarPath = "/v1/{location_id}/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter
            if (includePartial != null) localVarQueryParams.Add("include_partial", Configuration.ApiClient.ParameterToString(includePartial)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Payment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Payment>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Payment>)));
            
        }

        /// <summary>
        /// ListRefunds Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list refunds for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Refund&gt;</returns>
        public List<V1Refund> ListRefunds (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1Refund>> localVarResponse = ListRefundsWithHttpInfo(locationId, order, beginTime, endTime, limit, batchToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListRefunds Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list refunds for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Refund&gt;</returns>
        public ApiResponse< List<V1Refund> > ListRefundsWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->ListRefunds");

            var localVarPath = "/v1/{location_id}/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRefunds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Refund>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Refund>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Refund>)));
            
        }

        /// <summary>
        /// ListRefunds Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list refunds for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Refund&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Refund>> ListRefundsAsync (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1Refund>> localVarResponse = await ListRefundsAsyncWithHttpInfo(locationId, order, beginTime, endTime, limit, batchToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListRefunds Provides the details for all refunds initiated by a merchant or any of the merchant&#39;s mobile staff during a date range. Date ranges cannot exceed one year in length.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list refunds for.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Refund&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Refund>>> ListRefundsAsyncWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string batchToken = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->ListRefunds");

            var localVarPath = "/v1/{location_id}/refunds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRefunds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Refund>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Refund>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Refund>)));
            
        }

        /// <summary>
        /// ListSettlements Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Settlement&gt;</returns>
        public List<V1Settlement> ListSettlements (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string status = null, string batchToken = null)
        {
             ApiResponse<List<V1Settlement>> localVarResponse = ListSettlementsWithHttpInfo(locationId, order, beginTime, endTime, limit, status, batchToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListSettlements Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Settlement&gt;</returns>
        public ApiResponse< List<V1Settlement> > ListSettlementsWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string status = null, string batchToken = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->ListSettlements");

            var localVarPath = "/v1/{location_id}/settlements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSettlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Settlement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Settlement>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Settlement>)));
            
        }

        /// <summary>
        /// ListSettlements Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Settlement&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Settlement>> ListSettlementsAsync (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string status = null, string batchToken = null)
        {
             ApiResponse<List<V1Settlement>> localVarResponse = await ListSettlementsAsyncWithHttpInfo(locationId, order, beginTime, endTime, limit, status, batchToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListSettlements Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business&#39;s locations.</param>
        /// <param name="order">TThe order in which payments are listed in the response. (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
        /// <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
        /// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
        /// <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Settlement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Settlement>>> ListSettlementsAsyncWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null, int? limit = null, string status = null, string batchToken = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->ListSettlements");

            var localVarPath = "/v1/{location_id}/settlements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSettlements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Settlement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<V1Settlement>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Settlement>)));
            
        }

        /// <summary>
        /// RetrieveBankAccount Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the bank account&#39;s associated location.</param>
        /// <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
        /// <returns>V1BankAccount</returns>
        public V1BankAccount RetrieveBankAccount (string locationId, string bankAccountId)
        {
             ApiResponse<V1BankAccount> localVarResponse = RetrieveBankAccountWithHttpInfo(locationId, bankAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveBankAccount Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the bank account&#39;s associated location.</param>
        /// <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
        /// <returns>ApiResponse of V1BankAccount</returns>
        public ApiResponse< V1BankAccount > RetrieveBankAccountWithHttpInfo (string locationId, string bankAccountId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->RetrieveBankAccount");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling V1TransactionsApi->RetrieveBankAccount");

            var localVarPath = "/v1/{location_id}/bank-accounts/{bank_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bank_account_id", Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveBankAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1BankAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1BankAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1BankAccount)));
            
        }

        /// <summary>
        /// RetrieveBankAccount Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the bank account&#39;s associated location.</param>
        /// <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
        /// <returns>Task of V1BankAccount</returns>
        public async System.Threading.Tasks.Task<V1BankAccount> RetrieveBankAccountAsync (string locationId, string bankAccountId)
        {
             ApiResponse<V1BankAccount> localVarResponse = await RetrieveBankAccountAsyncWithHttpInfo(locationId, bankAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveBankAccount Provides non-confidential details for a merchant&#39;s associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the bank account&#39;s associated location.</param>
        /// <param name="bankAccountId">The bank account&#39;s Square-issued ID. You obtain this value from Settlement objects returned.</param>
        /// <returns>Task of ApiResponse (V1BankAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1BankAccount>> RetrieveBankAccountAsyncWithHttpInfo (string locationId, string bankAccountId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->RetrieveBankAccount");
            // verify the required parameter 'bankAccountId' is set
            if (bankAccountId == null)
                throw new ApiException(400, "Missing required parameter 'bankAccountId' when calling V1TransactionsApi->RetrieveBankAccount");

            var localVarPath = "/v1/{location_id}/bank-accounts/{bank_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (bankAccountId != null) localVarPathParams.Add("bank_account_id", Configuration.ApiClient.ParameterToString(bankAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveBankAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1BankAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1BankAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1BankAccount)));
            
        }

        /// <summary>
        /// RetrieveOrder Provides comprehensive information for a single online store order, including the order&#39;s history.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <returns>V1Order</returns>
        public V1Order RetrieveOrder (string locationId, string orderId)
        {
             ApiResponse<V1Order> localVarResponse = RetrieveOrderWithHttpInfo(locationId, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveOrder Provides comprehensive information for a single online store order, including the order&#39;s history.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <returns>ApiResponse of V1Order</returns>
        public ApiResponse< V1Order > RetrieveOrderWithHttpInfo (string locationId, string orderId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->RetrieveOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling V1TransactionsApi->RetrieveOrder");

            var localVarPath = "/v1/{location_id}/orders/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (orderId != null) localVarPathParams.Add("order_id", Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Order) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Order)));
            
        }

        /// <summary>
        /// RetrieveOrder Provides comprehensive information for a single online store order, including the order&#39;s history.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <returns>Task of V1Order</returns>
        public async System.Threading.Tasks.Task<V1Order> RetrieveOrderAsync (string locationId, string orderId)
        {
             ApiResponse<V1Order> localVarResponse = await RetrieveOrderAsyncWithHttpInfo(locationId, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveOrder Provides comprehensive information for a single online store order, including the order&#39;s history.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <returns>Task of ApiResponse (V1Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Order>> RetrieveOrderAsyncWithHttpInfo (string locationId, string orderId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->RetrieveOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling V1TransactionsApi->RetrieveOrder");

            var localVarPath = "/v1/{location_id}/orders/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (orderId != null) localVarPathParams.Add("order_id", Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Order) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Order)));
            
        }

        /// <summary>
        /// RetrievePayment Provides comprehensive information for a single payment.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the payment&#39;s associated location.</param>
        /// <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
        /// <returns>V1Payment</returns>
        public V1Payment RetrievePayment (string locationId, string paymentId)
        {
             ApiResponse<V1Payment> localVarResponse = RetrievePaymentWithHttpInfo(locationId, paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrievePayment Provides comprehensive information for a single payment.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the payment&#39;s associated location.</param>
        /// <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
        /// <returns>ApiResponse of V1Payment</returns>
        public ApiResponse< V1Payment > RetrievePaymentWithHttpInfo (string locationId, string paymentId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->RetrievePayment");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling V1TransactionsApi->RetrievePayment");

            var localVarPath = "/v1/{location_id}/payments/{payment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (paymentId != null) localVarPathParams.Add("payment_id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Payment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Payment)));
            
        }

        /// <summary>
        /// RetrievePayment Provides comprehensive information for a single payment.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the payment&#39;s associated location.</param>
        /// <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
        /// <returns>Task of V1Payment</returns>
        public async System.Threading.Tasks.Task<V1Payment> RetrievePaymentAsync (string locationId, string paymentId)
        {
             ApiResponse<V1Payment> localVarResponse = await RetrievePaymentAsyncWithHttpInfo(locationId, paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrievePayment Provides comprehensive information for a single payment.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the payment&#39;s associated location.</param>
        /// <param name="paymentId">The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.</param>
        /// <returns>Task of ApiResponse (V1Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Payment>> RetrievePaymentAsyncWithHttpInfo (string locationId, string paymentId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->RetrievePayment");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling V1TransactionsApi->RetrievePayment");

            var localVarPath = "/v1/{location_id}/payments/{payment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (paymentId != null) localVarPathParams.Add("payment_id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Payment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Payment)));
            
        }

        /// <summary>
        /// RetrieveSettlement Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the settlements&#39;s associated location.</param>
        /// <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
        /// <returns>V1Settlement</returns>
        public V1Settlement RetrieveSettlement (string locationId, string settlementId)
        {
             ApiResponse<V1Settlement> localVarResponse = RetrieveSettlementWithHttpInfo(locationId, settlementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveSettlement Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the settlements&#39;s associated location.</param>
        /// <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
        /// <returns>ApiResponse of V1Settlement</returns>
        public ApiResponse< V1Settlement > RetrieveSettlementWithHttpInfo (string locationId, string settlementId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->RetrieveSettlement");
            // verify the required parameter 'settlementId' is set
            if (settlementId == null)
                throw new ApiException(400, "Missing required parameter 'settlementId' when calling V1TransactionsApi->RetrieveSettlement");

            var localVarPath = "/v1/{location_id}/settlements/{settlement_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (settlementId != null) localVarPathParams.Add("settlement_id", Configuration.ApiClient.ParameterToString(settlementId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveSettlement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Settlement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Settlement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Settlement)));
            
        }

        /// <summary>
        /// RetrieveSettlement Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the settlements&#39;s associated location.</param>
        /// <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
        /// <returns>Task of V1Settlement</returns>
        public async System.Threading.Tasks.Task<V1Settlement> RetrieveSettlementAsync (string locationId, string settlementId)
        {
             ApiResponse<V1Settlement> localVarResponse = await RetrieveSettlementAsyncWithHttpInfo(locationId, settlementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveSettlement Provides comprehensive information for a single settlement.  The returned &#x60;Settlement&#x60; objects include an &#x60;entries&#x60; field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the settlements&#39;s associated location.</param>
        /// <param name="settlementId">The settlement&#39;s Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
        /// <returns>Task of ApiResponse (V1Settlement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Settlement>> RetrieveSettlementAsyncWithHttpInfo (string locationId, string settlementId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->RetrieveSettlement");
            // verify the required parameter 'settlementId' is set
            if (settlementId == null)
                throw new ApiException(400, "Missing required parameter 'settlementId' when calling V1TransactionsApi->RetrieveSettlement");

            var localVarPath = "/v1/{location_id}/settlements/{settlement_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (settlementId != null) localVarPathParams.Add("settlement_id", Configuration.ApiClient.ParameterToString(settlementId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveSettlement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Settlement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Settlement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Settlement)));
            
        }

        /// <summary>
        /// UpdateOrder Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Order</returns>
        public V1Order UpdateOrder (string locationId, string orderId, V1UpdateOrderRequest body)
        {
             ApiResponse<V1Order> localVarResponse = UpdateOrderWithHttpInfo(locationId, orderId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateOrder Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Order</returns>
        public ApiResponse< V1Order > UpdateOrderWithHttpInfo (string locationId, string orderId, V1UpdateOrderRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->UpdateOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling V1TransactionsApi->UpdateOrder");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1TransactionsApi->UpdateOrder");

            var localVarPath = "/v1/{location_id}/orders/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (orderId != null) localVarPathParams.Add("order_id", Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Order) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Order)));
            
        }

        /// <summary>
        /// UpdateOrder Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Order</returns>
        public async System.Threading.Tasks.Task<V1Order> UpdateOrderAsync (string locationId, string orderId, V1UpdateOrderRequest body)
        {
             ApiResponse<V1Order> localVarResponse = await UpdateOrderAsyncWithHttpInfo(locationId, orderId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateOrder Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the order&#39;s associated location.</param>
        /// <param name="orderId">The order&#39;s Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Order>> UpdateOrderAsyncWithHttpInfo (string locationId, string orderId, V1UpdateOrderRequest body)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1TransactionsApi->UpdateOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling V1TransactionsApi->UpdateOrder");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1TransactionsApi->UpdateOrder");

            var localVarPath = "/v1/{location_id}/orders/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (orderId != null) localVarPathParams.Add("order_id", Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Order) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Order)));
            
        }

    }
}
