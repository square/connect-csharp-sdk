/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Square.Connect.Client;
using Square.Connect.Model;

namespace Square.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CancelPayment
        /// </summary>
        /// <remarks>
        /// Cancels (voids) a payment. If you set &#x60;autocomplete&#x60; to false when creating a payment, you can cancel the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">&#x60;payment_id&#x60; identifying the payment to be canceled.</param>
        /// <returns>CancelPaymentResponse</returns>        CancelPaymentResponse CancelPayment (string paymentId);

        /// <summary>
        /// CancelPayment
        /// </summary>
        /// <remarks>
        /// Cancels (voids) a payment. If you set &#x60;autocomplete&#x60; to false when creating a payment, you can cancel the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">&#x60;payment_id&#x60; identifying the payment to be canceled.</param>
        /// <returns>ApiResponse of CancelPaymentResponse</returns>
        ApiResponse<CancelPaymentResponse> CancelPaymentWithHttpInfo (string paymentId);
        /// <summary>
        /// CancelPaymentByIdempotencyKey
        /// </summary>
        /// <remarks>
        /// Cancels (voids) a payment identified by the idempotency key that is specified in the request.   Use this method when status of a CreatePayment request is unknown. For example, after you send a CreatePayment request a network error occurs and you don&#39;t get a response. In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your CreatePayment request you want  to cancel. After cancelling the payment, you can submit your CreatePayment request again. Note that if no payment with the specified idempotency key is found, no action is taken, the end  point returns successfully.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>CancelPaymentByIdempotencyKeyResponse</returns>        CancelPaymentByIdempotencyKeyResponse CancelPaymentByIdempotencyKey (CancelPaymentByIdempotencyKeyRequest body);

        /// <summary>
        /// CancelPaymentByIdempotencyKey
        /// </summary>
        /// <remarks>
        /// Cancels (voids) a payment identified by the idempotency key that is specified in the request.   Use this method when status of a CreatePayment request is unknown. For example, after you send a CreatePayment request a network error occurs and you don&#39;t get a response. In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your CreatePayment request you want  to cancel. After cancelling the payment, you can submit your CreatePayment request again. Note that if no payment with the specified idempotency key is found, no action is taken, the end  point returns successfully.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of CancelPaymentByIdempotencyKeyResponse</returns>
        ApiResponse<CancelPaymentByIdempotencyKeyResponse> CancelPaymentByIdempotencyKeyWithHttpInfo (CancelPaymentByIdempotencyKeyRequest body);
        /// <summary>
        /// CompletePayment
        /// </summary>
        /// <remarks>
        /// Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set autocomplete to false when creating a payment, you can complete (capture)  the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID identifying the payment to be completed.</param>
        /// <returns>CompletePaymentResponse</returns>        CompletePaymentResponse CompletePayment (string paymentId);

        /// <summary>
        /// CompletePayment
        /// </summary>
        /// <remarks>
        /// Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set autocomplete to false when creating a payment, you can complete (capture)  the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID identifying the payment to be completed.</param>
        /// <returns>ApiResponse of CompletePaymentResponse</returns>
        ApiResponse<CompletePaymentResponse> CompletePaymentWithHttpInfo (string paymentId);
        /// <summary>
        /// CreatePayment
        /// </summary>
        /// <remarks>
        /// Charges a payment source, for example, a card  represented by customer&#39;s card on file or a card nonce. In addition  to the payment source, the request must also include the  amount to accept for the payment.  There are several optional parameters that you can include in the request.  For example, tip money, whether to autocomplete the payment, or a reference ID to correlate this payment with another system.  For more information about these  payment options, see [Take Payments](/payments-api/take-payments).  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>CreatePaymentResponse</returns>        CreatePaymentResponse CreatePayment (CreatePaymentRequest body);

        /// <summary>
        /// CreatePayment
        /// </summary>
        /// <remarks>
        /// Charges a payment source, for example, a card  represented by customer&#39;s card on file or a card nonce. In addition  to the payment source, the request must also include the  amount to accept for the payment.  There are several optional parameters that you can include in the request.  For example, tip money, whether to autocomplete the payment, or a reference ID to correlate this payment with another system.  For more information about these  payment options, see [Take Payments](/payments-api/take-payments).  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of CreatePaymentResponse</returns>
        ApiResponse<CreatePaymentResponse> CreatePaymentWithHttpInfo (CreatePaymentRequest body);
        /// <summary>
        /// GetPayment
        /// </summary>
        /// <remarks>
        /// Retrieves details for a specific Payment.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID for the desired &#x60;Payment&#x60;.</param>
        /// <returns>GetPaymentResponse</returns>        GetPaymentResponse GetPayment (string paymentId);

        /// <summary>
        /// GetPayment
        /// </summary>
        /// <remarks>
        /// Retrieves details for a specific Payment.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID for the desired &#x60;Payment&#x60;.</param>
        /// <returns>ApiResponse of GetPaymentResponse</returns>
        ApiResponse<GetPaymentResponse> GetPaymentWithHttpInfo (string paymentId);
        /// <summary>
        /// ListPayments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments taken by the account making the request.  Max results per page: 100
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment (optional)</param>
        /// <param name="total">The exact amount in the total_money for a &#x60;Payment&#x60;. (optional)</param>
        /// <param name="last4">The last 4 digits of &#x60;Payment&#x60; card. (optional)</param>
        /// <param name="cardBrand">The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60; (optional)</param>
        /// <returns>ListPaymentsResponse</returns>        ListPaymentsResponse ListPayments (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, long? total = null, string last4 = null, string cardBrand = null);

        /// <summary>
        /// ListPayments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments taken by the account making the request.  Max results per page: 100
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment (optional)</param>
        /// <param name="total">The exact amount in the total_money for a &#x60;Payment&#x60;. (optional)</param>
        /// <param name="last4">The last 4 digits of &#x60;Payment&#x60; card. (optional)</param>
        /// <param name="cardBrand">The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60; (optional)</param>
        /// <returns>ApiResponse of ListPaymentsResponse</returns>
        ApiResponse<ListPaymentsResponse> ListPaymentsWithHttpInfo (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, long? total = null, string last4 = null, string cardBrand = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// CancelPayment
        /// </summary>
        /// <remarks>
        /// Cancels (voids) a payment. If you set &#x60;autocomplete&#x60; to false when creating a payment, you can cancel the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">&#x60;payment_id&#x60; identifying the payment to be canceled.</param>
        /// <returns>Task of CancelPaymentResponse</returns>
        System.Threading.Tasks.Task<CancelPaymentResponse> CancelPaymentAsync (string paymentId);

        /// <summary>
        /// CancelPayment
        /// </summary>
        /// <remarks>
        /// Cancels (voids) a payment. If you set &#x60;autocomplete&#x60; to false when creating a payment, you can cancel the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">&#x60;payment_id&#x60; identifying the payment to be canceled.</param>
        /// <returns>Task of ApiResponse (CancelPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelPaymentResponse>> CancelPaymentAsyncWithHttpInfo (string paymentId);
        /// <summary>
        /// CancelPaymentByIdempotencyKey
        /// </summary>
        /// <remarks>
        /// Cancels (voids) a payment identified by the idempotency key that is specified in the request.   Use this method when status of a CreatePayment request is unknown. For example, after you send a CreatePayment request a network error occurs and you don&#39;t get a response. In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your CreatePayment request you want  to cancel. After cancelling the payment, you can submit your CreatePayment request again. Note that if no payment with the specified idempotency key is found, no action is taken, the end  point returns successfully.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of CancelPaymentByIdempotencyKeyResponse</returns>
        System.Threading.Tasks.Task<CancelPaymentByIdempotencyKeyResponse> CancelPaymentByIdempotencyKeyAsync (CancelPaymentByIdempotencyKeyRequest body);

        /// <summary>
        /// CancelPaymentByIdempotencyKey
        /// </summary>
        /// <remarks>
        /// Cancels (voids) a payment identified by the idempotency key that is specified in the request.   Use this method when status of a CreatePayment request is unknown. For example, after you send a CreatePayment request a network error occurs and you don&#39;t get a response. In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your CreatePayment request you want  to cancel. After cancelling the payment, you can submit your CreatePayment request again. Note that if no payment with the specified idempotency key is found, no action is taken, the end  point returns successfully.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (CancelPaymentByIdempotencyKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelPaymentByIdempotencyKeyResponse>> CancelPaymentByIdempotencyKeyAsyncWithHttpInfo (CancelPaymentByIdempotencyKeyRequest body);
        /// <summary>
        /// CompletePayment
        /// </summary>
        /// <remarks>
        /// Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set autocomplete to false when creating a payment, you can complete (capture)  the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID identifying the payment to be completed.</param>
        /// <returns>Task of CompletePaymentResponse</returns>
        System.Threading.Tasks.Task<CompletePaymentResponse> CompletePaymentAsync (string paymentId);

        /// <summary>
        /// CompletePayment
        /// </summary>
        /// <remarks>
        /// Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set autocomplete to false when creating a payment, you can complete (capture)  the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID identifying the payment to be completed.</param>
        /// <returns>Task of ApiResponse (CompletePaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompletePaymentResponse>> CompletePaymentAsyncWithHttpInfo (string paymentId);
        /// <summary>
        /// CreatePayment
        /// </summary>
        /// <remarks>
        /// Charges a payment source, for example, a card  represented by customer&#39;s card on file or a card nonce. In addition  to the payment source, the request must also include the  amount to accept for the payment.  There are several optional parameters that you can include in the request.  For example, tip money, whether to autocomplete the payment, or a reference ID to correlate this payment with another system.  For more information about these  payment options, see [Take Payments](/payments-api/take-payments).  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of CreatePaymentResponse</returns>
        System.Threading.Tasks.Task<CreatePaymentResponse> CreatePaymentAsync (CreatePaymentRequest body);

        /// <summary>
        /// CreatePayment
        /// </summary>
        /// <remarks>
        /// Charges a payment source, for example, a card  represented by customer&#39;s card on file or a card nonce. In addition  to the payment source, the request must also include the  amount to accept for the payment.  There are several optional parameters that you can include in the request.  For example, tip money, whether to autocomplete the payment, or a reference ID to correlate this payment with another system.  For more information about these  payment options, see [Take Payments](/payments-api/take-payments).  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (CreatePaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePaymentResponse>> CreatePaymentAsyncWithHttpInfo (CreatePaymentRequest body);
        /// <summary>
        /// GetPayment
        /// </summary>
        /// <remarks>
        /// Retrieves details for a specific Payment.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID for the desired &#x60;Payment&#x60;.</param>
        /// <returns>Task of GetPaymentResponse</returns>
        System.Threading.Tasks.Task<GetPaymentResponse> GetPaymentAsync (string paymentId);

        /// <summary>
        /// GetPayment
        /// </summary>
        /// <remarks>
        /// Retrieves details for a specific Payment.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID for the desired &#x60;Payment&#x60;.</param>
        /// <returns>Task of ApiResponse (GetPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentResponse>> GetPaymentAsyncWithHttpInfo (string paymentId);
        /// <summary>
        /// ListPayments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments taken by the account making the request.  Max results per page: 100
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment (optional)</param>
        /// <param name="total">The exact amount in the total_money for a &#x60;Payment&#x60;. (optional)</param>
        /// <param name="last4">The last 4 digits of &#x60;Payment&#x60; card. (optional)</param>
        /// <param name="cardBrand">The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60; (optional)</param>
        /// <returns>Task of ListPaymentsResponse</returns>
        System.Threading.Tasks.Task<ListPaymentsResponse> ListPaymentsAsync (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, long? total = null, string last4 = null, string cardBrand = null);

        /// <summary>
        /// ListPayments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments taken by the account making the request.  Max results per page: 100
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment (optional)</param>
        /// <param name="total">The exact amount in the total_money for a &#x60;Payment&#x60;. (optional)</param>
        /// <param name="last4">The last 4 digits of &#x60;Payment&#x60; card. (optional)</param>
        /// <param name="cardBrand">The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ListPaymentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPaymentsResponse>> ListPaymentsAsyncWithHttpInfo (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, long? total = null, string last4 = null, string cardBrand = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private Square.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Square.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// CancelPayment Cancels (voids) a payment. If you set &#x60;autocomplete&#x60; to false when creating a payment, you can cancel the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">&#x60;payment_id&#x60; identifying the payment to be canceled.</param>
        /// <returns>CancelPaymentResponse</returns>
        public CancelPaymentResponse CancelPayment (string paymentId)
        {
             ApiResponse<CancelPaymentResponse> localVarResponse = CancelPaymentWithHttpInfo(paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CancelPayment Cancels (voids) a payment. If you set &#x60;autocomplete&#x60; to false when creating a payment, you can cancel the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">&#x60;payment_id&#x60; identifying the payment to be canceled.</param>
        /// <returns>ApiResponse of CancelPaymentResponse</returns>
        public ApiResponse< CancelPaymentResponse > CancelPaymentWithHttpInfo (string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentsApi->CancelPayment");

            var localVarPath = "/v2/payments/{payment_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (paymentId != null) localVarPathParams.Add("payment_id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelPaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelPaymentResponse)));
            
        }

        /// <summary>
        /// CancelPayment Cancels (voids) a payment. If you set &#x60;autocomplete&#x60; to false when creating a payment, you can cancel the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">&#x60;payment_id&#x60; identifying the payment to be canceled.</param>
        /// <returns>Task of CancelPaymentResponse</returns>
        public async System.Threading.Tasks.Task<CancelPaymentResponse> CancelPaymentAsync (string paymentId)
        {
             ApiResponse<CancelPaymentResponse> localVarResponse = await CancelPaymentAsyncWithHttpInfo(paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CancelPayment Cancels (voids) a payment. If you set &#x60;autocomplete&#x60; to false when creating a payment, you can cancel the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">&#x60;payment_id&#x60; identifying the payment to be canceled.</param>
        /// <returns>Task of ApiResponse (CancelPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelPaymentResponse>> CancelPaymentAsyncWithHttpInfo (string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentsApi->CancelPayment");

            var localVarPath = "/v2/payments/{payment_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentId != null) localVarPathParams.Add("payment_id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelPaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelPaymentResponse)));
            
        }

        /// <summary>
        /// CancelPaymentByIdempotencyKey Cancels (voids) a payment identified by the idempotency key that is specified in the request.   Use this method when status of a CreatePayment request is unknown. For example, after you send a CreatePayment request a network error occurs and you don&#39;t get a response. In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your CreatePayment request you want  to cancel. After cancelling the payment, you can submit your CreatePayment request again. Note that if no payment with the specified idempotency key is found, no action is taken, the end  point returns successfully.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>CancelPaymentByIdempotencyKeyResponse</returns>
        public CancelPaymentByIdempotencyKeyResponse CancelPaymentByIdempotencyKey (CancelPaymentByIdempotencyKeyRequest body)
        {
             ApiResponse<CancelPaymentByIdempotencyKeyResponse> localVarResponse = CancelPaymentByIdempotencyKeyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CancelPaymentByIdempotencyKey Cancels (voids) a payment identified by the idempotency key that is specified in the request.   Use this method when status of a CreatePayment request is unknown. For example, after you send a CreatePayment request a network error occurs and you don&#39;t get a response. In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your CreatePayment request you want  to cancel. After cancelling the payment, you can submit your CreatePayment request again. Note that if no payment with the specified idempotency key is found, no action is taken, the end  point returns successfully.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of CancelPaymentByIdempotencyKeyResponse</returns>
        public ApiResponse< CancelPaymentByIdempotencyKeyResponse > CancelPaymentByIdempotencyKeyWithHttpInfo (CancelPaymentByIdempotencyKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->CancelPaymentByIdempotencyKey");

            var localVarPath = "/v2/payments/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelPaymentByIdempotencyKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelPaymentByIdempotencyKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelPaymentByIdempotencyKeyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelPaymentByIdempotencyKeyResponse)));
            
        }

        /// <summary>
        /// CancelPaymentByIdempotencyKey Cancels (voids) a payment identified by the idempotency key that is specified in the request.   Use this method when status of a CreatePayment request is unknown. For example, after you send a CreatePayment request a network error occurs and you don&#39;t get a response. In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your CreatePayment request you want  to cancel. After cancelling the payment, you can submit your CreatePayment request again. Note that if no payment with the specified idempotency key is found, no action is taken, the end  point returns successfully.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of CancelPaymentByIdempotencyKeyResponse</returns>
        public async System.Threading.Tasks.Task<CancelPaymentByIdempotencyKeyResponse> CancelPaymentByIdempotencyKeyAsync (CancelPaymentByIdempotencyKeyRequest body)
        {
             ApiResponse<CancelPaymentByIdempotencyKeyResponse> localVarResponse = await CancelPaymentByIdempotencyKeyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CancelPaymentByIdempotencyKey Cancels (voids) a payment identified by the idempotency key that is specified in the request.   Use this method when status of a CreatePayment request is unknown. For example, after you send a CreatePayment request a network error occurs and you don&#39;t get a response. In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your CreatePayment request you want  to cancel. After cancelling the payment, you can submit your CreatePayment request again. Note that if no payment with the specified idempotency key is found, no action is taken, the end  point returns successfully.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (CancelPaymentByIdempotencyKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelPaymentByIdempotencyKeyResponse>> CancelPaymentByIdempotencyKeyAsyncWithHttpInfo (CancelPaymentByIdempotencyKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->CancelPaymentByIdempotencyKey");

            var localVarPath = "/v2/payments/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelPaymentByIdempotencyKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelPaymentByIdempotencyKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelPaymentByIdempotencyKeyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelPaymentByIdempotencyKeyResponse)));
            
        }

        /// <summary>
        /// CompletePayment Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set autocomplete to false when creating a payment, you can complete (capture)  the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID identifying the payment to be completed.</param>
        /// <returns>CompletePaymentResponse</returns>
        public CompletePaymentResponse CompletePayment (string paymentId)
        {
             ApiResponse<CompletePaymentResponse> localVarResponse = CompletePaymentWithHttpInfo(paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CompletePayment Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set autocomplete to false when creating a payment, you can complete (capture)  the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID identifying the payment to be completed.</param>
        /// <returns>ApiResponse of CompletePaymentResponse</returns>
        public ApiResponse< CompletePaymentResponse > CompletePaymentWithHttpInfo (string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentsApi->CompletePayment");

            var localVarPath = "/v2/payments/{payment_id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (paymentId != null) localVarPathParams.Add("payment_id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompletePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompletePaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompletePaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompletePaymentResponse)));
            
        }

        /// <summary>
        /// CompletePayment Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set autocomplete to false when creating a payment, you can complete (capture)  the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID identifying the payment to be completed.</param>
        /// <returns>Task of CompletePaymentResponse</returns>
        public async System.Threading.Tasks.Task<CompletePaymentResponse> CompletePaymentAsync (string paymentId)
        {
             ApiResponse<CompletePaymentResponse> localVarResponse = await CompletePaymentAsyncWithHttpInfo(paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CompletePayment Completes (captures) a payment.  By default, payments are set to complete immediately after they are created.  If you set autocomplete to false when creating a payment, you can complete (capture)  the payment using this endpoint. For more information, see [Delayed Payments](/payments-api/take-payments#delayed-payments).
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID identifying the payment to be completed.</param>
        /// <returns>Task of ApiResponse (CompletePaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompletePaymentResponse>> CompletePaymentAsyncWithHttpInfo (string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentsApi->CompletePayment");

            var localVarPath = "/v2/payments/{payment_id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentId != null) localVarPathParams.Add("payment_id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompletePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompletePaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompletePaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompletePaymentResponse)));
            
        }

        /// <summary>
        /// CreatePayment Charges a payment source, for example, a card  represented by customer&#39;s card on file or a card nonce. In addition  to the payment source, the request must also include the  amount to accept for the payment.  There are several optional parameters that you can include in the request.  For example, tip money, whether to autocomplete the payment, or a reference ID to correlate this payment with another system.  For more information about these  payment options, see [Take Payments](/payments-api/take-payments).  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>CreatePaymentResponse</returns>
        public CreatePaymentResponse CreatePayment (CreatePaymentRequest body)
        {
             ApiResponse<CreatePaymentResponse> localVarResponse = CreatePaymentWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreatePayment Charges a payment source, for example, a card  represented by customer&#39;s card on file or a card nonce. In addition  to the payment source, the request must also include the  amount to accept for the payment.  There are several optional parameters that you can include in the request.  For example, tip money, whether to autocomplete the payment, or a reference ID to correlate this payment with another system.  For more information about these  payment options, see [Take Payments](/payments-api/take-payments).  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of CreatePaymentResponse</returns>
        public ApiResponse< CreatePaymentResponse > CreatePaymentWithHttpInfo (CreatePaymentRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->CreatePayment");

            var localVarPath = "/v2/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatePaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatePaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatePaymentResponse)));
            
        }

        /// <summary>
        /// CreatePayment Charges a payment source, for example, a card  represented by customer&#39;s card on file or a card nonce. In addition  to the payment source, the request must also include the  amount to accept for the payment.  There are several optional parameters that you can include in the request.  For example, tip money, whether to autocomplete the payment, or a reference ID to correlate this payment with another system.  For more information about these  payment options, see [Take Payments](/payments-api/take-payments).  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of CreatePaymentResponse</returns>
        public async System.Threading.Tasks.Task<CreatePaymentResponse> CreatePaymentAsync (CreatePaymentRequest body)
        {
             ApiResponse<CreatePaymentResponse> localVarResponse = await CreatePaymentAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreatePayment Charges a payment source, for example, a card  represented by customer&#39;s card on file or a card nonce. In addition  to the payment source, the request must also include the  amount to accept for the payment.  There are several optional parameters that you can include in the request.  For example, tip money, whether to autocomplete the payment, or a reference ID to correlate this payment with another system.  For more information about these  payment options, see [Take Payments](/payments-api/take-payments).  The &#x60;PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS&#x60; OAuth permission is required to enable application fees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (CreatePaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatePaymentResponse>> CreatePaymentAsyncWithHttpInfo (CreatePaymentRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->CreatePayment");

            var localVarPath = "/v2/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatePaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatePaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatePaymentResponse)));
            
        }

        /// <summary>
        /// GetPayment Retrieves details for a specific Payment.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID for the desired &#x60;Payment&#x60;.</param>
        /// <returns>GetPaymentResponse</returns>
        public GetPaymentResponse GetPayment (string paymentId)
        {
             ApiResponse<GetPaymentResponse> localVarResponse = GetPaymentWithHttpInfo(paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GetPayment Retrieves details for a specific Payment.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID for the desired &#x60;Payment&#x60;.</param>
        /// <returns>ApiResponse of GetPaymentResponse</returns>
        public ApiResponse< GetPaymentResponse > GetPaymentWithHttpInfo (string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentsApi->GetPayment");

            var localVarPath = "/v2/payments/{payment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (paymentId != null) localVarPathParams.Add("payment_id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPaymentResponse)));
            
        }

        /// <summary>
        /// GetPayment Retrieves details for a specific Payment.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID for the desired &#x60;Payment&#x60;.</param>
        /// <returns>Task of GetPaymentResponse</returns>
        public async System.Threading.Tasks.Task<GetPaymentResponse> GetPaymentAsync (string paymentId)
        {
             ApiResponse<GetPaymentResponse> localVarResponse = await GetPaymentAsyncWithHttpInfo(paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GetPayment Retrieves details for a specific Payment.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">Unique ID for the desired &#x60;Payment&#x60;.</param>
        /// <returns>Task of ApiResponse (GetPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPaymentResponse>> GetPaymentAsyncWithHttpInfo (string paymentId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentsApi->GetPayment");

            var localVarPath = "/v2/payments/{payment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentId != null) localVarPathParams.Add("payment_id", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPaymentResponse)));
            
        }

        /// <summary>
        /// ListPayments Retrieves a list of payments taken by the account making the request.  Max results per page: 100
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment (optional)</param>
        /// <param name="total">The exact amount in the total_money for a &#x60;Payment&#x60;. (optional)</param>
        /// <param name="last4">The last 4 digits of &#x60;Payment&#x60; card. (optional)</param>
        /// <param name="cardBrand">The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60; (optional)</param>
        /// <returns>ListPaymentsResponse</returns>
        public ListPaymentsResponse ListPayments (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, long? total = null, string last4 = null, string cardBrand = null)
        {
             ApiResponse<ListPaymentsResponse> localVarResponse = ListPaymentsWithHttpInfo(beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListPayments Retrieves a list of payments taken by the account making the request.  Max results per page: 100
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment (optional)</param>
        /// <param name="total">The exact amount in the total_money for a &#x60;Payment&#x60;. (optional)</param>
        /// <param name="last4">The last 4 digits of &#x60;Payment&#x60; card. (optional)</param>
        /// <param name="cardBrand">The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60; (optional)</param>
        /// <returns>ApiResponse of ListPaymentsResponse</returns>
        public ApiResponse< ListPaymentsResponse > ListPaymentsWithHttpInfo (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, long? total = null, string last4 = null, string cardBrand = null)
        {

            var localVarPath = "/v2/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-09-25");
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sort_order", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter
            if (locationId != null) localVarQueryParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // query parameter
            if (total != null) localVarQueryParams.Add("total", Configuration.ApiClient.ParameterToString(total)); // query parameter
            if (last4 != null) localVarQueryParams.Add("last_4", Configuration.ApiClient.ParameterToString(last4)); // query parameter
            if (cardBrand != null) localVarQueryParams.Add("card_brand", Configuration.ApiClient.ParameterToString(cardBrand)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPaymentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPaymentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPaymentsResponse)));
            
        }

        /// <summary>
        /// ListPayments Retrieves a list of payments taken by the account making the request.  Max results per page: 100
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment (optional)</param>
        /// <param name="total">The exact amount in the total_money for a &#x60;Payment&#x60;. (optional)</param>
        /// <param name="last4">The last 4 digits of &#x60;Payment&#x60; card. (optional)</param>
        /// <param name="cardBrand">The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60; (optional)</param>
        /// <returns>Task of ListPaymentsResponse</returns>
        public async System.Threading.Tasks.Task<ListPaymentsResponse> ListPaymentsAsync (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, long? total = null, string last4 = null, string cardBrand = null)
        {
             ApiResponse<ListPaymentsResponse> localVarResponse = await ListPaymentsAsyncWithHttpInfo(beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListPayments Retrieves a list of payments taken by the account making the request.  Max results per page: 100
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="beginTime">Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year. (optional)</param>
        /// <param name="endTime">Timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time. (optional)</param>
        /// <param name="sortOrder">The order in which results are listed. - &#x60;ASC&#x60; - oldest to newest - &#x60;DESC&#x60; - newest to oldest (default). (optional)</param>
        /// <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information. (optional)</param>
        /// <param name="locationId">ID of location associated with payment (optional)</param>
        /// <param name="total">The exact amount in the total_money for a &#x60;Payment&#x60;. (optional)</param>
        /// <param name="last4">The last 4 digits of &#x60;Payment&#x60; card. (optional)</param>
        /// <param name="cardBrand">The brand of &#x60;Payment&#x60; card. For example, &#x60;VISA&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ListPaymentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPaymentsResponse>> ListPaymentsAsyncWithHttpInfo (string beginTime = null, string endTime = null, string sortOrder = null, string cursor = null, string locationId = null, long? total = null, string last4 = null, string cardBrand = null)
        {

            var localVarPath = "/v2/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sort_order", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (cursor != null) localVarQueryParams.Add("cursor", Configuration.ApiClient.ParameterToString(cursor)); // query parameter
            if (locationId != null) localVarQueryParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // query parameter
            if (total != null) localVarQueryParams.Add("total", Configuration.ApiClient.ParameterToString(total)); // query parameter
            if (last4 != null) localVarQueryParams.Add("last_4", Configuration.ApiClient.ParameterToString(last4)); // query parameter
            if (cardBrand != null) localVarQueryParams.Add("card_brand", Configuration.ApiClient.ParameterToString(cardBrand)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPaymentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPaymentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPaymentsResponse)));
            
        }

    }
}
