/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Square.Connect.Client;
using Square.Connect.Model;

namespace Square.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV1EmployeesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CreateEmployee
        /// </summary>
        /// <remarks>
        ///  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Employee</returns>        V1Employee CreateEmployee (V1Employee body);

        /// <summary>
        /// CreateEmployee
        /// </summary>
        /// <remarks>
        ///  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        ApiResponse<V1Employee> CreateEmployeeWithHttpInfo (V1Employee body);
        /// <summary>
        /// CreateEmployeeRole
        /// </summary>
        /// <remarks>
        /// Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>V1EmployeeRole</returns>        V1EmployeeRole CreateEmployeeRole (V1EmployeeRole employeeRole);

        /// <summary>
        /// CreateEmployeeRole
        /// </summary>
        /// <remarks>
        /// Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        ApiResponse<V1EmployeeRole> CreateEmployeeRoleWithHttpInfo (V1EmployeeRole employeeRole);
        /// <summary>
        /// CreateTimecard
        /// </summary>
        /// <remarks>
        /// Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Timecard</returns>        V1Timecard CreateTimecard (V1Timecard body);

        /// <summary>
        /// CreateTimecard
        /// </summary>
        /// <remarks>
        /// Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        ApiResponse<V1Timecard> CreateTimecardWithHttpInfo (V1Timecard body);
        /// <summary>
        /// DeleteTimecard
        /// </summary>
        /// <remarks>
        /// Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Object</returns>        Object DeleteTimecard (string timecardId);

        /// <summary>
        /// DeleteTimecard
        /// </summary>
        /// <remarks>
        /// Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteTimecardWithHttpInfo (string timecardId);
        /// <summary>
        /// ListCashDrawerShifts
        /// </summary>
        /// <remarks>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>List&lt;V1CashDrawerShift&gt;</returns>        List<V1CashDrawerShift> ListCashDrawerShifts (string locationId, string order = null, string beginTime = null, string endTime = null);

        /// <summary>
        /// ListCashDrawerShifts
        /// </summary>
        /// <remarks>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1CashDrawerShift&gt;</returns>
        ApiResponse<List<V1CashDrawerShift>> ListCashDrawerShiftsWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null);
        /// <summary>
        /// ListEmployeeRoles
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1EmployeeRole&gt;</returns>        List<V1EmployeeRole> ListEmployeeRoles (string order = null, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListEmployeeRoles
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1EmployeeRole&gt;</returns>
        ApiResponse<List<V1EmployeeRole>> ListEmployeeRolesWithHttpInfo (string order = null, int? limit = null, string batchToken = null);
        /// <summary>
        /// ListEmployees
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Employee&gt;</returns>        List<V1Employee> ListEmployees (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListEmployees
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Employee&gt;</returns>
        ApiResponse<List<V1Employee>> ListEmployeesWithHttpInfo (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null, string batchToken = null);
        /// <summary>
        /// ListTimecardEvents
        /// </summary>
        /// <remarks>
        /// Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>List&lt;V1TimecardEvent&gt;</returns>        List<V1TimecardEvent> ListTimecardEvents (string timecardId);

        /// <summary>
        /// ListTimecardEvents
        /// </summary>
        /// <remarks>
        /// Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>ApiResponse of List&lt;V1TimecardEvent&gt;</returns>
        ApiResponse<List<V1TimecardEvent>> ListTimecardEventsWithHttpInfo (string timecardId);
        /// <summary>
        /// ListTimecards
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Timecard&gt;</returns>        List<V1Timecard> ListTimecards (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListTimecards
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Timecard&gt;</returns>
        ApiResponse<List<V1Timecard>> ListTimecardsWithHttpInfo (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string batchToken = null);
        /// <summary>
        /// RetrieveCashDrawerShift
        /// </summary>
        /// <remarks>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>V1CashDrawerShift</returns>        V1CashDrawerShift RetrieveCashDrawerShift (string locationId, string shiftId);

        /// <summary>
        /// RetrieveCashDrawerShift
        /// </summary>
        /// <remarks>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>ApiResponse of V1CashDrawerShift</returns>
        ApiResponse<V1CashDrawerShift> RetrieveCashDrawerShiftWithHttpInfo (string locationId, string shiftId);
        /// <summary>
        /// RetrieveEmployee
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>V1Employee</returns>        V1Employee RetrieveEmployee (string employeeId);

        /// <summary>
        /// RetrieveEmployee
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        ApiResponse<V1Employee> RetrieveEmployeeWithHttpInfo (string employeeId);
        /// <summary>
        /// RetrieveEmployeeRole
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>V1EmployeeRole</returns>        V1EmployeeRole RetrieveEmployeeRole (string roleId);

        /// <summary>
        /// RetrieveEmployeeRole
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        ApiResponse<V1EmployeeRole> RetrieveEmployeeRoleWithHttpInfo (string roleId);
        /// <summary>
        /// RetrieveTimecard
        /// </summary>
        /// <remarks>
        /// Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>V1Timecard</returns>        V1Timecard RetrieveTimecard (string timecardId);

        /// <summary>
        /// RetrieveTimecard
        /// </summary>
        /// <remarks>
        /// Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        ApiResponse<V1Timecard> RetrieveTimecardWithHttpInfo (string timecardId);
        /// <summary>
        /// UpdateEmployee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Employee</returns>        V1Employee UpdateEmployee (string employeeId, V1Employee body);

        /// <summary>
        /// UpdateEmployee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        ApiResponse<V1Employee> UpdateEmployeeWithHttpInfo (string employeeId, V1Employee body);
        /// <summary>
        /// UpdateEmployeeRole
        /// </summary>
        /// <remarks>
        /// Modifies the details of an employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1EmployeeRole</returns>        V1EmployeeRole UpdateEmployeeRole (string roleId, V1EmployeeRole body);

        /// <summary>
        /// UpdateEmployeeRole
        /// </summary>
        /// <remarks>
        /// Modifies the details of an employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        ApiResponse<V1EmployeeRole> UpdateEmployeeRoleWithHttpInfo (string roleId, V1EmployeeRole body);
        /// <summary>
        /// UpdateTimecard
        /// </summary>
        /// <remarks>
        /// Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
        /// <returns>V1Timecard</returns>        V1Timecard UpdateTimecard (string timecardId, V1Timecard body);

        /// <summary>
        /// UpdateTimecard
        /// </summary>
        /// <remarks>
        /// Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        ApiResponse<V1Timecard> UpdateTimecardWithHttpInfo (string timecardId, V1Timecard body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// CreateEmployee
        /// </summary>
        /// <remarks>
        ///  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Employee</returns>
        System.Threading.Tasks.Task<V1Employee> CreateEmployeeAsync (V1Employee body);

        /// <summary>
        /// CreateEmployee
        /// </summary>
        /// <remarks>
        ///  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Employee>> CreateEmployeeAsyncWithHttpInfo (V1Employee body);
        /// <summary>
        /// CreateEmployeeRole
        /// </summary>
        /// <remarks>
        /// Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        System.Threading.Tasks.Task<V1EmployeeRole> CreateEmployeeRoleAsync (V1EmployeeRole employeeRole);

        /// <summary>
        /// CreateEmployeeRole
        /// </summary>
        /// <remarks>
        /// Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> CreateEmployeeRoleAsyncWithHttpInfo (V1EmployeeRole employeeRole);
        /// <summary>
        /// CreateTimecard
        /// </summary>
        /// <remarks>
        /// Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Timecard</returns>
        System.Threading.Tasks.Task<V1Timecard> CreateTimecardAsync (V1Timecard body);

        /// <summary>
        /// CreateTimecard
        /// </summary>
        /// <remarks>
        /// Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Timecard>> CreateTimecardAsyncWithHttpInfo (V1Timecard body);
        /// <summary>
        /// DeleteTimecard
        /// </summary>
        /// <remarks>
        /// Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteTimecardAsync (string timecardId);

        /// <summary>
        /// DeleteTimecard
        /// </summary>
        /// <remarks>
        /// Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTimecardAsyncWithHttpInfo (string timecardId);
        /// <summary>
        /// ListCashDrawerShifts
        /// </summary>
        /// <remarks>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>Task of List&lt;V1CashDrawerShift&gt;</returns>
        System.Threading.Tasks.Task<List<V1CashDrawerShift>> ListCashDrawerShiftsAsync (string locationId, string order = null, string beginTime = null, string endTime = null);

        /// <summary>
        /// ListCashDrawerShifts
        /// </summary>
        /// <remarks>
        /// Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1CashDrawerShift&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1CashDrawerShift>>> ListCashDrawerShiftsAsyncWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null);
        /// <summary>
        /// ListEmployeeRoles
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1EmployeeRole&gt;</returns>
        System.Threading.Tasks.Task<List<V1EmployeeRole>> ListEmployeeRolesAsync (string order = null, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListEmployeeRoles
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee roles.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1EmployeeRole&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1EmployeeRole>>> ListEmployeeRolesAsyncWithHttpInfo (string order = null, int? limit = null, string batchToken = null);
        /// <summary>
        /// ListEmployees
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Employee&gt;</returns>
        System.Threading.Tasks.Task<List<V1Employee>> ListEmployeesAsync (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListEmployees
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employees.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Employee&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Employee>>> ListEmployeesAsyncWithHttpInfo (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null, string batchToken = null);
        /// <summary>
        /// ListTimecardEvents
        /// </summary>
        /// <remarks>
        /// Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>Task of List&lt;V1TimecardEvent&gt;</returns>
        System.Threading.Tasks.Task<List<V1TimecardEvent>> ListTimecardEventsAsync (string timecardId);

        /// <summary>
        /// ListTimecardEvents
        /// </summary>
        /// <remarks>
        /// Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1TimecardEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1TimecardEvent>>> ListTimecardEventsAsyncWithHttpInfo (string timecardId);
        /// <summary>
        /// ListTimecards
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Timecard&gt;</returns>
        System.Threading.Tasks.Task<List<V1Timecard>> ListTimecardsAsync (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string batchToken = null);

        /// <summary>
        /// ListTimecards
        /// </summary>
        /// <remarks>
        /// Provides summary information for all of a business&#39;s employee timecards.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Timecard&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<V1Timecard>>> ListTimecardsAsyncWithHttpInfo (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string batchToken = null);
        /// <summary>
        /// RetrieveCashDrawerShift
        /// </summary>
        /// <remarks>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>Task of V1CashDrawerShift</returns>
        System.Threading.Tasks.Task<V1CashDrawerShift> RetrieveCashDrawerShiftAsync (string locationId, string shiftId);

        /// <summary>
        /// RetrieveCashDrawerShift
        /// </summary>
        /// <remarks>
        /// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1CashDrawerShift)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1CashDrawerShift>> RetrieveCashDrawerShiftAsyncWithHttpInfo (string locationId, string shiftId);
        /// <summary>
        /// RetrieveEmployee
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>Task of V1Employee</returns>
        System.Threading.Tasks.Task<V1Employee> RetrieveEmployeeAsync (string employeeId);

        /// <summary>
        /// RetrieveEmployee
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Employee>> RetrieveEmployeeAsyncWithHttpInfo (string employeeId);
        /// <summary>
        /// RetrieveEmployeeRole
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        System.Threading.Tasks.Task<V1EmployeeRole> RetrieveEmployeeRoleAsync (string roleId);

        /// <summary>
        /// RetrieveEmployeeRole
        /// </summary>
        /// <remarks>
        /// Provides the details for a single employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> RetrieveEmployeeRoleAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// RetrieveTimecard
        /// </summary>
        /// <remarks>
        /// Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>Task of V1Timecard</returns>
        System.Threading.Tasks.Task<V1Timecard> RetrieveTimecardAsync (string timecardId);

        /// <summary>
        /// RetrieveTimecard
        /// </summary>
        /// <remarks>
        /// Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Timecard>> RetrieveTimecardAsyncWithHttpInfo (string timecardId);
        /// <summary>
        /// UpdateEmployee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Employee</returns>
        System.Threading.Tasks.Task<V1Employee> UpdateEmployeeAsync (string employeeId, V1Employee body);

        /// <summary>
        /// UpdateEmployee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Employee>> UpdateEmployeeAsyncWithHttpInfo (string employeeId, V1Employee body);
        /// <summary>
        /// UpdateEmployeeRole
        /// </summary>
        /// <remarks>
        /// Modifies the details of an employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        System.Threading.Tasks.Task<V1EmployeeRole> UpdateEmployeeRoleAsync (string roleId, V1EmployeeRole body);

        /// <summary>
        /// UpdateEmployeeRole
        /// </summary>
        /// <remarks>
        /// Modifies the details of an employee role.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> UpdateEmployeeRoleAsyncWithHttpInfo (string roleId, V1EmployeeRole body);
        /// <summary>
        /// UpdateTimecard
        /// </summary>
        /// <remarks>
        /// Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Timecard</returns>
        System.Threading.Tasks.Task<V1Timecard> UpdateTimecardAsync (string timecardId, V1Timecard body);

        /// <summary>
        /// UpdateTimecard
        /// </summary>
        /// <remarks>
        /// Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
        /// </remarks>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Timecard>> UpdateTimecardAsyncWithHttpInfo (string timecardId, V1Timecard body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V1EmployeesApi : IV1EmployeesApi
    {
        private Square.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V1EmployeesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public V1EmployeesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V1EmployeesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V1EmployeesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Square.Connect.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Square.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// CreateEmployee  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Employee</returns>
        public V1Employee CreateEmployee (V1Employee body)
        {
             ApiResponse<V1Employee> localVarResponse = CreateEmployeeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateEmployee  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        public ApiResponse< V1Employee > CreateEmployeeWithHttpInfo (V1Employee body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1EmployeesApi->CreateEmployee");

            var localVarPath = "/v1/me/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// CreateEmployee  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Employee</returns>
        public async System.Threading.Tasks.Task<V1Employee> CreateEmployeeAsync (V1Employee body)
        {
             ApiResponse<V1Employee> localVarResponse = await CreateEmployeeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateEmployee  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of &#x60;INACTIVE&#x60;. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  &lt;aside class&#x3D;\&quot;important\&quot;&gt; Employee entities cannot be deleted. To disable employee profiles, set the employee&#39;s status to &lt;code&gt;INACTIVE&lt;/code&gt; &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Employee>> CreateEmployeeAsyncWithHttpInfo (V1Employee body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1EmployeesApi->CreateEmployee");

            var localVarPath = "/v1/me/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// CreateEmployeeRole Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>V1EmployeeRole</returns>
        public V1EmployeeRole CreateEmployeeRole (V1EmployeeRole employeeRole)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = CreateEmployeeRoleWithHttpInfo(employeeRole);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateEmployeeRole Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        public ApiResponse< V1EmployeeRole > CreateEmployeeRoleWithHttpInfo (V1EmployeeRole employeeRole)
        {
            // verify the required parameter 'employeeRole' is set
            if (employeeRole == null)
                throw new ApiException(400, "Missing required parameter 'employeeRole' when calling V1EmployeesApi->CreateEmployeeRole");

            var localVarPath = "/v1/me/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (employeeRole != null && employeeRole.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(employeeRole); // http body (model) parameter
            }
            else
            {
                localVarPostBody = employeeRole; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// CreateEmployeeRole Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        public async System.Threading.Tasks.Task<V1EmployeeRole> CreateEmployeeRoleAsync (V1EmployeeRole employeeRole)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = await CreateEmployeeRoleAsyncWithHttpInfo(employeeRole);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateEmployeeRole Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \&quot;Shift Manager\&quot; role might be able to issue refunds in Square Point of Sale, whereas an employee with a \&quot;Clerk\&quot; role might not.  Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> CreateEmployeeRoleAsyncWithHttpInfo (V1EmployeeRole employeeRole)
        {
            // verify the required parameter 'employeeRole' is set
            if (employeeRole == null)
                throw new ApiException(400, "Missing required parameter 'employeeRole' when calling V1EmployeesApi->CreateEmployeeRole");

            var localVarPath = "/v1/me/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (employeeRole != null && employeeRole.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(employeeRole); // http body (model) parameter
            }
            else
            {
                localVarPostBody = employeeRole; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// CreateTimecard Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Timecard</returns>
        public V1Timecard CreateTimecard (V1Timecard body)
        {
             ApiResponse<V1Timecard> localVarResponse = CreateTimecardWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// CreateTimecard Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        public ApiResponse< V1Timecard > CreateTimecardWithHttpInfo (V1Timecard body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1EmployeesApi->CreateTimecard");

            var localVarPath = "/v1/me/timecards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

        /// <summary>
        /// CreateTimecard Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Timecard</returns>
        public async System.Threading.Tasks.Task<V1Timecard> CreateTimecardAsync (V1Timecard body)
        {
             ApiResponse<V1Timecard> localVarResponse = await CreateTimecardAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CreateTimecard Creates a timecard for an employee and clocks them in with an &#x60;API_CREATE&#x60; event and a &#x60;clockin_time&#x60; set to the current time unless the request provides a different value. To import timecards from another system (rather than clocking someone in). Specify the &#x60;clockin_time&#x60; and* &#x60;clockout_time&#x60; in the request.  Timecards correspond to exactly one shift for a given employee, bounded by the &#x60;clockin_time&#x60; and &#x60;clockout_time&#x60; fields. An employee is considered clocked in if they have a timecard that doesn&#39;t have a &#x60;clockout_time&#x60; set. An employee that is currently clocked in cannot be clocked in a second time.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Timecard>> CreateTimecardAsyncWithHttpInfo (V1Timecard body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1EmployeesApi->CreateTimecard");

            var localVarPath = "/v1/me/timecards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

        /// <summary>
        /// DeleteTimecard Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Object</returns>
        public Object DeleteTimecard (string timecardId)
        {
             ApiResponse<Object> localVarResponse = DeleteTimecardWithHttpInfo(timecardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteTimecard Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteTimecardWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling V1EmployeesApi->DeleteTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// DeleteTimecard Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteTimecardAsync (string timecardId)
        {
             ApiResponse<Object> localVarResponse = await DeleteTimecardAsyncWithHttpInfo(timecardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteTimecard Deletes a timecard. Timecards can also be deleted through the Square Dashboard. Deleted timecards are still accessible through Connect API endpoints, but cannot be modified. The &#x60;deleted&#x60; field of the &#x60;Timecard&#x60; object indicates whether the timecard has been deleted.  *Note**: By default, deleted timecards appear alongside valid timecards in results returned by the [ListTimecards](#endpoint-v1employees-listtimecards) endpoint. To filter deleted timecards, include the &#x60;deleted&#x60; query parameter in the list request.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to delete.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTimecardAsyncWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling V1EmployeesApi->DeleteTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// ListCashDrawerShifts Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>List&lt;V1CashDrawerShift&gt;</returns>
        public List<V1CashDrawerShift> ListCashDrawerShifts (string locationId, string order = null, string beginTime = null, string endTime = null)
        {
             ApiResponse<List<V1CashDrawerShift>> localVarResponse = ListCashDrawerShiftsWithHttpInfo(locationId, order, beginTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListCashDrawerShifts Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1CashDrawerShift&gt;</returns>
        public ApiResponse< List<V1CashDrawerShift> > ListCashDrawerShiftsWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1EmployeesApi->ListCashDrawerShifts");

            var localVarPath = "/v1/{location_id}/cash-drawer-shifts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCashDrawerShifts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1CashDrawerShift>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1CashDrawerShift>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1CashDrawerShift>)));
            
        }

        /// <summary>
        /// ListCashDrawerShifts Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>Task of List&lt;V1CashDrawerShift&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1CashDrawerShift>> ListCashDrawerShiftsAsync (string locationId, string order = null, string beginTime = null, string endTime = null)
        {
             ApiResponse<List<V1CashDrawerShift>> localVarResponse = await ListCashDrawerShiftsAsyncWithHttpInfo(locationId, order, beginTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListCashDrawerShifts Provides the details for all of a location&#39;s cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
        /// <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
        /// <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1CashDrawerShift&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1CashDrawerShift>>> ListCashDrawerShiftsAsyncWithHttpInfo (string locationId, string order = null, string beginTime = null, string endTime = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1EmployeesApi->ListCashDrawerShifts");

            var localVarPath = "/v1/{location_id}/cash-drawer-shifts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginTime != null) localVarQueryParams.Add("begin_time", Configuration.ApiClient.ParameterToString(beginTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("end_time", Configuration.ApiClient.ParameterToString(endTime)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCashDrawerShifts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1CashDrawerShift>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1CashDrawerShift>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1CashDrawerShift>)));
            
        }

        /// <summary>
        /// ListEmployeeRoles Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1EmployeeRole&gt;</returns>
        public List<V1EmployeeRole> ListEmployeeRoles (string order = null, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1EmployeeRole>> localVarResponse = ListEmployeeRolesWithHttpInfo(order, limit, batchToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListEmployeeRoles Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1EmployeeRole&gt;</returns>
        public ApiResponse< List<V1EmployeeRole> > ListEmployeeRolesWithHttpInfo (string order = null, int? limit = null, string batchToken = null)
        {

            var localVarPath = "/v1/me/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmployeeRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1EmployeeRole>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1EmployeeRole>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1EmployeeRole>)));
            
        }

        /// <summary>
        /// ListEmployeeRoles Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1EmployeeRole&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1EmployeeRole>> ListEmployeeRolesAsync (string order = null, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1EmployeeRole>> localVarResponse = await ListEmployeeRolesAsyncWithHttpInfo(order, limit, batchToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListEmployeeRoles Provides summary information for all of a business&#39;s employee roles.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1EmployeeRole&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1EmployeeRole>>> ListEmployeeRolesAsyncWithHttpInfo (string order = null, int? limit = null, string batchToken = null)
        {

            var localVarPath = "/v1/me/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmployeeRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1EmployeeRole>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1EmployeeRole>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1EmployeeRole>)));
            
        }

        /// <summary>
        /// ListEmployees Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Employee&gt;</returns>
        public List<V1Employee> ListEmployees (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1Employee>> localVarResponse = ListEmployeesWithHttpInfo(order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit, batchToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListEmployees Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Employee&gt;</returns>
        public ApiResponse< List<V1Employee> > ListEmployeesWithHttpInfo (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null, string batchToken = null)
        {

            var localVarPath = "/v1/me/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginUpdatedAt != null) localVarQueryParams.Add("begin_updated_at", Configuration.ApiClient.ParameterToString(beginUpdatedAt)); // query parameter
            if (endUpdatedAt != null) localVarQueryParams.Add("end_updated_at", Configuration.ApiClient.ParameterToString(endUpdatedAt)); // query parameter
            if (beginCreatedAt != null) localVarQueryParams.Add("begin_created_at", Configuration.ApiClient.ParameterToString(beginCreatedAt)); // query parameter
            if (endCreatedAt != null) localVarQueryParams.Add("end_created_at", Configuration.ApiClient.ParameterToString(endCreatedAt)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (externalId != null) localVarQueryParams.Add("external_id", Configuration.ApiClient.ParameterToString(externalId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Employee>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Employee>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Employee>)));
            
        }

        /// <summary>
        /// ListEmployees Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Employee&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Employee>> ListEmployeesAsync (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1Employee>> localVarResponse = await ListEmployeesAsyncWithHttpInfo(order, beginUpdatedAt, endUpdatedAt, beginCreatedAt, endCreatedAt, status, externalId, limit, batchToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListEmployees Provides summary information for all of a business&#39;s employees.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
        /// <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Employee&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Employee>>> ListEmployeesAsyncWithHttpInfo (string order = null, string beginUpdatedAt = null, string endUpdatedAt = null, string beginCreatedAt = null, string endCreatedAt = null, string status = null, string externalId = null, int? limit = null, string batchToken = null)
        {

            var localVarPath = "/v1/me/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (beginUpdatedAt != null) localVarQueryParams.Add("begin_updated_at", Configuration.ApiClient.ParameterToString(beginUpdatedAt)); // query parameter
            if (endUpdatedAt != null) localVarQueryParams.Add("end_updated_at", Configuration.ApiClient.ParameterToString(endUpdatedAt)); // query parameter
            if (beginCreatedAt != null) localVarQueryParams.Add("begin_created_at", Configuration.ApiClient.ParameterToString(beginCreatedAt)); // query parameter
            if (endCreatedAt != null) localVarQueryParams.Add("end_created_at", Configuration.ApiClient.ParameterToString(endCreatedAt)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (externalId != null) localVarQueryParams.Add("external_id", Configuration.ApiClient.ParameterToString(externalId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Employee>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Employee>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Employee>)));
            
        }

        /// <summary>
        /// ListTimecardEvents Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>List&lt;V1TimecardEvent&gt;</returns>
        public List<V1TimecardEvent> ListTimecardEvents (string timecardId)
        {
             ApiResponse<List<V1TimecardEvent>> localVarResponse = ListTimecardEventsWithHttpInfo(timecardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListTimecardEvents Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>ApiResponse of List&lt;V1TimecardEvent&gt;</returns>
        public ApiResponse< List<V1TimecardEvent> > ListTimecardEventsWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling V1EmployeesApi->ListTimecardEvents");

            var localVarPath = "/v1/me/timecards/{timecard_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTimecardEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1TimecardEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1TimecardEvent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1TimecardEvent>)));
            
        }

        /// <summary>
        /// ListTimecardEvents Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>Task of List&lt;V1TimecardEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1TimecardEvent>> ListTimecardEventsAsync (string timecardId)
        {
             ApiResponse<List<V1TimecardEvent>> localVarResponse = await ListTimecardEventsAsyncWithHttpInfo(timecardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListTimecardEvents Provides summary information for all events associated with a particular timecard.  &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The ID of the timecard to list events for.</param>
        /// <returns>Task of ApiResponse (List&lt;V1TimecardEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1TimecardEvent>>> ListTimecardEventsAsyncWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling V1EmployeesApi->ListTimecardEvents");

            var localVarPath = "/v1/me/timecards/{timecard_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTimecardEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1TimecardEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1TimecardEvent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1TimecardEvent>)));
            
        }

        /// <summary>
        /// ListTimecards Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>List&lt;V1Timecard&gt;</returns>
        public List<V1Timecard> ListTimecards (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1Timecard>> localVarResponse = ListTimecardsWithHttpInfo(order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, batchToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// ListTimecards Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>ApiResponse of List&lt;V1Timecard&gt;</returns>
        public ApiResponse< List<V1Timecard> > ListTimecardsWithHttpInfo (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string batchToken = null)
        {

            var localVarPath = "/v1/me/timecards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (employeeId != null) localVarQueryParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // query parameter
            if (beginClockinTime != null) localVarQueryParams.Add("begin_clockin_time", Configuration.ApiClient.ParameterToString(beginClockinTime)); // query parameter
            if (endClockinTime != null) localVarQueryParams.Add("end_clockin_time", Configuration.ApiClient.ParameterToString(endClockinTime)); // query parameter
            if (beginClockoutTime != null) localVarQueryParams.Add("begin_clockout_time", Configuration.ApiClient.ParameterToString(beginClockoutTime)); // query parameter
            if (endClockoutTime != null) localVarQueryParams.Add("end_clockout_time", Configuration.ApiClient.ParameterToString(endClockoutTime)); // query parameter
            if (beginUpdatedAt != null) localVarQueryParams.Add("begin_updated_at", Configuration.ApiClient.ParameterToString(beginUpdatedAt)); // query parameter
            if (endUpdatedAt != null) localVarQueryParams.Add("end_updated_at", Configuration.ApiClient.ParameterToString(endUpdatedAt)); // query parameter
            if (deleted != null) localVarQueryParams.Add("deleted", Configuration.ApiClient.ParameterToString(deleted)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Timecard>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Timecard>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Timecard>)));
            
        }

        /// <summary>
        /// ListTimecards Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of List&lt;V1Timecard&gt;</returns>
        public async System.Threading.Tasks.Task<List<V1Timecard>> ListTimecardsAsync (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string batchToken = null)
        {
             ApiResponse<List<V1Timecard>> localVarResponse = await ListTimecardsAsyncWithHttpInfo(order, employeeId, beginClockinTime, endClockinTime, beginClockoutTime, endClockoutTime, beginUpdatedAt, endUpdatedAt, deleted, limit, batchToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// ListTimecards Provides summary information for all of a business&#39;s employee timecards.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
        /// <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
        /// <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
        /// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don&#39;t provide this parameter, both valid and deleted timecards are returned. (optional)</param>
        /// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
        /// <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;V1Timecard&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<V1Timecard>>> ListTimecardsAsyncWithHttpInfo (string order = null, string employeeId = null, string beginClockinTime = null, string endClockinTime = null, string beginClockoutTime = null, string endClockoutTime = null, string beginUpdatedAt = null, string endUpdatedAt = null, bool? deleted = null, int? limit = null, string batchToken = null)
        {

            var localVarPath = "/v1/me/timecards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (employeeId != null) localVarQueryParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // query parameter
            if (beginClockinTime != null) localVarQueryParams.Add("begin_clockin_time", Configuration.ApiClient.ParameterToString(beginClockinTime)); // query parameter
            if (endClockinTime != null) localVarQueryParams.Add("end_clockin_time", Configuration.ApiClient.ParameterToString(endClockinTime)); // query parameter
            if (beginClockoutTime != null) localVarQueryParams.Add("begin_clockout_time", Configuration.ApiClient.ParameterToString(beginClockoutTime)); // query parameter
            if (endClockoutTime != null) localVarQueryParams.Add("end_clockout_time", Configuration.ApiClient.ParameterToString(endClockoutTime)); // query parameter
            if (beginUpdatedAt != null) localVarQueryParams.Add("begin_updated_at", Configuration.ApiClient.ParameterToString(beginUpdatedAt)); // query parameter
            if (endUpdatedAt != null) localVarQueryParams.Add("end_updated_at", Configuration.ApiClient.ParameterToString(endUpdatedAt)); // query parameter
            if (deleted != null) localVarQueryParams.Add("deleted", Configuration.ApiClient.ParameterToString(deleted)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (batchToken != null) localVarQueryParams.Add("batch_token", Configuration.ApiClient.ParameterToString(batchToken)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<V1Timecard>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (List<V1Timecard>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<V1Timecard>)));
            
        }

        /// <summary>
        /// RetrieveCashDrawerShift Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>V1CashDrawerShift</returns>
        public V1CashDrawerShift RetrieveCashDrawerShift (string locationId, string shiftId)
        {
             ApiResponse<V1CashDrawerShift> localVarResponse = RetrieveCashDrawerShiftWithHttpInfo(locationId, shiftId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveCashDrawerShift Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>ApiResponse of V1CashDrawerShift</returns>
        public ApiResponse< V1CashDrawerShift > RetrieveCashDrawerShiftWithHttpInfo (string locationId, string shiftId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1EmployeesApi->RetrieveCashDrawerShift");
            // verify the required parameter 'shiftId' is set
            if (shiftId == null)
                throw new ApiException(400, "Missing required parameter 'shiftId' when calling V1EmployeesApi->RetrieveCashDrawerShift");

            var localVarPath = "/v1/{location_id}/cash-drawer-shifts/{shift_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (shiftId != null) localVarPathParams.Add("shift_id", Configuration.ApiClient.ParameterToString(shiftId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCashDrawerShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1CashDrawerShift>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1CashDrawerShift) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1CashDrawerShift)));
            
        }

        /// <summary>
        /// RetrieveCashDrawerShift Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>Task of V1CashDrawerShift</returns>
        public async System.Threading.Tasks.Task<V1CashDrawerShift> RetrieveCashDrawerShiftAsync (string locationId, string shiftId)
        {
             ApiResponse<V1CashDrawerShift> localVarResponse = await RetrieveCashDrawerShiftAsyncWithHttpInfo(locationId, shiftId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveCashDrawerShift Provides the details for a single cash drawer shift, including all events that occurred during the shift.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
        /// <param name="shiftId">The shift&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1CashDrawerShift)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1CashDrawerShift>> RetrieveCashDrawerShiftAsyncWithHttpInfo (string locationId, string shiftId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling V1EmployeesApi->RetrieveCashDrawerShift");
            // verify the required parameter 'shiftId' is set
            if (shiftId == null)
                throw new ApiException(400, "Missing required parameter 'shiftId' when calling V1EmployeesApi->RetrieveCashDrawerShift");

            var localVarPath = "/v1/{location_id}/cash-drawer-shifts/{shift_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (locationId != null) localVarPathParams.Add("location_id", Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (shiftId != null) localVarPathParams.Add("shift_id", Configuration.ApiClient.ParameterToString(shiftId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCashDrawerShift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1CashDrawerShift>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1CashDrawerShift) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1CashDrawerShift)));
            
        }

        /// <summary>
        /// RetrieveEmployee Provides the details for a single employee.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>V1Employee</returns>
        public V1Employee RetrieveEmployee (string employeeId)
        {
             ApiResponse<V1Employee> localVarResponse = RetrieveEmployeeWithHttpInfo(employeeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveEmployee Provides the details for a single employee.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        public ApiResponse< V1Employee > RetrieveEmployeeWithHttpInfo (string employeeId)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling V1EmployeesApi->RetrieveEmployee");

            var localVarPath = "/v1/me/employees/{employee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (employeeId != null) localVarPathParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// RetrieveEmployee Provides the details for a single employee.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>Task of V1Employee</returns>
        public async System.Threading.Tasks.Task<V1Employee> RetrieveEmployeeAsync (string employeeId)
        {
             ApiResponse<V1Employee> localVarResponse = await RetrieveEmployeeAsyncWithHttpInfo(employeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveEmployee Provides the details for a single employee.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The employee&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Employee>> RetrieveEmployeeAsyncWithHttpInfo (string employeeId)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling V1EmployeesApi->RetrieveEmployee");

            var localVarPath = "/v1/me/employees/{employee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (employeeId != null) localVarPathParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// RetrieveEmployeeRole Provides the details for a single employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>V1EmployeeRole</returns>
        public V1EmployeeRole RetrieveEmployeeRole (string roleId)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = RetrieveEmployeeRoleWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveEmployeeRole Provides the details for a single employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        public ApiResponse< V1EmployeeRole > RetrieveEmployeeRoleWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling V1EmployeesApi->RetrieveEmployeeRole");

            var localVarPath = "/v1/me/roles/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (roleId != null) localVarPathParams.Add("role_id", Configuration.ApiClient.ParameterToString(roleId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// RetrieveEmployeeRole Provides the details for a single employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        public async System.Threading.Tasks.Task<V1EmployeeRole> RetrieveEmployeeRoleAsync (string roleId)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = await RetrieveEmployeeRoleAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveEmployeeRole Provides the details for a single employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The role&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> RetrieveEmployeeRoleAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling V1EmployeesApi->RetrieveEmployeeRole");

            var localVarPath = "/v1/me/roles/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (roleId != null) localVarPathParams.Add("role_id", Configuration.ApiClient.ParameterToString(roleId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// RetrieveTimecard Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>V1Timecard</returns>
        public V1Timecard RetrieveTimecard (string timecardId)
        {
             ApiResponse<V1Timecard> localVarResponse = RetrieveTimecardWithHttpInfo(timecardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RetrieveTimecard Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        public ApiResponse< V1Timecard > RetrieveTimecardWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling V1EmployeesApi->RetrieveTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

        /// <summary>
        /// RetrieveTimecard Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>Task of V1Timecard</returns>
        public async System.Threading.Tasks.Task<V1Timecard> RetrieveTimecardAsync (string timecardId)
        {
             ApiResponse<V1Timecard> localVarResponse = await RetrieveTimecardAsyncWithHttpInfo(timecardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RetrieveTimecard Provides the details for a single timecard. &lt;aside&gt; Only approved accounts can manage their employees with Square. Unapproved accounts cannot use employee management features with the API. &lt;/aside&gt;
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">The timecard&#39;s ID.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Timecard>> RetrieveTimecardAsyncWithHttpInfo (string timecardId)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling V1EmployeesApi->RetrieveTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

        /// <summary>
        /// UpdateEmployee 
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1Employee</returns>
        public V1Employee UpdateEmployee (string employeeId, V1Employee body)
        {
             ApiResponse<V1Employee> localVarResponse = UpdateEmployeeWithHttpInfo(employeeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateEmployee 
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Employee</returns>
        public ApiResponse< V1Employee > UpdateEmployeeWithHttpInfo (string employeeId, V1Employee body)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling V1EmployeesApi->UpdateEmployee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1EmployeesApi->UpdateEmployee");

            var localVarPath = "/v1/me/employees/{employee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (employeeId != null) localVarPathParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// UpdateEmployee 
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Employee</returns>
        public async System.Threading.Tasks.Task<V1Employee> UpdateEmployeeAsync (string employeeId, V1Employee body)
        {
             ApiResponse<V1Employee> localVarResponse = await UpdateEmployeeAsyncWithHttpInfo(employeeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateEmployee 
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Employee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Employee>> UpdateEmployeeAsyncWithHttpInfo (string employeeId, V1Employee body)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling V1EmployeesApi->UpdateEmployee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1EmployeesApi->UpdateEmployee");

            var localVarPath = "/v1/me/employees/{employee_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (employeeId != null) localVarPathParams.Add("employee_id", Configuration.ApiClient.ParameterToString(employeeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Employee) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Employee)));
            
        }

        /// <summary>
        /// UpdateEmployeeRole Modifies the details of an employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>V1EmployeeRole</returns>
        public V1EmployeeRole UpdateEmployeeRole (string roleId, V1EmployeeRole body)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = UpdateEmployeeRoleWithHttpInfo(roleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateEmployeeRole Modifies the details of an employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1EmployeeRole</returns>
        public ApiResponse< V1EmployeeRole > UpdateEmployeeRoleWithHttpInfo (string roleId, V1EmployeeRole body)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling V1EmployeesApi->UpdateEmployeeRole");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1EmployeesApi->UpdateEmployeeRole");

            var localVarPath = "/v1/me/roles/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (roleId != null) localVarPathParams.Add("role_id", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// UpdateEmployeeRole Modifies the details of an employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of V1EmployeeRole</returns>
        public async System.Threading.Tasks.Task<V1EmployeeRole> UpdateEmployeeRoleAsync (string roleId, V1EmployeeRole body)
        {
             ApiResponse<V1EmployeeRole> localVarResponse = await UpdateEmployeeRoleAsyncWithHttpInfo(roleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateEmployeeRole Modifies the details of an employee role.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">The ID of the role to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1EmployeeRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1EmployeeRole>> UpdateEmployeeRoleAsyncWithHttpInfo (string roleId, V1EmployeeRole body)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling V1EmployeesApi->UpdateEmployeeRole");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1EmployeesApi->UpdateEmployeeRole");

            var localVarPath = "/v1/me/roles/{role_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (roleId != null) localVarPathParams.Add("role_id", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmployeeRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1EmployeeRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1EmployeeRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1EmployeeRole)));
            
        }

        /// <summary>
        /// UpdateTimecard Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
        /// <returns>V1Timecard</returns>
        public V1Timecard UpdateTimecard (string timecardId, V1Timecard body)
        {
             ApiResponse<V1Timecard> localVarResponse = UpdateTimecardWithHttpInfo(timecardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UpdateTimecard Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
        /// <returns>ApiResponse of V1Timecard</returns>
        public ApiResponse< V1Timecard > UpdateTimecardWithHttpInfo (string timecardId, V1Timecard body)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling V1EmployeesApi->UpdateTimecard");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1EmployeesApi->UpdateTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

        /// <summary>
        /// UpdateTimecard Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
        /// <returns>Task of V1Timecard</returns>
        public async System.Threading.Tasks.Task<V1Timecard> UpdateTimecardAsync (string timecardId, V1Timecard body)
        {
             ApiResponse<V1Timecard> localVarResponse = await UpdateTimecardAsyncWithHttpInfo(timecardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UpdateTimecard Modifies the details of a timecard with an &#x60;API_EDIT&#x60; event for the timecard. Updating an active timecard with a &#x60;clockout_time&#x60; clocks the employee out.
        /// </summary>
        /// <exception cref="Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timecardId">TThe ID of the timecard to modify.</param>
        /// <param name="body">An object containing the fields to POST for the request. See the corresponding object definition for field details.</param>
        /// <returns>Task of ApiResponse (V1Timecard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Timecard>> UpdateTimecardAsyncWithHttpInfo (string timecardId, V1Timecard body)
        {
            // verify the required parameter 'timecardId' is set
            if (timecardId == null)
                throw new ApiException(400, "Missing required parameter 'timecardId' when calling V1EmployeesApi->UpdateTimecard");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling V1EmployeesApi->UpdateTimecard");

            var localVarPath = "/v1/me/timecards/{timecard_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            localVarHeaderParams.Add("Square-Version", "2019-10-23");
            if (timecardId != null) localVarPathParams.Add("timecard_id", Configuration.ApiClient.ParameterToString(timecardId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Timecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString(), StringComparer.OrdinalIgnoreCase),
                (V1Timecard) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Timecard)));
            
        }

    }
}
